

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sat Jul 13 21:18:54 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F14K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=2
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=2
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=2
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    61                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    62                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    63                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    64  0000                     
    65                           ; Version 2.05
    66                           ; Generated 20/12/2018 GMT
    67                           ; 
    68                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    69                           ; All rights reserved.
    70                           ; 
    71                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    72                           ; 
    73                           ; Redistribution and use in source and binary forms, with or without modification, are
    74                           ; permitted provided that the following conditions are met:
    75                           ; 
    76                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    77                           ;        conditions and the following disclaimer.
    78                           ; 
    79                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    80                           ;        of conditions and the following disclaimer in the documentation and/or other
    81                           ;        materials provided with the distribution.
    82                           ; 
    83                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    84                           ;        software without specific prior written permission.
    85                           ; 
    86                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    87                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    88                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    89                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    90                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    91                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    92                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    93                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    94                           ; 
    95                           ; 
    96                           ; Code-generator required, PIC18F14K22 Definitions
    97                           ; 
    98                           ; SFR Addresses
    99  0000                     
   100                           	psect	idataBANK0
   101  001B78                     __pidataBANK0:
   102                           	opt callstack 0
   103                           
   104                           ;initializer for _moji2
   105  001B78  57                 	db	87
   106  001B79  61                 	db	97
   107  001B7A  6B                 	db	107
   108  001B7B  2D                 	db	45
   109  001B7C  74                 	db	116
   110  001B7D  65                 	db	101
   111  001B7E  63                 	db	99
   112  001B7F  68                 	db	104
   113  001B80  00                 	db	0
   114                           
   115                           ;initializer for LCD_SetCursor@F2916
   116  001B81  0000               	dw	0
   117  001B83  0040               	dw	64
   118                           
   119                           	psect	idataBANK1
   120  001B4A                     __pidataBANK1:
   121                           	opt callstack 0
   122                           
   123                           ;initializer for _moji
   124  001B4A  48                 	db	72
   125  001B4B  65                 	db	101
   126  001B4C  6C                 	db	108
   127  001B4D  6C                 	db	108
   128  001B4E  6F                 	db	111
   129  001B4F  2C                 	db	44
   130  001B50  20                 	db	32
   131  001B51  50                 	db	80
   132  001B52  49                 	db	73
   133  001B53  43                 	db	67
   134  001B54  20                 	db	32
   135  001B55  57                 	db	87
   136  001B56  6F                 	db	111
   137  001B57  72                 	db	114
   138  001B58  6C                 	db	108
   139  001B59  64                 	db	100
   140  001B5A  00                 	db	0
   141  0000                     _LATBbits	set	3978
   142  0000                     _RCONbits	set	4048
   143  0000                     _PIR2bits	set	4001
   144  0000                     _SSPSTATbits	set	4039
   145  0000                     _SSPMSK	set	3951
   146  0000                     _SSPBUF	set	4041
   147  0000                     _SSPCON2bits	set	4037
   148  0000                     _SSPADD	set	4040
   149  0000                     _SSPCON2	set	4037
   150  0000                     _SSPCON1	set	4038
   151  0000                     _SSPSTAT	set	4039
   152  0000                     _PIR1bits	set	3998
   153  0000                     _PIE1bits	set	3997
   154  0000                     _SSPCON1bits	set	4038
   155  0000                     _INTCONbits	set	4082
   156  0000                     _INTCON2bits	set	4081
   157  0000                     _WPUA	set	3959
   158  0000                     _WPUB	set	3960
   159  0000                     _ANSELH	set	3967
   160  0000                     _ANSEL	set	3966
   161  0000                     _TRISC	set	3988
   162  0000                     _TRISB	set	3987
   163  0000                     _TRISA	set	3986
   164  0000                     _LATC	set	3979
   165  0000                     _LATB	set	3978
   166  0000                     _LATA	set	3977
   167  0000                     _OSCTUNE	set	3995
   168  0000                     _OSCCON2	set	4050
   169  0000                     _OSCCON	set	4051
   170  0000                     _GIE	set	32663
   171  0000                     _PEIE	set	32662
   172  0000                     _BCLIE	set	32003
   173  0000                     _SSPIE	set	31979
   174  0000                     _BCLIF	set	32011
   175  0000                     _SSPIF	set	31987
   176                           
   177                           	psect	smallconst
   178  000200                     __psmallconst:
   179                           	opt callstack 0
   180  000200  00                 	db	0
   181  000201                     STR_6:
   182  000201  42                 	db	66	;'B'
   183  000202  3A                 	db	58	;':'
   184  000203  30                 	db	48	;'0'
   185  000204  78                 	db	120	;'x'
   186  000205  25                 	db	37
   187  000206  30                 	db	48	;'0'
   188  000207  34                 	db	52	;'4'
   189  000208  78                 	db	120	;'x'
   190  000209  00                 	db	0
   191  00020A                     STR_5:
   192  00020A  47                 	db	71	;'G'
   193  00020B  3A                 	db	58	;':'
   194  00020C  30                 	db	48	;'0'
   195  00020D  78                 	db	120	;'x'
   196  00020E  25                 	db	37
   197  00020F  30                 	db	48	;'0'
   198  000210  34                 	db	52	;'4'
   199  000211  78                 	db	120	;'x'
   200  000212  00                 	db	0
   201  000213                     STR_7:
   202  000213  49                 	db	73	;'I'
   203  000214  3A                 	db	58	;':'
   204  000215  30                 	db	48	;'0'
   205  000216  78                 	db	120	;'x'
   206  000217  25                 	db	37
   207  000218  30                 	db	48	;'0'
   208  000219  34                 	db	52	;'4'
   209  00021A  78                 	db	120	;'x'
   210  00021B  00                 	db	0
   211  00021C                     STR_4:
   212  00021C  52                 	db	82	;'R'
   213  00021D  3A                 	db	58	;':'
   214  00021E  30                 	db	48	;'0'
   215  00021F  78                 	db	120	;'x'
   216  000220  25                 	db	37
   217  000221  30                 	db	48	;'0'
   218  000222  34                 	db	52	;'4'
   219  000223  78                 	db	120	;'x'
   220  000224  00                 	db	0
   221  000225                     STR_1:
   222  000225  58                 	db	88	;'X'
   223  000226  3A                 	db	58	;':'
   224  000227  25                 	db	37
   225  000228  2B                 	db	43
   226  000229  30                 	db	48	;'0'
   227  00022A  34                 	db	52	;'4'
   228  00022B  64                 	db	100	;'d'
   229  00022C  00                 	db	0
   230  00022D                     STR_2:
   231  00022D  59                 	db	89	;'Y'
   232  00022E  3A                 	db	58	;':'
   233  00022F  25                 	db	37
   234  000230  2B                 	db	43
   235  000231  30                 	db	48	;'0'
   236  000232  34                 	db	52	;'4'
   237  000233  64                 	db	100	;'d'
   238  000234  00                 	db	0
   239  000235                     STR_3:
   240  000235  5A                 	db	90	;'Z'
   241  000236  3A                 	db	58	;':'
   242  000237  25                 	db	37
   243  000238  2B                 	db	43
   244  000239  30                 	db	48	;'0'
   245  00023A  34                 	db	52	;'4'
   246  00023B  64                 	db	100	;'d'
   247  00023C  00                 	db	0
   248  0000                     
   249                           ; #config settings
   250  00023D  00                 	db	0	; dummy byte at the end
   251  0000                     
   252                           	psect	cinit
   253  001566                     __pcinit:
   254                           	opt callstack 0
   255  001566                     start_initialization:
   256                           	opt callstack 0
   257  001566                     __initialization:
   258                           	opt callstack 0
   259                           
   260                           ; Initialize objects allocated to BANK1 (17 bytes)
   261                           ; load TBLPTR registers with __pidataBANK1
   262  001566  0E4A               	movlw	low __pidataBANK1
   263  001568  6EF6               	movwf	tblptrl,c
   264  00156A  0E1B               	movlw	high __pidataBANK1
   265  00156C  6EF7               	movwf	tblptrh,c
   266  00156E  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   267  001570  6EF8               	movwf	tblptru,c
   268  001572  EE01  F000         	lfsr	0,__pdataBANK1
   269  001576  EE10 F011          	lfsr	1,17
   270  00157A                     copy_data0:
   271  00157A  0009               	tblrd		*+
   272  00157C  CFF5 FFEE          	movff	tablat,postinc0
   273  001580  50E5               	movf	postdec1,w,c
   274  001582  50E1               	movf	fsr1l,w,c
   275  001584  E1FA               	bnz	copy_data0
   276                           
   277                           ; Initialize objects allocated to BANK0 (13 bytes)
   278                           ; load TBLPTR registers with __pidataBANK0
   279  001586  0E78               	movlw	low __pidataBANK0
   280  001588  6EF6               	movwf	tblptrl,c
   281  00158A  0E1B               	movlw	high __pidataBANK0
   282  00158C  6EF7               	movwf	tblptrh,c
   283  00158E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   284  001590  6EF8               	movwf	tblptru,c
   285  001592  EE00  F0E5         	lfsr	0,__pdataBANK0
   286  001596  EE10 F00D          	lfsr	1,13
   287  00159A                     copy_data1:
   288  00159A  0009               	tblrd		*+
   289  00159C  CFF5 FFEE          	movff	tablat,postinc0
   290  0015A0  50E5               	movf	postdec1,w,c
   291  0015A2  50E1               	movf	fsr1l,w,c
   292  0015A4  E1FA               	bnz	copy_data1
   293                           
   294                           ; Clear objects allocated to BANK0 (68 bytes)
   295  0015A6  EE00  F060         	lfsr	0,__pbssBANK0
   296  0015AA  0E44               	movlw	68
   297  0015AC                     clear_0:
   298  0015AC  6AEE               	clrf	postinc0,c
   299  0015AE  06E8               	decf	wreg,f,c
   300  0015B0  E1FD               	bnz	clear_0
   301                           
   302                           ; Clear objects allocated to COMRAM (4 bytes)
   303  0015B2  6A5A               	clrf	(__pbssCOMRAM+3)& (0+255),c
   304  0015B4  6A59               	clrf	(__pbssCOMRAM+2)& (0+255),c
   305  0015B6  6A58               	clrf	(__pbssCOMRAM+1)& (0+255),c
   306  0015B8  6A57               	clrf	__pbssCOMRAM& (0+255),c
   307  0015BA                     end_of_initialization:
   308                           	opt callstack 0
   309  0015BA                     __end_of__initialization:
   310                           	opt callstack 0
   311  0015BA  905B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   312  0015BC  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   313  0015BE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   314  0015C0  6EF8               	movwf	tblptru,c
   315  0015C2  0100               	movlb	0
   316  0015C4  EFF2  F002         	goto	_main	;jump to C main() function
   317                           
   318                           	psect	bssCOMRAM
   319  000057                     __pbssCOMRAM:
   320                           	opt callstack 0
   321  000057                     _flags:
   322                           	opt callstack 0
   323  000057                     	ds	2
   324  000059                     _CollisionCheck:
   325                           	opt callstack 0
   326  000059                     	ds	2
   327                           
   328                           	psect	bssBANK0
   329  000060                     __pbssBANK0:
   330                           	opt callstack 0
   331  000060                     _c:
   332                           	opt callstack 0
   333  000060                     	ds	8
   334  000068                     _b:
   335                           	opt callstack 0
   336  000068                     	ds	4
   337  00006C                     _a:
   338                           	opt callstack 0
   339  00006C                     	ds	4
   340  000070                     _nout:
   341                           	opt callstack 0
   342  000070                     	ds	2
   343  000072                     _width:
   344                           	opt callstack 0
   345  000072                     	ds	2
   346  000074                     _prec:
   347                           	opt callstack 0
   348  000074                     	ds	2
   349  000076                     _ContSet_DT:
   350                           	opt callstack 0
   351  000076                     	ds	2
   352  000078                     _FuncSet_DT:
   353                           	opt callstack 0
   354  000078                     	ds	2
   355  00007A                     _LCD_NowPage:
   356                           	opt callstack 0
   357  00007A                     	ds	2
   358  00007C                     _LCD_ColumnSu:
   359                           	opt callstack 0
   360  00007C                     	ds	2
   361  00007E                     _AckCheck:
   362                           	opt callstack 0
   363  00007E                     	ds	2
   364  000080                     _i2c_driver_i2cISR:
   365                           	opt callstack 0
   366  000080                     	ds	2
   367  000082                     _i2c_driver_busCollisionISR:
   368                           	opt callstack 0
   369  000082                     	ds	2
   370  000084                     _dbuf:
   371                           	opt callstack 0
   372  000084                     	ds	32
   373                           
   374                           	psect	dataBANK0
   375  0000E5                     __pdataBANK0:
   376                           	opt callstack 0
   377  0000E5                     _moji2:
   378                           	opt callstack 0
   379  0000E5                     	ds	9
   380  0000EE                     LCD_SetCursor@F2916:
   381                           	opt callstack 0
   382  0000EE                     	ds	4
   383                           
   384                           	psect	dataBANK1
   385  000100                     __pdataBANK1:
   386                           	opt callstack 0
   387  000100                     _moji:
   388                           	opt callstack 0
   389  000100                     	ds	17
   390                           
   391                           	psect	cstackBANK0
   392  0000A4                     __pcstackBANK0:
   393                           	opt callstack 0
   394  0000A4                     vfpfcnvrt@ll:
   395                           	opt callstack 0
   396                           
   397                           ; 8 bytes @ 0x0
   398  0000A4                     	ds	8
   399  0000AC                     vfpfcnvrt@llu:
   400                           	opt callstack 0
   401                           
   402                           ; 8 bytes @ 0x8
   403  0000AC                     	ds	8
   404  0000B4                     vfpfcnvrt@done:
   405                           	opt callstack 0
   406                           
   407                           ; 2 bytes @ 0x10
   408  0000B4                     	ds	2
   409  0000B6                     _vfpfcnvrt$1198:
   410                           	opt callstack 0
   411                           
   412                           ; 2 bytes @ 0x12
   413  0000B6                     	ds	2
   414  0000B8                     vfpfcnvrt@c:
   415                           	opt callstack 0
   416                           
   417                           ; 1 bytes @ 0x14
   418  0000B8                     	ds	1
   419  0000B9                     ?_sprintf:
   420                           	opt callstack 0
   421  0000B9                     sprintf@s:
   422                           	opt callstack 0
   423                           
   424                           ; 2 bytes @ 0x15
   425  0000B9                     	ds	2
   426  0000BB                     sprintf@fmt:
   427                           	opt callstack 0
   428                           
   429                           ; 2 bytes @ 0x17
   430  0000BB                     	ds	6
   431  0000C1                     sprintf@ap:
   432                           	opt callstack 0
   433                           
   434                           ; 2 bytes @ 0x1D
   435  0000C1                     	ds	2
   436  0000C3                     sprintf@f:
   437                           	opt callstack 0
   438                           
   439                           ; 6 bytes @ 0x1F
   440  0000C3                     	ds	6
   441  0000C9                     main@s:
   442                           	opt callstack 0
   443                           
   444                           ; 8 bytes @ 0x25
   445  0000C9                     	ds	8
   446  0000D1                     main@xcal:
   447                           	opt callstack 0
   448                           
   449                           ; 2 bytes @ 0x2D
   450  0000D1                     	ds	2
   451  0000D3                     main@ycal:
   452                           	opt callstack 0
   453                           
   454                           ; 2 bytes @ 0x2F
   455  0000D3                     	ds	2
   456  0000D5                     main@zcal:
   457                           	opt callstack 0
   458                           
   459                           ; 2 bytes @ 0x31
   460  0000D5                     	ds	2
   461  0000D7                     main@i:
   462                           	opt callstack 0
   463                           
   464                           ; 2 bytes @ 0x33
   465  0000D7                     	ds	2
   466  0000D9                     main@xl:
   467                           	opt callstack 0
   468                           
   469                           ; 2 bytes @ 0x35
   470  0000D9                     	ds	2
   471  0000DB                     main@yl:
   472                           	opt callstack 0
   473                           
   474                           ; 2 bytes @ 0x37
   475  0000DB                     	ds	2
   476  0000DD                     main@zl:
   477                           	opt callstack 0
   478                           
   479                           ; 2 bytes @ 0x39
   480  0000DD                     	ds	2
   481  0000DF                     main@Y:
   482                           	opt callstack 0
   483                           
   484                           ; 2 bytes @ 0x3B
   485  0000DF                     	ds	2
   486  0000E1                     main@Z:
   487                           	opt callstack 0
   488                           
   489                           ; 2 bytes @ 0x3D
   490  0000E1                     	ds	2
   491  0000E3                     main@X:
   492                           	opt callstack 0
   493                           
   494                           ; 2 bytes @ 0x3F
   495  0000E3                     	ds	2
   496                           
   497                           	psect	cstackCOMRAM
   498  000001                     __pcstackCOMRAM:
   499                           	opt callstack 0
   500  000001                     ??_I2C_IdleCheck:
   501  000001                     ?_strlen:
   502                           	opt callstack 0
   503  000001                     ?_isupper:
   504                           	opt callstack 0
   505  000001                     ?_isalpha:
   506                           	opt callstack 0
   507  000001                     ?_isdigit:
   508                           	opt callstack 0
   509  000001                     ?_isspace:
   510                           	opt callstack 0
   511  000001                     ?_islower:
   512                           	opt callstack 0
   513  000001                     ?___wmul:
   514                           	opt callstack 0
   515  000001                     ?___awdiv:
   516                           	opt callstack 0
   517  000001                     ?___aodiv:
   518                           	opt callstack 0
   519  000001                     ?___aomod:
   520                           	opt callstack 0
   521  000001                     Wait10ms@num:
   522                           	opt callstack 0
   523  000001                     InitI2C_Master@speed:
   524                           	opt callstack 0
   525  000001                     ___wmul@multiplier:
   526                           	opt callstack 0
   527  000001                     ___awdiv@dividend:
   528                           	opt callstack 0
   529  000001                     isalpha@c:
   530                           	opt callstack 0
   531  000001                     isdigit@c:
   532                           	opt callstack 0
   533  000001                     isspace@c:
   534                           	opt callstack 0
   535  000001                     isupper@c:
   536                           	opt callstack 0
   537  000001                     fputc@c:
   538                           	opt callstack 0
   539  000001                     strlen@s:
   540                           	opt callstack 0
   541  000001                     islower@c:
   542                           	opt callstack 0
   543  000001                     ___aodiv@dividend:
   544                           	opt callstack 0
   545  000001                     ___aomod@dividend:
   546                           	opt callstack 0
   547                           
   548                           ; 8 bytes @ 0x0
   549  000001                     	ds	1
   550  000002                     I2C_IdleCheck@mask:
   551                           	opt callstack 0
   552                           
   553                           ; 1 bytes @ 0x1
   554  000002                     	ds	1
   555  000003                     ??_I2C_Send:
   556  000003                     ??_isupper:
   557  000003                     ??_isalpha:
   558  000003                     ??_isdigit:
   559  000003                     ??_isspace:
   560  000003                     ??_islower:
   561  000003                     ??_Wait10ms:
   562  000003                     ?_I2C_Start:
   563                           	opt callstack 0
   564  000003                     ?_I2C_rStart:
   565                           	opt callstack 0
   566  000003                     ?_I2C_Receive:
   567                           	opt callstack 0
   568  000003                     I2C_Start@adrs:
   569                           	opt callstack 0
   570  000003                     I2C_rStart@adrs:
   571                           	opt callstack 0
   572  000003                     I2C_Receive@ack:
   573                           	opt callstack 0
   574  000003                     ___wmul@multiplicand:
   575                           	opt callstack 0
   576  000003                     ___awdiv@divisor:
   577                           	opt callstack 0
   578  000003                     fputc@fp:
   579                           	opt callstack 0
   580  000003                     strlen@a:
   581                           	opt callstack 0
   582                           
   583                           ; 2 bytes @ 0x2
   584  000003                     	ds	1
   585  000004                     I2C_Send@dt:
   586                           	opt callstack 0
   587                           
   588                           ; 1 bytes @ 0x3
   589  000004                     	ds	1
   590  000005                     ??_fputc:
   591  000005                     ___awdiv@counter:
   592                           	opt callstack 0
   593  000005                     I2C_Start@rw:
   594                           	opt callstack 0
   595  000005                     I2C_rStart@rw:
   596                           	opt callstack 0
   597  000005                     I2C_Receive@dt:
   598                           	opt callstack 0
   599  000005                     ___wmul@product:
   600                           	opt callstack 0
   601                           
   602                           ; 2 bytes @ 0x4
   603  000005                     	ds	1
   604  000006                     ___awdiv@sign:
   605                           	opt callstack 0
   606                           
   607                           ; 1 bytes @ 0x5
   608  000006                     	ds	1
   609  000007                     ??_I2C_Start:
   610  000007                     ??_I2C_rStart:
   611  000007                     ?_toupper:
   612                           	opt callstack 0
   613  000007                     _isspace$1683:
   614                           	opt callstack 0
   615  000007                     ___awdiv@quotient:
   616                           	opt callstack 0
   617  000007                     toupper@c:
   618                           	opt callstack 0
   619                           
   620                           ; 2 bytes @ 0x6
   621  000007                     	ds	1
   622  000008                     ?_atoi:
   623                           	opt callstack 0
   624  000008                     ?_register_read:
   625                           	opt callstack 0
   626  000008                     register_write@val:
   627                           	opt callstack 0
   628  000008                     LCD_Command@ans:
   629                           	opt callstack 0
   630  000008                     LCD_Puts@s:
   631                           	opt callstack 0
   632  000008                     acceler_Read@X:
   633                           	opt callstack 0
   634  000008                     atoi@s:
   635                           	opt callstack 0
   636                           
   637                           ; 2 bytes @ 0x7
   638  000008                     	ds	1
   639  000009                     ??_toupper:
   640  000009                     register_write@address:
   641                           	opt callstack 0
   642  000009                     ___aodiv@divisor:
   643                           	opt callstack 0
   644  000009                     ___aomod@divisor:
   645                           	opt callstack 0
   646                           
   647                           ; 8 bytes @ 0x8
   648  000009                     	ds	1
   649  00000A                     ??_LCD_Puts:
   650  00000A                     ??_atoi:
   651  00000A                     LCD_Command@c:
   652                           	opt callstack 0
   653  00000A                     register_read@address:
   654                           	opt callstack 0
   655  00000A                     register_write@ans:
   656                           	opt callstack 0
   657  00000A                     acceler_Read@Y:
   658                           	opt callstack 0
   659  00000A                     fputs@s:
   660                           	opt callstack 0
   661                           
   662                           ; 2 bytes @ 0x9
   663  00000A                     	ds	1
   664  00000B                     ??_LCD_Clear:
   665  00000B                     LCD_SetCursor@col:
   666                           	opt callstack 0
   667  00000B                     LCD_Puts@ans:
   668                           	opt callstack 0
   669  00000B                     LCD_Init_ST7032i@icon:
   670                           	opt callstack 0
   671  00000B                     register_read@ans:
   672                           	opt callstack 0
   673                           
   674                           ; 2 bytes @ 0xA
   675  00000B                     	ds	1
   676  00000C                     acceler_Read@Z:
   677                           	opt callstack 0
   678  00000C                     fputs@fp:
   679                           	opt callstack 0
   680                           
   681                           ; 2 bytes @ 0xB
   682  00000C                     	ds	1
   683  00000D                     ??_acceler_Init:
   684  00000D                     LCD_SetCursor@row:
   685                           	opt callstack 0
   686  00000D                     LCD_Init_ST7032i@contrast:
   687                           	opt callstack 0
   688  00000D                     _toupper$1759:
   689                           	opt callstack 0
   690                           
   691                           ; 2 bytes @ 0xC
   692  00000D                     	ds	1
   693  00000E                     fputs@c:
   694                           	opt callstack 0
   695  00000E                     acceler_Init@ans:
   696                           	opt callstack 0
   697  00000E                     acceler_Read@ack:
   698                           	opt callstack 0
   699  00000E                     atoi@neg:
   700                           	opt callstack 0
   701                           
   702                           ; 2 bytes @ 0xD
   703  00000E                     	ds	1
   704  00000F                     LCD_Init_ST7032i@bon:
   705                           	opt callstack 0
   706  00000F                     fputs@i:
   707                           	opt callstack 0
   708  00000F                     LCD_SetCursor@row_offsets:
   709                           	opt callstack 0
   710                           
   711                           ; 4 bytes @ 0xE
   712  00000F                     	ds	1
   713  000010                     acceler_Read@ans:
   714                           	opt callstack 0
   715  000010                     _atoi$1656:
   716                           	opt callstack 0
   717                           
   718                           ; 2 bytes @ 0xF
   719  000010                     	ds	1
   720  000011                     ?_pad:
   721                           	opt callstack 0
   722  000011                     ___aodiv@counter:
   723                           	opt callstack 0
   724  000011                     ___aomod@counter:
   725                           	opt callstack 0
   726  000011                     LCD_Init_ST7032i@colsu:
   727                           	opt callstack 0
   728  000011                     pad@fp:
   729                           	opt callstack 0
   730                           
   731                           ; 2 bytes @ 0x10
   732  000011                     	ds	1
   733  000012                     ___aodiv@sign:
   734                           	opt callstack 0
   735  000012                     ___aomod@sign:
   736                           	opt callstack 0
   737  000012                     acceler_Read@i:
   738                           	opt callstack 0
   739  000012                     _atoi$1658:
   740                           	opt callstack 0
   741                           
   742                           ; 2 bytes @ 0x11
   743  000012                     	ds	1
   744  000013                     ??_LCD_Init_ST7032i:
   745  000013                     ?_abs:
   746                           	opt callstack 0
   747  000013                     pad@buf:
   748                           	opt callstack 0
   749  000013                     abs@a:
   750                           	opt callstack 0
   751  000013                     ___aodiv@quotient:
   752                           	opt callstack 0
   753                           
   754                           ; 8 bytes @ 0x12
   755  000013                     	ds	1
   756  000014                     _atoi$1657:
   757                           	opt callstack 0
   758  000014                     acceler_Read@data:
   759                           	opt callstack 0
   760                           
   761                           ; 6 bytes @ 0x13
   762  000014                     	ds	1
   763  000015                     ??_abs:
   764  000015                     pad@p:
   765                           	opt callstack 0
   766  000015                     atoi@n:
   767                           	opt callstack 0
   768                           
   769                           ; 2 bytes @ 0x14
   770  000015                     	ds	1
   771  000016                     LCD_Init_ST7032i@d:
   772                           	opt callstack 0
   773                           
   774                           ; 2 bytes @ 0x15
   775  000016                     	ds	1
   776  000017                     ??_pad:
   777                           
   778                           ; 1 bytes @ 0x16
   779  000017                     	ds	1
   780  000018                     pad@i:
   781                           	opt callstack 0
   782                           
   783                           ; 2 bytes @ 0x17
   784  000018                     	ds	2
   785  00001A                     pad@w:
   786                           	opt callstack 0
   787                           
   788                           ; 2 bytes @ 0x19
   789  00001A                     	ds	2
   790  00001C                     ?_dtoa:
   791                           	opt callstack 0
   792  00001C                     ?_xtoa:
   793                           	opt callstack 0
   794  00001C                     dtoa@fp:
   795                           	opt callstack 0
   796  00001C                     xtoa@fp:
   797                           	opt callstack 0
   798                           
   799                           ; 2 bytes @ 0x1B
   800  00001C                     	ds	2
   801  00001E                     dtoa@d:
   802                           	opt callstack 0
   803  00001E                     xtoa@d:
   804                           	opt callstack 0
   805                           
   806                           ; 8 bytes @ 0x1D
   807  00001E                     	ds	8
   808  000026                     ??_dtoa:
   809  000026                     xtoa@x:
   810                           	opt callstack 0
   811                           
   812                           ; 1 bytes @ 0x25
   813  000026                     	ds	1
   814  000027                     ??_xtoa:
   815                           
   816                           ; 1 bytes @ 0x26
   817  000027                     	ds	7
   818  00002E                     _dtoa$1172:
   819                           	opt callstack 0
   820                           
   821                           ; 2 bytes @ 0x2D
   822  00002E                     	ds	1
   823  00002F                     _xtoa$1183:
   824                           	opt callstack 0
   825                           
   826                           ; 2 bytes @ 0x2E
   827  00002F                     	ds	1
   828  000030                     dtoa@p:
   829                           	opt callstack 0
   830                           
   831                           ; 2 bytes @ 0x2F
   832  000030                     	ds	1
   833  000031                     _xtoa$1184:
   834                           	opt callstack 0
   835                           
   836                           ; 2 bytes @ 0x30
   837  000031                     	ds	1
   838  000032                     dtoa@w:
   839                           	opt callstack 0
   840                           
   841                           ; 2 bytes @ 0x31
   842  000032                     	ds	1
   843  000033                     xtoa@p:
   844                           	opt callstack 0
   845                           
   846                           ; 2 bytes @ 0x32
   847  000033                     	ds	1
   848  000034                     dtoa@s:
   849                           	opt callstack 0
   850                           
   851                           ; 2 bytes @ 0x33
   852  000034                     	ds	1
   853  000035                     xtoa@w:
   854                           	opt callstack 0
   855                           
   856                           ; 2 bytes @ 0x34
   857  000035                     	ds	1
   858  000036                     dtoa@n:
   859                           	opt callstack 0
   860                           
   861                           ; 8 bytes @ 0x35
   862  000036                     	ds	1
   863  000037                     xtoa@n:
   864                           	opt callstack 0
   865                           
   866                           ; 8 bytes @ 0x36
   867  000037                     	ds	7
   868  00003E                     dtoa@i:
   869                           	opt callstack 0
   870                           
   871                           ; 2 bytes @ 0x3D
   872  00003E                     	ds	1
   873  00003F                     xtoa@i:
   874                           	opt callstack 0
   875                           
   876                           ; 2 bytes @ 0x3E
   877  00003F                     	ds	2
   878  000041                     xtoa@c:
   879                           	opt callstack 0
   880                           
   881                           ; 2 bytes @ 0x40
   882  000041                     	ds	2
   883  000043                     ?_vfpfcnvrt:
   884                           	opt callstack 0
   885  000043                     vfpfcnvrt@fp:
   886                           	opt callstack 0
   887                           
   888                           ; 2 bytes @ 0x42
   889  000043                     	ds	2
   890  000045                     vfpfcnvrt@fmt:
   891                           	opt callstack 0
   892                           
   893                           ; 2 bytes @ 0x44
   894  000045                     	ds	2
   895  000047                     vfpfcnvrt@ap:
   896                           	opt callstack 0
   897                           
   898                           ; 2 bytes @ 0x46
   899  000047                     	ds	2
   900  000049                     ??_vfpfcnvrt:
   901                           
   902                           ; 1 bytes @ 0x48
   903  000049                     	ds	4
   904  00004D                     ?_vfprintf:
   905                           	opt callstack 0
   906  00004D                     vfprintf@fp:
   907                           	opt callstack 0
   908                           
   909                           ; 2 bytes @ 0x4C
   910  00004D                     	ds	2
   911  00004F                     vfprintf@fmt:
   912                           	opt callstack 0
   913                           
   914                           ; 2 bytes @ 0x4E
   915  00004F                     	ds	2
   916  000051                     vfprintf@ap:
   917                           	opt callstack 0
   918                           
   919                           ; 2 bytes @ 0x50
   920  000051                     	ds	2
   921  000053                     vfprintf@cfmt:
   922                           	opt callstack 0
   923                           
   924                           ; 2 bytes @ 0x52
   925  000053                     	ds	2
   926  000055                     ??_main:
   927                           
   928                           ; 1 bytes @ 0x54
   929  000055                     	ds	2
   930                           
   931 ;;
   932 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   933 ;;
   934 ;; *************** function _main *****************
   935 ;; Defined at:
   936 ;;		line 67 in file "main.c"
   937 ;; Parameters:    Size  Location     Type
   938 ;;		None
   939 ;; Auto vars:     Size  Location     Type
   940 ;;  buf            16    0        unsigned char [16]
   941 ;;  s               8   37[BANK0 ] unsigned char [8]
   942 ;;  X               2   63[BANK0 ] short 
   943 ;;  Z               2   61[BANK0 ] short 
   944 ;;  Y               2   59[BANK0 ] short 
   945 ;;  zl              2   57[BANK0 ] short 
   946 ;;  yl              2   55[BANK0 ] short 
   947 ;;  xl              2   53[BANK0 ] short 
   948 ;;  i               2   51[BANK0 ] short 
   949 ;;  zcal            2   49[BANK0 ] short 
   950 ;;  ycal            2   47[BANK0 ] short 
   951 ;;  xcal            2   45[BANK0 ] short 
   952 ;; Return value:  Size  Location     Type
   953 ;;                  1    wreg      void 
   954 ;; Registers used:
   955 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   956 ;; Tracked objects:
   957 ;;		On entry : 0/0
   958 ;;		On exit  : 0/0
   959 ;;		Unchanged: 0/0
   960 ;; Data sizes:     COMRAM   BANK0   BANK1
   961 ;;      Params:         0       0       0
   962 ;;      Locals:         0      28       0
   963 ;;      Temps:          2       0       0
   964 ;;      Totals:         2      28       0
   965 ;;Total ram usage:       30 bytes
   966 ;; Hardware stack levels required when called:    9
   967 ;; This function calls:
   968 ;;		_InitI2C_Master
   969 ;;		_LCD_Clear
   970 ;;		_LCD_Init_ST7032i
   971 ;;		_LCD_Puts
   972 ;;		_LCD_SetCursor
   973 ;;		_SYSTEM_Initialize
   974 ;;		___awdiv
   975 ;;		_abs
   976 ;;		_acceler_Init
   977 ;;		_acceler_Read
   978 ;;		_sprintf
   979 ;; This function is called by:
   980 ;;		Startup code after reset
   981 ;; This function uses a non-reentrant model
   982 ;;
   983                           
   984                           	psect	text0
   985  0005E4                     __ptext0:
   986                           	opt callstack 0
   987  0005E4                     _main:
   988                           	opt callstack 22
   989                           
   990                           ;main.c: 70:     SYSTEM_Initialize();
   991                           
   992                           ;incstack = 0
   993  0005E4  ECAE  F00D         	call	_SYSTEM_Initialize	;wreg free
   994                           
   995                           ;main.c: 77:     (INTCONbits.GIE = 1);
   996  0005E8  8EF2               	bsf	4082,7,c	;volatile
   997                           
   998                           ;main.c: 83:     (INTCONbits.PEIE = 1);
   999  0005EA  8CF2               	bsf	4082,6,c	;volatile
  1000                           
  1001                           ;main.c: 89:     InitI2C_Master(0);
  1002  0005EC  0E00               	movlw	0
  1003  0005EE  6E02               	movwf	InitI2C_Master@speed+1,c
  1004  0005F0  0E00               	movlw	0
  1005  0005F2  6E01               	movwf	InitI2C_Master@speed,c
  1006  0005F4  EC5A  F00D         	call	_InitI2C_Master	;wreg free
  1007                           
  1008                           ;main.c: 90:     LCD_Init_ST7032i(0,50,1,16);
  1009  0005F8  0E00               	movlw	0
  1010  0005FA  6E0C               	movwf	LCD_Init_ST7032i@icon+1,c
  1011  0005FC  0E00               	movlw	0
  1012  0005FE  6E0B               	movwf	LCD_Init_ST7032i@icon,c
  1013  000600  0E00               	movlw	0
  1014  000602  6E0E               	movwf	LCD_Init_ST7032i@contrast+1,c
  1015  000604  0E32               	movlw	50
  1016  000606  6E0D               	movwf	LCD_Init_ST7032i@contrast,c
  1017  000608  0E00               	movlw	0
  1018  00060A  6E10               	movwf	LCD_Init_ST7032i@bon+1,c
  1019  00060C  0E01               	movlw	1
  1020  00060E  6E0F               	movwf	LCD_Init_ST7032i@bon,c
  1021  000610  0E00               	movlw	0
  1022  000612  6E12               	movwf	LCD_Init_ST7032i@colsu+1,c
  1023  000614  0E10               	movlw	16
  1024  000616  6E11               	movwf	LCD_Init_ST7032i@colsu,c
  1025  000618  EC5B  F008         	call	_LCD_Init_ST7032i	;wreg free
  1026                           
  1027                           ;main.c: 91:     acceler_Init() ;
  1028  00061C  ECE4  F00A         	call	_acceler_Init	;wreg free
  1029                           
  1030                           ;main.c: 93:     LCD_Clear() ;
  1031  000620  EC9E  F00C         	call	_LCD_Clear	;wreg free
  1032                           
  1033                           ;main.c: 94:     _delay((unsigned long)((100)*(16000000/4000.0)));
  1034  000624  0E03               	movlw	3
  1035  000626  6E56               	movwf	(??_main+1)& (0+255),c
  1036  000628  0E08               	movlw	8
  1037  00062A  6E55               	movwf	??_main& (0+255),c
  1038  00062C  0E77               	movlw	119
  1039  00062E                     u3057:
  1040  00062E  2EE8               	decfsz	wreg,f,c
  1041  000630  D7FE               	bra	u3057
  1042  000632  2E55               	decfsz	??_main& (0+255),f,c
  1043  000634  D7FC               	bra	u3057
  1044  000636  2E56               	decfsz	(??_main+1)& (0+255),f,c
  1045  000638  D7FA               	bra	u3057
  1046  00063A  F000               	nop	
  1047                           
  1048                           ;main.c: 95:     LCD_SetCursor(0,0);
  1049  00063C  0E00               	movlw	0
  1050  00063E  6E0C               	movwf	LCD_SetCursor@col+1,c
  1051  000640  0E00               	movlw	0
  1052  000642  6E0B               	movwf	LCD_SetCursor@col,c
  1053  000644  0E00               	movlw	0
  1054  000646  6E0E               	movwf	LCD_SetCursor@row+1,c
  1055  000648  0E00               	movlw	0
  1056  00064A  6E0D               	movwf	LCD_SetCursor@row,c
  1057  00064C  EC19  F00D         	call	_LCD_SetCursor	;wreg free
  1058                           
  1059                           ;main.c: 96:     _delay((unsigned long)((100)*(16000000/4000.0)));
  1060  000650  0E03               	movlw	3
  1061  000652  6E56               	movwf	(??_main+1)& (0+255),c
  1062  000654  0E08               	movlw	8
  1063  000656  6E55               	movwf	??_main& (0+255),c
  1064  000658  0E77               	movlw	119
  1065  00065A                     u3067:
  1066  00065A  2EE8               	decfsz	wreg,f,c
  1067  00065C  D7FE               	bra	u3067
  1068  00065E  2E55               	decfsz	??_main& (0+255),f,c
  1069  000660  D7FC               	bra	u3067
  1070  000662  2E56               	decfsz	(??_main+1)& (0+255),f,c
  1071  000664  D7FA               	bra	u3067
  1072  000666  F000               	nop	
  1073                           
  1074                           ;main.c: 97:     LCD_Puts(moji);
  1075  000668  0E00               	movlw	low _moji
  1076  00066A  6E08               	movwf	LCD_Puts@s,c
  1077  00066C  0E01               	movlw	high _moji
  1078  00066E  6E09               	movwf	LCD_Puts@s+1,c
  1079  000670  EC15  F00B         	call	_LCD_Puts	;wreg free
  1080                           
  1081                           ;main.c: 98:     _delay((unsigned long)((1000)*(16000000/4000.0)));
  1082  000674  0E15               	movlw	21
  1083  000676  6E56               	movwf	(??_main+1)& (0+255),c
  1084  000678  0E4B               	movlw	75
  1085  00067A  6E55               	movwf	??_main& (0+255),c
  1086  00067C  0EBE               	movlw	190
  1087  00067E                     u3077:
  1088  00067E  2EE8               	decfsz	wreg,f,c
  1089  000680  D7FE               	bra	u3077
  1090  000682  2E55               	decfsz	??_main& (0+255),f,c
  1091  000684  D7FC               	bra	u3077
  1092  000686  2E56               	decfsz	(??_main+1)& (0+255),f,c
  1093  000688  D7FA               	bra	u3077
  1094  00068A  D000               	nop2	
  1095                           
  1096                           ;main.c: 99:     char buf[16];;main.c: 101:      int16_t X , Y , Z , i ;;main.c: 102:   
      +                             int16_t xcal, ycal, zcal ;;main.c: 103:      int16_t xl, yl, zl ;;main.c: 104:      c
      +                          har s[8] ;;main.c: 107:     xl = yl = zl = 0 ;
  1097  00068C  0E00               	movlw	0
  1098  00068E  0100               	movlb	0	; () banked
  1099  000690  6FDE               	movwf	(main@zl+1)& (0+255),b
  1100  000692  0E00               	movlw	0
  1101  000694  6FDD               	movwf	main@zl& (0+255),b
  1102  000696  C0DD  F0DB         	movff	main@zl,main@yl
  1103  00069A  C0DE  F0DC         	movff	main@zl+1,main@yl+1
  1104  00069E  C0DB  F0D9         	movff	main@yl,main@xl
  1105  0006A2  C0DC  F0DA         	movff	main@yl+1,main@xl+1
  1106                           
  1107                           ; BSR set to: 0
  1108                           ;main.c: 108:     for (i=0 ; i<100 ; i++) {
  1109  0006A6  0E00               	movlw	0
  1110  0006A8  6FD8               	movwf	(main@i+1)& (0+255),b
  1111  0006AA  0E00               	movlw	0
  1112  0006AC  6FD7               	movwf	main@i& (0+255),b
  1113  0006AE                     l3767:
  1114                           
  1115                           ; BSR set to: 0
  1116                           ;main.c: 110:         acceler_Read(&X,&Y,&Z) ;
  1117  0006AE  0EE3               	movlw	low main@X
  1118  0006B0  6E08               	movwf	acceler_Read@X,c
  1119  0006B2  0E00               	movlw	high main@X
  1120  0006B4  6E09               	movwf	acceler_Read@X+1,c
  1121  0006B6  0EDF               	movlw	low main@Y
  1122  0006B8  6E0A               	movwf	acceler_Read@Y,c
  1123  0006BA  0E00               	movlw	high main@Y
  1124  0006BC  6E0B               	movwf	acceler_Read@Y+1,c
  1125  0006BE  0EE1               	movlw	low main@Z
  1126  0006C0  6E0C               	movwf	acceler_Read@Z,c
  1127  0006C2  0E00               	movlw	high main@Z
  1128  0006C4  6E0D               	movwf	acceler_Read@Z+1,c
  1129  0006C6  ECCE  F008         	call	_acceler_Read	;wreg free
  1130                           
  1131                           ;main.c: 111:         xl = xl + X ;
  1132  0006CA  0100               	movlb	0	; () banked
  1133  0006CC  51E3               	movf	main@X& (0+255),w,b
  1134  0006CE  25D9               	addwf	main@xl& (0+255),w,b
  1135  0006D0  6FD9               	movwf	main@xl& (0+255),b
  1136  0006D2  51E4               	movf	(main@X+1)& (0+255),w,b
  1137  0006D4  21DA               	addwfc	(main@xl+1)& (0+255),w,b
  1138  0006D6  6FDA               	movwf	(main@xl+1)& (0+255),b
  1139                           
  1140                           ; BSR set to: 0
  1141                           ;main.c: 112:         yl = yl + Y ;
  1142  0006D8  51DF               	movf	main@Y& (0+255),w,b
  1143  0006DA  25DB               	addwf	main@yl& (0+255),w,b
  1144  0006DC  6FDB               	movwf	main@yl& (0+255),b
  1145  0006DE  51E0               	movf	(main@Y+1)& (0+255),w,b
  1146  0006E0  21DC               	addwfc	(main@yl+1)& (0+255),w,b
  1147  0006E2  6FDC               	movwf	(main@yl+1)& (0+255),b
  1148                           
  1149                           ; BSR set to: 0
  1150                           ;main.c: 113:         zl = zl + Z ;
  1151  0006E4  51E1               	movf	main@Z& (0+255),w,b
  1152  0006E6  25DD               	addwf	main@zl& (0+255),w,b
  1153  0006E8  6FDD               	movwf	main@zl& (0+255),b
  1154  0006EA  51E2               	movf	(main@Z+1)& (0+255),w,b
  1155  0006EC  21DE               	addwfc	(main@zl+1)& (0+255),w,b
  1156  0006EE  6FDE               	movwf	(main@zl+1)& (0+255),b
  1157                           
  1158                           ; BSR set to: 0
  1159                           ;main.c: 114:     }
  1160  0006F0  4BD7               	infsnz	main@i& (0+255),f,b
  1161  0006F2  2BD8               	incf	(main@i+1)& (0+255),f,b
  1162                           
  1163                           ; BSR set to: 0
  1164  0006F4  BFD8               	btfsc	(main@i+1)& (0+255),7,b
  1165  0006F6  D7DB               	goto	l3767
  1166  0006F8  51D8               	movf	(main@i+1)& (0+255),w,b
  1167  0006FA  E104               	bnz	u2850
  1168  0006FC  0E64               	movlw	100
  1169  0006FE  5DD7               	subwf	main@i& (0+255),w,b
  1170  000700  A0D8               	btfss	status,0,c
  1171  000702  D7D5               	goto	l3767
  1172  000704                     u2850:
  1173                           
  1174                           ; BSR set to: 0
  1175                           ;main.c: 115:     xcal = xl / 100 ;
  1176  000704  C0D9  F001         	movff	main@xl,___awdiv@dividend
  1177  000708  C0DA  F002         	movff	main@xl+1,___awdiv@dividend+1
  1178  00070C  0E00               	movlw	0
  1179  00070E  6E04               	movwf	___awdiv@divisor+1,c
  1180  000710  0E64               	movlw	100
  1181  000712  6E03               	movwf	___awdiv@divisor,c
  1182  000714  ECCC  F009         	call	___awdiv	;wreg free
  1183  000718  C001  F0D1         	movff	?___awdiv,main@xcal
  1184  00071C  C002  F0D2         	movff	?___awdiv+1,main@xcal+1
  1185                           
  1186                           ;main.c: 116:     ycal = yl / 100 ;
  1187  000720  C0DB  F001         	movff	main@yl,___awdiv@dividend
  1188  000724  C0DC  F002         	movff	main@yl+1,___awdiv@dividend+1
  1189  000728  0E00               	movlw	0
  1190  00072A  6E04               	movwf	___awdiv@divisor+1,c
  1191  00072C  0E64               	movlw	100
  1192  00072E  6E03               	movwf	___awdiv@divisor,c
  1193  000730  ECCC  F009         	call	___awdiv	;wreg free
  1194  000734  C001  F0D3         	movff	?___awdiv,main@ycal
  1195  000738  C002  F0D4         	movff	?___awdiv+1,main@ycal+1
  1196                           
  1197                           ;main.c: 117:     zcal = zl / 100 ;
  1198  00073C  C0DD  F001         	movff	main@zl,___awdiv@dividend
  1199  000740  C0DE  F002         	movff	main@zl+1,___awdiv@dividend+1
  1200  000744  0E00               	movlw	0
  1201  000746  6E04               	movwf	___awdiv@divisor+1,c
  1202  000748  0E64               	movlw	100
  1203  00074A  6E03               	movwf	___awdiv@divisor,c
  1204  00074C  ECCC  F009         	call	___awdiv	;wreg free
  1205  000750  C001  F0D5         	movff	?___awdiv,main@zcal
  1206  000754  C002  F0D6         	movff	?___awdiv+1,main@zcal+1
  1207                           
  1208                           ;main.c: 118:     LCD_Clear( ) ;
  1209  000758  EC9E  F00C         	call	_LCD_Clear	;wreg free
  1210  00075C                     l3783:
  1211  00075C  0E00               	movlw	0
  1212  00075E  0100               	movlb	0	; () banked
  1213  000760  6FDE               	movwf	(main@zl+1)& (0+255),b
  1214  000762  0E00               	movlw	0
  1215  000764  6FDD               	movwf	main@zl& (0+255),b
  1216  000766  C0DD  F0DB         	movff	main@zl,main@yl
  1217  00076A  C0DE  F0DC         	movff	main@zl+1,main@yl+1
  1218                           
  1219                           ; BSR set to: 0
  1220                           ;main.c: 125:           acceler_Read(&X,&Y,&Z) ;
  1221  00076E  0EE3               	movlw	low main@X
  1222  000770  6E08               	movwf	acceler_Read@X,c
  1223  000772  0E00               	movlw	high main@X
  1224  000774  6E09               	movwf	acceler_Read@X+1,c
  1225  000776  0EDF               	movlw	low main@Y
  1226  000778  6E0A               	movwf	acceler_Read@Y,c
  1227  00077A  0E00               	movlw	high main@Y
  1228  00077C  6E0B               	movwf	acceler_Read@Y+1,c
  1229  00077E  0EE1               	movlw	low main@Z
  1230  000780  6E0C               	movwf	acceler_Read@Z,c
  1231  000782  0E00               	movlw	high main@Z
  1232  000784  6E0D               	movwf	acceler_Read@Z+1,c
  1233  000786  ECCE  F008         	call	_acceler_Read	;wreg free
  1234                           
  1235                           ;main.c: 126:           X = X-xcal ;
  1236  00078A  0100               	movlb	0	; () banked
  1237  00078C  51D1               	movf	main@xcal& (0+255),w,b
  1238  00078E  5DE3               	subwf	main@X& (0+255),w,b
  1239  000790  6FE3               	movwf	main@X& (0+255),b
  1240  000792  51D2               	movf	(main@xcal+1)& (0+255),w,b
  1241  000794  59E4               	subwfb	(main@X+1)& (0+255),w,b
  1242  000796  6FE4               	movwf	(main@X+1)& (0+255),b
  1243                           
  1244                           ; BSR set to: 0
  1245                           ;main.c: 127:           Y = Y-ycal ;
  1246  000798  51D3               	movf	main@ycal& (0+255),w,b
  1247  00079A  5DDF               	subwf	main@Y& (0+255),w,b
  1248  00079C  6FDF               	movwf	main@Y& (0+255),b
  1249  00079E  51D4               	movf	(main@ycal+1)& (0+255),w,b
  1250  0007A0  59E0               	subwfb	(main@Y+1)& (0+255),w,b
  1251  0007A2  6FE0               	movwf	(main@Y+1)& (0+255),b
  1252                           
  1253                           ; BSR set to: 0
  1254                           ;main.c: 128:           Z = Z-zcal ;
  1255  0007A4  51D5               	movf	main@zcal& (0+255),w,b
  1256  0007A6  5DE1               	subwf	main@Z& (0+255),w,b
  1257  0007A8  6FE1               	movwf	main@Z& (0+255),b
  1258  0007AA  51D6               	movf	(main@zcal+1)& (0+255),w,b
  1259  0007AC  59E2               	subwfb	(main@Z+1)& (0+255),w,b
  1260  0007AE  6FE2               	movwf	(main@Z+1)& (0+255),b
  1261                           
  1262                           ; BSR set to: 0
  1263                           ;main.c: 129:           if(abs(X)>=5){
  1264  0007B0  C0E3  F013         	movff	main@X,abs@a
  1265  0007B4  C0E4  F014         	movff	main@X+1,abs@a+1
  1266  0007B8  ECB8  F00C         	call	_abs	;wreg free
  1267  0007BC  BE14               	btfsc	?_abs+1,7,c
  1268  0007BE  D008               	goto	l273
  1269  0007C0  5014               	movf	?_abs+1,w,c
  1270  0007C2  E104               	bnz	u2860
  1271  0007C4  0E05               	movlw	5
  1272  0007C6  5C13               	subwf	?_abs,w,c
  1273  0007C8  A0D8               	btfss	status,0,c
  1274  0007CA  D002               	goto	l273
  1275  0007CC                     u2860:
  1276                           
  1277                           ;main.c: 130:               LATBbits.LATB7 =1;
  1278  0007CC  8E8A               	bsf	3978,7,c	;volatile
  1279                           
  1280                           ;main.c: 131:           }
  1281  0007CE  D001               	goto	l3797
  1282  0007D0                     l273:
  1283                           
  1284                           ;main.c: 133:               LATBbits.LATB7 =0;
  1285  0007D0  9E8A               	bcf	3978,7,c	;volatile
  1286  0007D2                     l3797:
  1287                           
  1288                           ;main.c: 136:           LCD_SetCursor(0,0) ;
  1289  0007D2  0E00               	movlw	0
  1290  0007D4  6E0C               	movwf	LCD_SetCursor@col+1,c
  1291  0007D6  0E00               	movlw	0
  1292  0007D8  6E0B               	movwf	LCD_SetCursor@col,c
  1293  0007DA  0E00               	movlw	0
  1294  0007DC  6E0E               	movwf	LCD_SetCursor@row+1,c
  1295  0007DE  0E00               	movlw	0
  1296  0007E0  6E0D               	movwf	LCD_SetCursor@row,c
  1297  0007E2  EC19  F00D         	call	_LCD_SetCursor	;wreg free
  1298                           
  1299                           ;main.c: 137:           sprintf(s,"X:%+04d",X) ;
  1300  0007E6  0EC9               	movlw	low main@s
  1301  0007E8  0100               	movlb	0	; () banked
  1302  0007EA  6FB9               	movwf	sprintf@s& (0+255),b
  1303  0007EC  0E00               	movlw	high main@s
  1304  0007EE  6FBA               	movwf	(sprintf@s+1)& (0+255),b
  1305  0007F0  0E25               	movlw	low STR_1
  1306  0007F2  6FBB               	movwf	sprintf@fmt& (0+255),b
  1307  0007F4  0E02               	movlw	high STR_1
  1308  0007F6  6FBC               	movwf	(sprintf@fmt+1)& (0+255),b
  1309  0007F8  C0E3  F0BD         	movff	main@X,?_sprintf+4
  1310  0007FC  C0E4  F0BE         	movff	main@X+1,?_sprintf+5
  1311  000800  EC9A  F00B         	call	_sprintf	;wreg free
  1312                           
  1313                           ;main.c: 138:           LCD_Puts(s) ;
  1314  000804  0EC9               	movlw	low main@s
  1315  000806  6E08               	movwf	LCD_Puts@s,c
  1316  000808  0E00               	movlw	high main@s
  1317  00080A  6E09               	movwf	LCD_Puts@s+1,c
  1318  00080C  EC15  F00B         	call	_LCD_Puts	;wreg free
  1319                           
  1320                           ;main.c: 139:           sprintf(s,"Y:%+04d",Y) ;
  1321  000810  0EC9               	movlw	low main@s
  1322  000812  0100               	movlb	0	; () banked
  1323  000814  6FB9               	movwf	sprintf@s& (0+255),b
  1324  000816  0E00               	movlw	high main@s
  1325  000818  6FBA               	movwf	(sprintf@s+1)& (0+255),b
  1326  00081A  0E2D               	movlw	low STR_2
  1327  00081C  6FBB               	movwf	sprintf@fmt& (0+255),b
  1328  00081E  0E02               	movlw	high STR_2
  1329  000820  6FBC               	movwf	(sprintf@fmt+1)& (0+255),b
  1330  000822  C0DF  F0BD         	movff	main@Y,?_sprintf+4
  1331  000826  C0E0  F0BE         	movff	main@Y+1,?_sprintf+5
  1332  00082A  EC9A  F00B         	call	_sprintf	;wreg free
  1333                           
  1334                           ;main.c: 140:           LCD_SetCursor(8,0) ;
  1335  00082E  0E00               	movlw	0
  1336  000830  6E0C               	movwf	LCD_SetCursor@col+1,c
  1337  000832  0E08               	movlw	8
  1338  000834  6E0B               	movwf	LCD_SetCursor@col,c
  1339  000836  0E00               	movlw	0
  1340  000838  6E0E               	movwf	LCD_SetCursor@row+1,c
  1341  00083A  0E00               	movlw	0
  1342  00083C  6E0D               	movwf	LCD_SetCursor@row,c
  1343  00083E  EC19  F00D         	call	_LCD_SetCursor	;wreg free
  1344                           
  1345                           ;main.c: 141:           LCD_Puts(s) ;
  1346  000842  0EC9               	movlw	low main@s
  1347  000844  6E08               	movwf	LCD_Puts@s,c
  1348  000846  0E00               	movlw	high main@s
  1349  000848  6E09               	movwf	LCD_Puts@s+1,c
  1350  00084A  EC15  F00B         	call	_LCD_Puts	;wreg free
  1351                           
  1352                           ;main.c: 142:           sprintf(s,"Z:%+04d",Z) ;
  1353  00084E  0EC9               	movlw	low main@s
  1354  000850  0100               	movlb	0	; () banked
  1355  000852  6FB9               	movwf	sprintf@s& (0+255),b
  1356  000854  0E00               	movlw	high main@s
  1357  000856  6FBA               	movwf	(sprintf@s+1)& (0+255),b
  1358  000858  0E35               	movlw	low STR_3
  1359  00085A  6FBB               	movwf	sprintf@fmt& (0+255),b
  1360  00085C  0E02               	movlw	high STR_3
  1361  00085E  6FBC               	movwf	(sprintf@fmt+1)& (0+255),b
  1362  000860  C0E1  F0BD         	movff	main@Z,?_sprintf+4
  1363  000864  C0E2  F0BE         	movff	main@Z+1,?_sprintf+5
  1364  000868  EC9A  F00B         	call	_sprintf	;wreg free
  1365                           
  1366                           ;main.c: 143:           LCD_SetCursor(0,1) ;
  1367  00086C  0E00               	movlw	0
  1368  00086E  6E0C               	movwf	LCD_SetCursor@col+1,c
  1369  000870  0E00               	movlw	0
  1370  000872  6E0B               	movwf	LCD_SetCursor@col,c
  1371  000874  0E00               	movlw	0
  1372  000876  6E0E               	movwf	LCD_SetCursor@row+1,c
  1373  000878  0E01               	movlw	1
  1374  00087A  6E0D               	movwf	LCD_SetCursor@row,c
  1375  00087C  EC19  F00D         	call	_LCD_SetCursor	;wreg free
  1376                           
  1377                           ;main.c: 144:           LCD_Puts(s) ;
  1378  000880  0EC9               	movlw	low main@s
  1379  000882  6E08               	movwf	LCD_Puts@s,c
  1380  000884  0E00               	movlw	high main@s
  1381  000886  6E09               	movwf	LCD_Puts@s+1,c
  1382  000888  EC15  F00B         	call	_LCD_Puts	;wreg free
  1383                           
  1384                           ;main.c: 146:           _delay((unsigned long)((10)*(16000000/4000.0))) ;
  1385  00088C  0E34               	movlw	52
  1386  00088E  6E55               	movwf	??_main& (0+255),c
  1387  000890  0EF2               	movlw	242
  1388  000892                     u3087:
  1389  000892  2EE8               	decfsz	wreg,f,c
  1390  000894  D7FE               	bra	u3087
  1391  000896  2E55               	decfsz	??_main& (0+255),f,c
  1392  000898  D7FC               	bra	u3087
  1393  00089A  D760               	goto	l3783
  1394  00089C                     __end_of_main:
  1395                           	opt callstack 0
  1396                           
  1397 ;; *************** function _sprintf *****************
  1398 ;; Defined at:
  1399 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_sprintf.c"
  1400 ;; Parameters:    Size  Location     Type
  1401 ;;  s               2   21[BANK0 ] PTR unsigned char 
  1402 ;;		 -> Color@buf(16), Color_Read@buf(16), main@s(8), 
  1403 ;;  fmt             2   23[BANK0 ] PTR const unsigned char 
  1404 ;;		 -> STR_11(9), STR_10(9), STR_9(9), STR_8(9), 
  1405 ;;		 -> STR_7(9), STR_6(9), STR_5(9), STR_4(9), 
  1406 ;;		 -> STR_3(8), STR_2(8), STR_1(8), 
  1407 ;; Auto vars:     Size  Location     Type
  1408 ;;  f               6   31[BANK0 ] struct _IO_FILE
  1409 ;;  ap              2   29[BANK0 ] PTR void [1]
  1410 ;;		 -> ?_sprintf(2), 
  1411 ;;  ret             2    0        int 
  1412 ;; Return value:  Size  Location     Type
  1413 ;;                  2   21[BANK0 ] int 
  1414 ;; Registers used:
  1415 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1416 ;; Tracked objects:
  1417 ;;		On entry : 0/0
  1418 ;;		On exit  : 0/0
  1419 ;;		Unchanged: 0/0
  1420 ;; Data sizes:     COMRAM   BANK0   BANK1
  1421 ;;      Params:         0       6       0
  1422 ;;      Locals:         0      10       0
  1423 ;;      Temps:          0       0       0
  1424 ;;      Totals:         0      16       0
  1425 ;;Total ram usage:       16 bytes
  1426 ;; Hardware stack levels used:    1
  1427 ;; Hardware stack levels required when called:    8
  1428 ;; This function calls:
  1429 ;;		_vfprintf
  1430 ;; This function is called by:
  1431 ;;		_main
  1432 ;;		_Color_Read
  1433 ;;		_Color
  1434 ;; This function uses a non-reentrant model
  1435 ;;
  1436                           
  1437                           	psect	text1
  1438  001734                     __ptext1:
  1439                           	opt callstack 0
  1440  001734                     _sprintf:
  1441                           	opt callstack 22
  1442                           
  1443                           ;incstack = 0
  1444  001734  0EBD               	movlw	low (?_sprintf+4)
  1445  001736  0100               	movlb	0	; () banked
  1446  001738  6FC1               	movwf	sprintf@ap& (0+255),b
  1447  00173A  0E00               	movlw	high (?_sprintf+4)
  1448  00173C  6FC2               	movwf	(sprintf@ap+1)& (0+255),b
  1449  00173E  C0B9  F0C3         	movff	sprintf@s,sprintf@f
  1450  001742  C0BA  F0C4         	movff	sprintf@s+1,sprintf@f+1
  1451                           
  1452                           ; BSR set to: 0
  1453  001746  0E00               	movlw	0
  1454  001748  6FC6               	movwf	(sprintf@f+3)& (0+255),b
  1455  00174A  0E00               	movlw	0
  1456  00174C  6FC5               	movwf	(sprintf@f+2)& (0+255),b
  1457                           
  1458                           ; BSR set to: 0
  1459  00174E  0E00               	movlw	0
  1460  001750  6FC8               	movwf	(sprintf@f+5)& (0+255),b
  1461  001752  0E00               	movlw	0
  1462  001754  6FC7               	movwf	(sprintf@f+4)& (0+255),b
  1463                           
  1464                           ; BSR set to: 0
  1465  001756  0EC3               	movlw	low sprintf@f
  1466  001758  6E4D               	movwf	vfprintf@fp,c
  1467  00175A  0E00               	movlw	high sprintf@f
  1468  00175C  6E4E               	movwf	vfprintf@fp+1,c
  1469  00175E  C0BB  F04F         	movff	sprintf@fmt,vfprintf@fmt
  1470  001762  C0BC  F050         	movff	sprintf@fmt+1,vfprintf@fmt+1
  1471  001766  0EC1               	movlw	low sprintf@ap
  1472  001768  6E51               	movwf	vfprintf@ap,c
  1473  00176A  0E00               	movlw	high sprintf@ap
  1474  00176C  6E52               	movwf	vfprintf@ap+1,c
  1475  00176E  EC45  F00B         	call	_vfprintf	;wreg free
  1476  001772  0100               	movlb	0	; () banked
  1477  001774  51C5               	movf	(sprintf@f+2)& (0+255),w,b
  1478  001776  25B9               	addwf	sprintf@s& (0+255),w,b
  1479  001778  6ED9               	movwf	fsr2l,c
  1480  00177A  51C6               	movf	(sprintf@f+3)& (0+255),w,b
  1481  00177C  21BA               	addwfc	(sprintf@s+1)& (0+255),w,b
  1482  00177E  6EDA               	movwf	fsr2h,c
  1483  001780  0E00               	movlw	0
  1484  001782  6EDF               	movwf	indf2,c
  1485                           
  1486                           ; BSR set to: 0
  1487  001784  0012               	return		;funcret
  1488  001786                     __end_of_sprintf:
  1489                           	opt callstack 0
  1490                           
  1491 ;; *************** function _vfprintf *****************
  1492 ;; Defined at:
  1493 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1494 ;; Parameters:    Size  Location     Type
  1495 ;;  fp              2   76[COMRAM] PTR struct _IO_FILE
  1496 ;;		 -> sprintf@f(6), 
  1497 ;;  fmt             2   78[COMRAM] PTR const unsigned char 
  1498 ;;		 -> STR_11(9), STR_10(9), STR_9(9), STR_8(9), 
  1499 ;;		 -> STR_7(9), STR_6(9), STR_5(9), STR_4(9), 
  1500 ;;		 -> STR_3(8), STR_2(8), STR_1(8), 
  1501 ;;  ap              2   80[COMRAM] PTR PTR void 
  1502 ;;		 -> sprintf@ap(2), 
  1503 ;; Auto vars:     Size  Location     Type
  1504 ;;  cfmt            2   82[COMRAM] PTR unsigned char 
  1505 ;;		 -> STR_11(9), STR_10(9), STR_9(9), STR_8(9), 
  1506 ;;		 -> STR_7(9), STR_6(9), STR_5(9), STR_4(9), 
  1507 ;;		 -> STR_3(8), STR_2(8), STR_1(8), 
  1508 ;; Return value:  Size  Location     Type
  1509 ;;                  2   76[COMRAM] int 
  1510 ;; Registers used:
  1511 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1512 ;; Tracked objects:
  1513 ;;		On entry : 0/0
  1514 ;;		On exit  : 0/0
  1515 ;;		Unchanged: 0/0
  1516 ;; Data sizes:     COMRAM   BANK0   BANK1
  1517 ;;      Params:         6       0       0
  1518 ;;      Locals:         2       0       0
  1519 ;;      Temps:          0       0       0
  1520 ;;      Totals:         8       0       0
  1521 ;;Total ram usage:        8 bytes
  1522 ;; Hardware stack levels used:    1
  1523 ;; Hardware stack levels required when called:    7
  1524 ;; This function calls:
  1525 ;;		_vfpfcnvrt
  1526 ;; This function is called by:
  1527 ;;		_sprintf
  1528 ;; This function uses a non-reentrant model
  1529 ;;
  1530                           
  1531                           	psect	text2
  1532  00168A                     __ptext2:
  1533                           	opt callstack 0
  1534  00168A                     _vfprintf:
  1535                           	opt callstack 22
  1536                           
  1537                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
  1538                           
  1539                           ; BSR set to: 0
  1540                           ;incstack = 0
  1541  00168A  C04F  F053         	movff	vfprintf@fmt,vfprintf@cfmt
  1542  00168E  C050  F054         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  1543                           
  1544                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
  1545  001692  0E00               	movlw	0
  1546  001694  0100               	movlb	0	; () banked
  1547  001696  6F71               	movwf	(_nout+1)& (0+255),b
  1548  001698  0E00               	movlw	0
  1549  00169A  6F70               	movwf	_nout& (0+255),b
  1550                           
  1551                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  1552  00169C  D013               	goto	l3511
  1553  00169E                     l3509:
  1554                           
  1555                           ; BSR set to: 0
  1556                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
  1557  00169E  C04D  F043         	movff	vfprintf@fp,vfpfcnvrt@fp
  1558  0016A2  C04E  F044         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  1559  0016A6  0E53               	movlw	low vfprintf@cfmt
  1560  0016A8  6E45               	movwf	vfpfcnvrt@fmt,c
  1561  0016AA  0E00               	movlw	high vfprintf@cfmt
  1562  0016AC  6E46               	movwf	vfpfcnvrt@fmt+1,c
  1563  0016AE  C051  F047         	movff	vfprintf@ap,vfpfcnvrt@ap
  1564  0016B2  C052  F048         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  1565  0016B6  EC1F  F001         	call	_vfpfcnvrt	;wreg free
  1566  0016BA  5043               	movf	?_vfpfcnvrt,w,c
  1567  0016BC  0100               	movlb	0	; () banked
  1568  0016BE  2770               	addwf	_nout& (0+255),f,b
  1569  0016C0  5044               	movf	?_vfpfcnvrt+1,w,c
  1570  0016C2  2371               	addwfc	(_nout+1)& (0+255),f,b
  1571  0016C4                     l3511:
  1572                           
  1573                           ; BSR set to: 0
  1574                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  1575  0016C4  C053  FFF6         	movff	vfprintf@cfmt,tblptrl
  1576  0016C8  C054  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  1577  0016CC                     	if	0	;tblptru may be non-zero
  1578  0016CC                     	endif
  1579  0016CC                     	if	0	;tblptru may be non-zero
  1580  0016CC                     	endif
  1581  0016CC  0008               	tblrd		*
  1582  0016CE  50F5               	movf	tablat,w,c
  1583  0016D0  0900               	iorlw	0
  1584  0016D2  A4D8               	btfss	status,2,c
  1585  0016D4  D7E4               	goto	l3509
  1586                           
  1587                           ; BSR set to: 0
  1588                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
  1589  0016D6  C070  F04D         	movff	_nout,?_vfprintf
  1590  0016DA  C071  F04E         	movff	_nout+1,?_vfprintf+1
  1591                           
  1592                           ; BSR set to: 0
  1593  0016DE  0012               	return		;funcret
  1594  0016E0                     __end_of_vfprintf:
  1595                           	opt callstack 0
  1596                           
  1597 ;; *************** function _vfpfcnvrt *****************
  1598 ;; Defined at:
  1599 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1600 ;; Parameters:    Size  Location     Type
  1601 ;;  fp              2   66[COMRAM] PTR struct _IO_FILE
  1602 ;;		 -> sprintf@f(6), 
  1603 ;;  fmt             2   68[COMRAM] PTR PTR unsigned char 
  1604 ;;		 -> vfprintf@cfmt(2), 
  1605 ;;  ap              2   70[COMRAM] PTR PTR void 
  1606 ;;		 -> sprintf@ap(2), 
  1607 ;; Auto vars:     Size  Location     Type
  1608 ;;  llu             8    8[BANK0 ] unsigned long long 
  1609 ;;  ll              8    0[BANK0 ] long long 
  1610 ;;  f               4    0        long long 
  1611 ;;  vp              3    0        PTR void 
  1612 ;;  ct              3    0        unsigned char [3]
  1613 ;;  cp              3    0        PTR unsigned char 
  1614 ;;  done            2   16[BANK0 ] int 
  1615 ;;  i               2    0        int 
  1616 ;;  c               1   20[BANK0 ] unsigned char 
  1617 ;; Return value:  Size  Location     Type
  1618 ;;                  2   66[COMRAM] int 
  1619 ;; Registers used:
  1620 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1621 ;; Tracked objects:
  1622 ;;		On entry : 0/0
  1623 ;;		On exit  : 0/0
  1624 ;;		Unchanged: 0/0
  1625 ;; Data sizes:     COMRAM   BANK0   BANK1
  1626 ;;      Params:         6       0       0
  1627 ;;      Locals:         0      21       0
  1628 ;;      Temps:          4       0       0
  1629 ;;      Totals:        10      21       0
  1630 ;;Total ram usage:       31 bytes
  1631 ;; Hardware stack levels used:    1
  1632 ;; Hardware stack levels required when called:    6
  1633 ;; This function calls:
  1634 ;;		_atoi
  1635 ;;		_dtoa
  1636 ;;		_fputc
  1637 ;;		_isdigit
  1638 ;;		_xtoa
  1639 ;; This function is called by:
  1640 ;;		_vfprintf
  1641 ;; This function uses a non-reentrant model
  1642 ;;
  1643                           
  1644                           	psect	text3
  1645  00023E                     __ptext3:
  1646                           	opt callstack 0
  1647  00023E                     _vfpfcnvrt:
  1648                           	opt callstack 22
  1649                           
  1650                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
  1651                           
  1652                           ; BSR set to: 0
  1653                           ;incstack = 0
  1654  00023E  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1655  000242  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1656  000246  CFDE FFF6          	movff	postinc2,tblptrl
  1657  00024A  CFDD FFF7          	movff	postdec2,tblptrh
  1658  00024E                     	if	0	;tblptru may be non-zero
  1659  00024E                     	endif
  1660  00024E                     	if	0	;tblptru may be non-zero
  1661  00024E                     	endif
  1662  00024E  0008               	tblrd		*
  1663  000250  50F5               	movf	tablat,w,c
  1664  000252  0A25               	xorlw	37
  1665  000254  A4D8               	btfss	status,2,c
  1666  000256  D1AC               	goto	l3439
  1667                           
  1668                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
  1669  000258  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1670  00025C  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1671  000260  2ADE               	incf	postinc2,f,c
  1672  000262  0E00               	movlw	0
  1673  000264  22DD               	addwfc	postdec2,f,c
  1674                           
  1675                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
  1676  000266  0E00               	movlw	0
  1677  000268  0100               	movlb	0	; () banked
  1678  00026A  6F73               	movwf	(_width+1)& (0+255),b
  1679  00026C  0E00               	movlw	0
  1680  00026E  6F72               	movwf	_width& (0+255),b
  1681  000270  C072  F057         	movff	_width,_flags
  1682  000274  C073  F058         	movff	_width+1,_flags+1
  1683                           
  1684                           ; BSR set to: 0
  1685                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
  1686  000278  6974               	setf	_prec& (0+255),b
  1687  00027A  6975               	setf	(_prec+1)& (0+255),b
  1688                           
  1689                           ; BSR set to: 0
  1690                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 688:       
      +                            done = 0;
  1691  00027C  0E00               	movlw	0
  1692  00027E  6FB5               	movwf	(vfpfcnvrt@done+1)& (0+255),b
  1693  000280  0E00               	movlw	0
  1694  000282  D014               	goto	L1
  1695  000284                     l3351:
  1696                           
  1697                           ; BSR set to: 0
  1698                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 692:       
      +                                        flags |= (1 << 0);
  1699  000284  8057               	bsf	_flags,0,c
  1700  000286                     l3353:
  1701                           
  1702                           ; BSR set to: 0
  1703                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 693:       
      +                                        ++*fmt;
  1704  000286  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1705  00028A  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1706  00028E  2ADE               	incf	postinc2,f,c
  1707  000290  0E00               	movlw	0
  1708  000292  22DD               	addwfc	postdec2,f,c
  1709                           
  1710                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 694:       
      +                                        break;
  1711  000294  D02E               	goto	l3377
  1712  000296                     l3355:
  1713                           
  1714                           ; BSR set to: 0
  1715                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 696:       
      +                                        flags |= (1 << 1);
  1716  000296  8257               	bsf	_flags,1,c
  1717  000298  D7F6               	goto	l3353
  1718  00029A                     l3359:
  1719                           
  1720                           ; BSR set to: 0
  1721                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 700:       
      +                                        flags |= (1 << 2);
  1722  00029A  8457               	bsf	_flags,2,c
  1723  00029C  D7F4               	goto	l3353
  1724  00029E                     l3363:
  1725                           
  1726                           ; BSR set to: 0
  1727                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 704:       
      +                                        flags |= (1 << 3);
  1728  00029E  8657               	bsf	_flags,3,c
  1729  0002A0  D7F2               	goto	l3353
  1730  0002A2                     l3367:
  1731                           
  1732                           ; BSR set to: 0
  1733                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 708:       
      +                                        flags |= (1 << 4);
  1734  0002A2  8857               	bsf	_flags,4,c
  1735  0002A4  D7F0               	goto	l3353
  1736  0002A6                     l3371:
  1737                           
  1738                           ; BSR set to: 0
  1739                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 712:       
      +                                        done = 1;
  1740  0002A6  0E00               	movlw	0
  1741  0002A8  6FB5               	movwf	(vfpfcnvrt@done+1)& (0+255),b
  1742  0002AA  0E01               	movlw	1
  1743  0002AC                     L1:
  1744  0002AC  6FB4               	movwf	vfpfcnvrt@done& (0+255),b
  1745                           
  1746                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 713:       
      +                                        break;
  1747  0002AE  D021               	goto	l3377
  1748  0002B0                     l3375:
  1749                           
  1750                           ; BSR set to: 0
  1751  0002B0  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1752  0002B4  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1753  0002B8  CFDE FFF6          	movff	postinc2,tblptrl
  1754  0002BC  CFDD FFF7          	movff	postdec2,tblptrh
  1755  0002C0                     	if	0	;tblptru may be non-zero
  1756  0002C0                     	endif
  1757  0002C0                     	if	0	;tblptru may be non-zero
  1758  0002C0                     	endif
  1759  0002C0  0008               	tblrd		*
  1760  0002C2  50F5               	movf	tablat,w,c
  1761  0002C4  6E49               	movwf	??_vfpfcnvrt& (0+255),c
  1762  0002C6  6A4A               	clrf	(??_vfpfcnvrt+1)& (0+255),c
  1763                           
  1764                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1765                           ; Switch size 1, requested type "simple"
  1766                           ; Number of cases is 1, Range of values is 0 to 0
  1767                           ; switch strategies available:
  1768                           ; Name         Instructions Cycles
  1769                           ; simple_byte            4     3 (average)
  1770                           ;	Chosen strategy is simple_byte
  1771  0002C8  504A               	movf	??_vfpfcnvrt+1,w,c
  1772  0002CA  0A00               	xorlw	0	; case 0
  1773  0002CC  A4D8               	btfss	status,2,c
  1774  0002CE  D7EB               	goto	l3371
  1775                           
  1776                           ; BSR set to: 0
  1777                           ; Switch size 1, requested type "simple"
  1778                           ; Number of cases is 5, Range of values is 32 to 48
  1779                           ; switch strategies available:
  1780                           ; Name         Instructions Cycles
  1781                           ; simple_byte           16     9 (average)
  1782                           ;	Chosen strategy is simple_byte
  1783  0002D0  5049               	movf	??_vfpfcnvrt,w,c
  1784  0002D2  0A20               	xorlw	32	; case 32
  1785  0002D4  B4D8               	btfsc	status,2,c
  1786  0002D6  D7E3               	goto	l3363
  1787  0002D8  0A03               	xorlw	3	; case 35
  1788  0002DA  B4D8               	btfsc	status,2,c
  1789  0002DC  D7E2               	goto	l3367
  1790  0002DE  0A08               	xorlw	8	; case 43
  1791  0002E0  B4D8               	btfsc	status,2,c
  1792  0002E2  D7DB               	goto	l3359
  1793  0002E4  0A06               	xorlw	6	; case 45
  1794  0002E6  B4D8               	btfsc	status,2,c
  1795  0002E8  D7CD               	goto	l3351
  1796  0002EA  0A1D               	xorlw	29	; case 48
  1797  0002EC  B4D8               	btfsc	status,2,c
  1798  0002EE  D7D3               	goto	l3355
  1799  0002F0  D7DA               	goto	l3371
  1800  0002F2                     l3377:
  1801                           
  1802                           ; BSR set to: 0
  1803                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 689:       
      +                            while (!done) {
  1804  0002F2  51B4               	movf	vfpfcnvrt@done& (0+255),w,b
  1805  0002F4  11B5               	iorwf	(vfpfcnvrt@done+1)& (0+255),w,b
  1806  0002F6  B4D8               	btfsc	status,2,c
  1807  0002F8  D7DB               	goto	l3375
  1808                           
  1809                           ; BSR set to: 0
  1810                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 716:       
      +                            if (flags & (1 << 0)) {
  1811  0002FA  B057               	btfsc	_flags,0,c
  1812                           
  1813                           ; BSR set to: 0
  1814                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 717:       
      +                                flags &= ~(1 << 1);
  1815  0002FC  9257               	bcf	_flags,1,c
  1816                           
  1817                           ; BSR set to: 0
  1818                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 723:       
      +                            if ((*fmt)[0] == '*') {
  1819  0002FE  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1820  000302  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1821  000306  CFDE FFF6          	movff	postinc2,tblptrl
  1822  00030A  CFDD FFF7          	movff	postdec2,tblptrh
  1823  00030E                     	if	0	;tblptru may be non-zero
  1824  00030E                     	endif
  1825  00030E                     	if	0	;tblptru may be non-zero
  1826  00030E                     	endif
  1827  00030E  0008               	tblrd		*
  1828  000310  50F5               	movf	tablat,w,c
  1829  000312  0A2A               	xorlw	42
  1830  000314  A4D8               	btfss	status,2,c
  1831  000316  D023               	goto	l3389
  1832                           
  1833                           ; BSR set to: 0
  1834                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 724:       
      +                                ++*fmt;
  1835  000318  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1836  00031C  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1837  000320  2ADE               	incf	postinc2,f,c
  1838  000322  0E00               	movlw	0
  1839  000324  22DD               	addwfc	postdec2,f,c
  1840                           
  1841                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 725:       
      +                                width = (*(int *)__va_arg(*(int **)ap, (int)0));
  1842  000326  C047  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1843  00032A  C048  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1844  00032E  CFDF F049          	movff	indf2,??_vfpfcnvrt
  1845  000332  0E02               	movlw	2
  1846  000334  26DE               	addwf	postinc2,f,c
  1847  000336  CFDF F04A          	movff	indf2,??_vfpfcnvrt+1
  1848  00033A  0E00               	movlw	0
  1849  00033C  22DD               	addwfc	postdec2,f,c
  1850  00033E  C049  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1851  000342  C04A  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1852  000346  CFDE F072          	movff	postinc2,_width
  1853  00034A  CFDD F073          	movff	postdec2,_width+1
  1854                           
  1855                           ; BSR set to: 0
  1856                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 726:       
      +                                if (width < 0) {
  1857  00034E  AF73               	btfss	(_width+1)& (0+255),7,b
  1858  000350  D040               	goto	u2530
  1859                           
  1860                           ; BSR set to: 0
  1861                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 727:       
      +                                    flags |= (1 << 0);
  1862  000352  8057               	bsf	_flags,0,c
  1863                           
  1864                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 728:       
      +                                    width = -width;
  1865  000354  6D72               	negf	_width& (0+255),b
  1866  000356  1F73               	comf	(_width+1)& (0+255),f,b
  1867  000358  B0D8               	btfsc	status,0,c
  1868  00035A  2B73               	incf	(_width+1)& (0+255),f,b
  1869  00035C  D03A               	goto	u2530
  1870  00035E                     l3389:
  1871                           
  1872                           ; BSR set to: 0
  1873                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 731:       
      +                                width = atoi(*fmt);
  1874  00035E  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1875  000362  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1876  000366  CFDE F008          	movff	postinc2,atoi@s
  1877  00036A  CFDD F009          	movff	postdec2,atoi@s+1
  1878  00036E  EC29  F007         	call	_atoi	;wreg free
  1879  000372  C008  F072         	movff	?_atoi,_width
  1880  000376  C009  F073         	movff	?_atoi+1,_width+1
  1881                           
  1882                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 732:       
      +                                while ((0 ? isdigit((*fmt)[0]) : ((unsigned)((*fmt)[0])-'0') < 10)) {
  1883  00037A  D007               	goto	l3393
  1884  00037C                     l3391:
  1885                           
  1886                           ; BSR set to: 0
  1887                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 733:       
      +                                    ++*fmt;
  1888  00037C  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1889  000380  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1890  000384  2ADE               	incf	postinc2,f,c
  1891  000386  0E00               	movlw	0
  1892  000388  22DD               	addwfc	postdec2,f,c
  1893  00038A                     l3393:
  1894  00038A  0ED0               	movlw	208
  1895  00038C  6E49               	movwf	??_vfpfcnvrt& (0+255),c
  1896  00038E  0EFF               	movlw	255
  1897  000390  6E4A               	movwf	(??_vfpfcnvrt+1)& (0+255),c
  1898  000392  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1899  000396  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1900  00039A  CFDE FFF6          	movff	postinc2,tblptrl
  1901  00039E  CFDD FFF7          	movff	postdec2,tblptrh
  1902  0003A2                     	if	0	;tblptru may be non-zero
  1903  0003A2                     	endif
  1904  0003A2                     	if	0	;tblptru may be non-zero
  1905  0003A2                     	endif
  1906  0003A2  0008               	tblrd		*
  1907  0003A4  50F5               	movf	tablat,w,c
  1908  0003A6  6E4B               	movwf	(??_vfpfcnvrt+2)& (0+255),c
  1909  0003A8  6A4C               	clrf	(??_vfpfcnvrt+3)& (0+255),c
  1910  0003AA  5049               	movf	??_vfpfcnvrt,w,c
  1911  0003AC  264B               	addwf	??_vfpfcnvrt+2,f,c
  1912  0003AE  504A               	movf	??_vfpfcnvrt+1,w,c
  1913  0003B0  224C               	addwfc	??_vfpfcnvrt+3,f,c
  1914  0003B2  504C               	movf	??_vfpfcnvrt+3,w,c
  1915  0003B4  E106               	bnz	u2510
  1916  0003B6  0E0A               	movlw	10
  1917  0003B8  5C4B               	subwf	??_vfpfcnvrt+2,w,c
  1918  0003BA  B0D8               	btfsc	status,0,c
  1919  0003BC  D002               	goto	u2510
  1920  0003BE  0E01               	movlw	1
  1921  0003C0  D001               	goto	u2520
  1922  0003C2                     u2510:
  1923  0003C2  0E00               	movlw	0
  1924  0003C4                     u2520:
  1925  0003C4  0100               	movlb	0	; () banked
  1926  0003C6  6FB6               	movwf	_vfpfcnvrt$1198& (0+255),b
  1927  0003C8  6BB7               	clrf	(_vfpfcnvrt$1198+1)& (0+255),b
  1928                           
  1929                           ; BSR set to: 0
  1930  0003CA  51B6               	movf	_vfpfcnvrt$1198& (0+255),w,b
  1931  0003CC  11B7               	iorwf	(_vfpfcnvrt$1198+1)& (0+255),w,b
  1932  0003CE  A4D8               	btfss	status,2,c
  1933  0003D0  D7D5               	goto	l3391
  1934  0003D2                     u2530:
  1935                           
  1936                           ; BSR set to: 0
  1937                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 825:       
      +                            if ((*fmt[0] == 'd') || (*fmt[0] == 'i')) {
  1938  0003D2  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1939  0003D6  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1940  0003DA  CFDE FFF6          	movff	postinc2,tblptrl
  1941  0003DE  CFDD FFF7          	movff	postdec2,tblptrh
  1942  0003E2                     	if	0	;tblptru may be non-zero
  1943  0003E2                     	endif
  1944  0003E2                     	if	0	;tblptru may be non-zero
  1945  0003E2                     	endif
  1946  0003E2  0008               	tblrd		*
  1947  0003E4  50F5               	movf	tablat,w,c
  1948  0003E6  0A64               	xorlw	100
  1949  0003E8  B4D8               	btfsc	status,2,c
  1950  0003EA  D00D               	goto	u2550
  1951                           
  1952                           ; BSR set to: 0
  1953  0003EC  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1954  0003F0  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1955  0003F4  CFDE FFF6          	movff	postinc2,tblptrl
  1956  0003F8  CFDD FFF7          	movff	postdec2,tblptrh
  1957  0003FC                     	if	0	;tblptru may be non-zero
  1958  0003FC                     	endif
  1959  0003FC                     	if	0	;tblptru may be non-zero
  1960  0003FC                     	endif
  1961  0003FC  0008               	tblrd		*
  1962  0003FE  50F5               	movf	tablat,w,c
  1963  000400  0A69               	xorlw	105
  1964  000402  A4D8               	btfss	status,2,c
  1965  000404  D03F               	goto	l3409
  1966  000406                     u2550:
  1967                           
  1968                           ; BSR set to: 0
  1969                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 827:       
      +                                ++*fmt;
  1970  000406  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1971  00040A  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1972  00040E  2ADE               	incf	postinc2,f,c
  1973  000410  0E00               	movlw	0
  1974  000412  22DD               	addwfc	postdec2,f,c
  1975                           
  1976                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 828:       
      +                                ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  1977  000414  C047  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1978  000418  C048  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1979  00041C  CFDF F049          	movff	indf2,??_vfpfcnvrt
  1980  000420  0E02               	movlw	2
  1981  000422  26DE               	addwf	postinc2,f,c
  1982  000424  CFDF F04A          	movff	indf2,??_vfpfcnvrt+1
  1983  000428  0E00               	movlw	0
  1984  00042A  22DD               	addwfc	postdec2,f,c
  1985  00042C  C049  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1986  000430  C04A  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1987  000434  CFDE F0A4          	movff	postinc2,vfpfcnvrt@ll
  1988  000438  CFDD F0A5          	movff	postdec2,vfpfcnvrt@ll+1
  1989  00043C  0E00               	movlw	0
  1990  00043E  BFA5               	btfsc	(vfpfcnvrt@ll+1)& (0+255),7,b
  1991  000440  0EFF               	movlw	-1
  1992  000442  6FA6               	movwf	(vfpfcnvrt@ll+2)& (0+255),b
  1993  000444  6FA7               	movwf	(vfpfcnvrt@ll+3)& (0+255),b
  1994  000446  6FA8               	movwf	(vfpfcnvrt@ll+4)& (0+255),b
  1995  000448  6FA9               	movwf	(vfpfcnvrt@ll+5)& (0+255),b
  1996  00044A  6FAA               	movwf	(vfpfcnvrt@ll+6)& (0+255),b
  1997  00044C  6FAB               	movwf	(vfpfcnvrt@ll+7)& (0+255),b
  1998                           
  1999                           ; BSR set to: 0
  2000                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 830:       
      +                                return dtoa(fp, ll);
  2001  00044E  C043  F01C         	movff	vfpfcnvrt@fp,dtoa@fp
  2002  000452  C044  F01D         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  2003  000456  C0A4  F01E         	movff	vfpfcnvrt@ll,dtoa@d
  2004  00045A  C0A5  F01F         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  2005  00045E  C0A6  F020         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  2006  000462  C0A7  F021         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  2007  000466  C0A8  F022         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  2008  00046A  C0A9  F023         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  2009  00046E  C0AA  F024         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  2010  000472  C0AB  F025         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  2011  000476  EC4E  F004         	call	_dtoa	;wreg free
  2012  00047A  C01C  F043         	movff	?_dtoa,?_vfpfcnvrt
  2013  00047E  C01D  F044         	movff	?_dtoa+1,?_vfpfcnvrt+1
  2014  000482  0012               	return	
  2015  000484                     l3409:
  2016                           
  2017                           ; BSR set to: 0
  2018                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1274:      
      +                             if ((*fmt[0] == 'x') || (*fmt[0] == 'X')) {
  2019  000484  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2020  000488  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2021  00048C  CFDE FFF6          	movff	postinc2,tblptrl
  2022  000490  CFDD FFF7          	movff	postdec2,tblptrh
  2023  000494                     	if	0	;tblptru may be non-zero
  2024  000494                     	endif
  2025  000494                     	if	0	;tblptru may be non-zero
  2026  000494                     	endif
  2027  000494  0008               	tblrd		*
  2028  000496  50F5               	movf	tablat,w,c
  2029  000498  0A78               	xorlw	120
  2030  00049A  B4D8               	btfsc	status,2,c
  2031  00049C  D00D               	goto	u2570
  2032                           
  2033                           ; BSR set to: 0
  2034  00049E  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2035  0004A2  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2036  0004A6  CFDE FFF6          	movff	postinc2,tblptrl
  2037  0004AA  CFDD FFF7          	movff	postdec2,tblptrh
  2038  0004AE                     	if	0	;tblptru may be non-zero
  2039  0004AE                     	endif
  2040  0004AE                     	if	0	;tblptru may be non-zero
  2041  0004AE                     	endif
  2042  0004AE  0008               	tblrd		*
  2043  0004B0  50F5               	movf	tablat,w,c
  2044  0004B2  0A58               	xorlw	88
  2045  0004B4  A4D8               	btfss	status,2,c
  2046  0004B6  D04D               	goto	l3423
  2047  0004B8                     u2570:
  2048                           
  2049                           ; BSR set to: 0
  2050                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1276:      
      +                                 c = (*fmt)[0];
  2051  0004B8  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2052  0004BC  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2053  0004C0  CFDE FFF6          	movff	postinc2,tblptrl
  2054  0004C4  CFDD FFF7          	movff	postdec2,tblptrh
  2055  0004C8                     	if	0	;tblptru may be non-zero
  2056  0004C8                     	endif
  2057  0004C8                     	if	0	;tblptru may be non-zero
  2058  0004C8                     	endif
  2059  0004C8  0008               	tblrd		*
  2060  0004CA  CFF5 F0B8          	movff	tablat,vfpfcnvrt@c
  2061                           
  2062                           ; BSR set to: 0
  2063                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1277:      
      +                                 ++*fmt;
  2064  0004CE  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2065  0004D2  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2066  0004D6  2ADE               	incf	postinc2,f,c
  2067  0004D8  0E00               	movlw	0
  2068  0004DA  22DD               	addwfc	postdec2,f,c
  2069                           
  2070                           ; BSR set to: 0
  2071                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1278:      
      +                                 llu = (unsigned long long)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsig
      +                          ned int)0));
  2072  0004DC  C047  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  2073  0004E0  C048  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  2074  0004E4  CFDF F049          	movff	indf2,??_vfpfcnvrt
  2075  0004E8  0E02               	movlw	2
  2076  0004EA  26DE               	addwf	postinc2,f,c
  2077  0004EC  CFDF F04A          	movff	indf2,??_vfpfcnvrt+1
  2078  0004F0  0E00               	movlw	0
  2079  0004F2  22DD               	addwfc	postdec2,f,c
  2080  0004F4  C049  FFD9         	movff	??_vfpfcnvrt,fsr2l
  2081  0004F8  C04A  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  2082  0004FC  CFDE F04B          	movff	postinc2,??_vfpfcnvrt+2
  2083  000500  CFDD F04C          	movff	postdec2,??_vfpfcnvrt+3
  2084  000504  C04B  F0AC         	movff	??_vfpfcnvrt+2,vfpfcnvrt@llu
  2085  000508  C04C  F0AD         	movff	??_vfpfcnvrt+3,vfpfcnvrt@llu+1
  2086  00050C  6BAE               	clrf	(vfpfcnvrt@llu+2)& (0+255),b
  2087  00050E  6BAF               	clrf	(vfpfcnvrt@llu+3)& (0+255),b
  2088  000510  6BB0               	clrf	(vfpfcnvrt@llu+4)& (0+255),b
  2089  000512  6BB1               	clrf	(vfpfcnvrt@llu+5)& (0+255),b
  2090  000514  6BB2               	clrf	(vfpfcnvrt@llu+6)& (0+255),b
  2091  000516  6BB3               	clrf	(vfpfcnvrt@llu+7)& (0+255),b
  2092                           
  2093                           ; BSR set to: 0
  2094                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1280:      
      +                                 return xtoa(fp, llu, c);
  2095  000518  C043  F01C         	movff	vfpfcnvrt@fp,xtoa@fp
  2096  00051C  C044  F01D         	movff	vfpfcnvrt@fp+1,xtoa@fp+1
  2097  000520  C0AC  F01E         	movff	vfpfcnvrt@llu,xtoa@d
  2098  000524  C0AD  F01F         	movff	vfpfcnvrt@llu+1,xtoa@d+1
  2099  000528  C0AE  F020         	movff	vfpfcnvrt@llu+2,xtoa@d+2
  2100  00052C  C0AF  F021         	movff	vfpfcnvrt@llu+3,xtoa@d+3
  2101  000530  C0B0  F022         	movff	vfpfcnvrt@llu+4,xtoa@d+4
  2102  000534  C0B1  F023         	movff	vfpfcnvrt@llu+5,xtoa@d+5
  2103  000538  C0B2  F024         	movff	vfpfcnvrt@llu+6,xtoa@d+6
  2104  00053C  C0B3  F025         	movff	vfpfcnvrt@llu+7,xtoa@d+7
  2105  000540  C0B8  F026         	movff	vfpfcnvrt@c,xtoa@x
  2106  000544  EC6F  F005         	call	_xtoa	;wreg free
  2107  000548  C01C  F043         	movff	?_xtoa,?_vfpfcnvrt
  2108  00054C  C01D  F044         	movff	?_xtoa+1,?_vfpfcnvrt+1
  2109  000550  0012               	return	
  2110  000552                     l3423:
  2111                           
  2112                           ; BSR set to: 0
  2113                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
  2114  000552  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2115  000556  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2116  00055A  CFDE FFF6          	movff	postinc2,tblptrl
  2117  00055E  CFDD FFF7          	movff	postdec2,tblptrh
  2118  000562                     	if	0	;tblptru may be non-zero
  2119  000562                     	endif
  2120  000562                     	if	0	;tblptru may be non-zero
  2121  000562                     	endif
  2122  000562  0008               	tblrd		*
  2123  000564  50F5               	movf	tablat,w,c
  2124  000566  0A25               	xorlw	37
  2125  000568  A4D8               	btfss	status,2,c
  2126  00056A  D016               	goto	l3433
  2127                           
  2128                           ; BSR set to: 0
  2129                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
  2130  00056C  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2131  000570  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2132  000574  2ADE               	incf	postinc2,f,c
  2133  000576  0E00               	movlw	0
  2134  000578  22DD               	addwfc	postdec2,f,c
  2135                           
  2136                           ; BSR set to: 0
  2137                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
  2138  00057A  0E00               	movlw	0
  2139  00057C  6E02               	movwf	fputc@c+1,c
  2140  00057E  0E25               	movlw	37
  2141  000580  6E01               	movwf	fputc@c,c
  2142  000582  C043  F003         	movff	vfpfcnvrt@fp,fputc@fp
  2143  000586  C044  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  2144  00058A  EC31  F009         	call	_fputc	;wreg free
  2145  00058E                     l3429:
  2146                           
  2147                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
  2148  00058E  0E00               	movlw	0
  2149  000590  6E44               	movwf	?_vfpfcnvrt+1,c
  2150  000592  0E01               	movlw	1
  2151  000594  6E43               	movwf	?_vfpfcnvrt,c
  2152  000596  0012               	return	
  2153  000598                     l3433:
  2154                           
  2155                           ; BSR set to: 0
  2156                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
  2157  000598  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2158  00059C  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2159  0005A0  2ADE               	incf	postinc2,f,c
  2160  0005A2  0E00               	movlw	0
  2161  0005A4  22DD               	addwfc	postdec2,f,c
  2162                           
  2163                           ; BSR set to: 0
  2164                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
  2165  0005A6  0E00               	movlw	0
  2166  0005A8  6E44               	movwf	?_vfpfcnvrt+1,c
  2167  0005AA  0E00               	movlw	0
  2168  0005AC  6E43               	movwf	?_vfpfcnvrt,c
  2169  0005AE  0012               	return	
  2170  0005B0                     l3439:
  2171                           
  2172                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
  2173  0005B0  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2174  0005B4  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2175  0005B8  CFDE FFF6          	movff	postinc2,tblptrl
  2176  0005BC  CFDD FFF7          	movff	postdec2,tblptrh
  2177  0005C0                     	if	0	;tblptru may be non-zero
  2178  0005C0                     	endif
  2179  0005C0                     	if	0	;tblptru may be non-zero
  2180  0005C0                     	endif
  2181  0005C0  0008               	tblrd		*
  2182  0005C2  50F5               	movf	tablat,w,c
  2183  0005C4  6E01               	movwf	fputc@c,c
  2184  0005C6  6A02               	clrf	fputc@c+1,c
  2185  0005C8  C043  F003         	movff	vfpfcnvrt@fp,fputc@fp
  2186  0005CC  C044  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  2187  0005D0  EC31  F009         	call	_fputc	;wreg free
  2188                           
  2189                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
  2190  0005D4  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2191  0005D8  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2192  0005DC  2ADE               	incf	postinc2,f,c
  2193  0005DE  0E00               	movlw	0
  2194  0005E0  22DD               	addwfc	postdec2,f,c
  2195  0005E2  D7D5               	goto	l3429
  2196  0005E4                     __end_of_vfpfcnvrt:
  2197                           	opt callstack 0
  2198                           
  2199 ;; *************** function _xtoa *****************
  2200 ;; Defined at:
  2201 ;;		line 623 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  2202 ;; Parameters:    Size  Location     Type
  2203 ;;  fp              2   27[COMRAM] PTR struct _IO_FILE
  2204 ;;		 -> sprintf@f(6), 
  2205 ;;  d               8   29[COMRAM] unsigned long long 
  2206 ;;  x               1   37[COMRAM] unsigned char 
  2207 ;; Auto vars:     Size  Location     Type
  2208 ;;  n               8   54[COMRAM] unsigned long long 
  2209 ;;  c               2   64[COMRAM] int 
  2210 ;;  i               2   62[COMRAM] int 
  2211 ;;  w               2   52[COMRAM] int 
  2212 ;;  p               2   50[COMRAM] int 
  2213 ;; Return value:  Size  Location     Type
  2214 ;;                  2   27[COMRAM] int 
  2215 ;; Registers used:
  2216 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2217 ;; Tracked objects:
  2218 ;;		On entry : 0/0
  2219 ;;		On exit  : 0/0
  2220 ;;		Unchanged: 0/0
  2221 ;; Data sizes:     COMRAM   BANK0   BANK1
  2222 ;;      Params:        11       0       0
  2223 ;;      Locals:        20       0       0
  2224 ;;      Temps:          8       0       0
  2225 ;;      Totals:        39       0       0
  2226 ;;Total ram usage:       39 bytes
  2227 ;; Hardware stack levels used:    1
  2228 ;; Hardware stack levels required when called:    5
  2229 ;; This function calls:
  2230 ;;		_isalpha
  2231 ;;		_isupper
  2232 ;;		_pad
  2233 ;;		_toupper
  2234 ;; This function is called by:
  2235 ;;		_vfpfcnvrt
  2236 ;; This function uses a non-reentrant model
  2237 ;;
  2238                           
  2239                           	psect	text4
  2240  000ADE                     __ptext4:
  2241                           	opt callstack 0
  2242  000ADE                     _xtoa:
  2243                           	opt callstack 22
  2244                           
  2245                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 623: static
      +                           int xtoa(FILE *fp, unsigned long long d, char x);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 624: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 625:     int c, i, p, w;;C:\Program Files (x86)\Microch
      +                          ip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 626:     unsigned long long n;;C:\Program 
      +                          Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 629:     if (!(prec < 0
      +                          )) {
  2246                           
  2247                           ;incstack = 0
  2248  000ADE  0100               	movlb	0	; () banked
  2249  000AE0  AF75               	btfss	(_prec+1)& (0+255),7,b
  2250                           
  2251                           ; BSR set to: 0
  2252                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 630:       
      +                            flags &= ~(1 << 1);
  2253  000AE2  9257               	bcf	_flags,1,c
  2254                           
  2255                           ; BSR set to: 0
  2256                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 632:     p 
      +                          = (0 < prec) ? prec : 1;
  2257  000AE4  BF75               	btfsc	(_prec+1)& (0+255),7,b
  2258  000AE6  D005               	goto	u2090
  2259  000AE8  5175               	movf	(_prec+1)& (0+255),w,b
  2260  000AEA  E108               	bnz	l614
  2261  000AEC  0574               	decf	_prec& (0+255),w,b
  2262  000AEE  B0D8               	btfsc	status,0,c
  2263  000AF0  D005               	goto	l614
  2264  000AF2                     u2090:
  2265                           
  2266                           ; BSR set to: 0
  2267  000AF2  0E00               	movlw	0
  2268  000AF4  6E34               	movwf	xtoa@p+1,c
  2269  000AF6  0E01               	movlw	1
  2270  000AF8  6E33               	movwf	xtoa@p,c
  2271  000AFA  D004               	goto	l616
  2272  000AFC                     l614:
  2273                           
  2274                           ; BSR set to: 0
  2275  000AFC  C074  F033         	movff	_prec,xtoa@p
  2276  000B00  C075  F034         	movff	_prec+1,xtoa@p+1
  2277  000B04                     l616:
  2278                           
  2279                           ; BSR set to: 0
  2280                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 633:     w 
      +                          = width;
  2281  000B04  C072  F035         	movff	_width,xtoa@w
  2282  000B08  C073  F036         	movff	_width+1,xtoa@w+1
  2283                           
  2284                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 634:     if
      +                           (flags & (1 << 4)) {
  2285  000B0C  A857               	btfss	_flags,4,c
  2286  000B0E  D004               	goto	l3129
  2287                           
  2288                           ; BSR set to: 0
  2289                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 635:       
      +                            w -= 2;
  2290  000B10  0EFE               	movlw	254
  2291  000B12  2635               	addwf	xtoa@w,f,c
  2292  000B14  0EFF               	movlw	255
  2293  000B16  2236               	addwfc	xtoa@w+1,f,c
  2294  000B18                     l3129:
  2295                           
  2296                           ; BSR set to: 0
  2297                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 639:     n 
      +                          = d;
  2298  000B18  C01E  F037         	movff	xtoa@d,xtoa@n
  2299  000B1C  C01F  F038         	movff	xtoa@d+1,xtoa@n+1
  2300  000B20  C020  F039         	movff	xtoa@d+2,xtoa@n+2
  2301  000B24  C021  F03A         	movff	xtoa@d+3,xtoa@n+3
  2302  000B28  C022  F03B         	movff	xtoa@d+4,xtoa@n+4
  2303  000B2C  C023  F03C         	movff	xtoa@d+5,xtoa@n+5
  2304  000B30  C024  F03D         	movff	xtoa@d+6,xtoa@n+6
  2305  000B34  C025  F03E         	movff	xtoa@d+7,xtoa@n+7
  2306                           
  2307                           ; BSR set to: 0
  2308                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 640:     i 
      +                          = sizeof(dbuf) - 1;
  2309  000B38  0E00               	movlw	0
  2310  000B3A  6E40               	movwf	xtoa@i+1,c
  2311  000B3C  0E1F               	movlw	31
  2312  000B3E  6E3F               	movwf	xtoa@i,c
  2313                           
  2314                           ; BSR set to: 0
  2315                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 641:     db
      +                          uf[i] = '\0';
  2316  000B40  0E00               	movlw	0
  2317  000B42  6FA3               	movwf	(_dbuf+31)& (0+255),b
  2318                           
  2319                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 642:     wh
      +                          ile (!(i < 2) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  2320  000B44  D093               	goto	l3165
  2321  000B46                     l3135:
  2322                           
  2323                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 643:       
      +                            --i;
  2324  000B46  063F               	decf	xtoa@i,f,c
  2325  000B48  A0D8               	btfss	status,0,c
  2326  000B4A  0640               	decf	xtoa@i+1,f,c
  2327                           
  2328                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 644:       
      +                            c = n & 0x0f;
  2329  000B4C  0E0F               	movlw	15
  2330  000B4E  1437               	andwf	xtoa@n,w,c
  2331  000B50  6E41               	movwf	xtoa@c,c
  2332  000B52  6A42               	clrf	xtoa@c+1,c
  2333                           
  2334                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 645:       
      +                            c = (c < 10) ? '0' + c : 'a' + (c - 10);
  2335  000B54  BE42               	btfsc	xtoa@c+1,7,c
  2336  000B56  D008               	goto	l3143
  2337  000B58  5042               	movf	xtoa@c+1,w,c
  2338  000B5A  E104               	bnz	u2110
  2339  000B5C  0E0A               	movlw	10
  2340  000B5E  5C41               	subwf	xtoa@c,w,c
  2341  000B60  A0D8               	btfss	status,0,c
  2342  000B62  D002               	goto	l3143
  2343  000B64                     u2110:
  2344  000B64  0E57               	movlw	87
  2345  000B66  D001               	goto	L2
  2346  000B68                     l3143:
  2347  000B68  0E30               	movlw	48
  2348  000B6A                     L2:
  2349  000B6A  2441               	addwf	xtoa@c,w,c
  2350  000B6C  6E41               	movwf	xtoa@c,c
  2351  000B6E  0E00               	movlw	0
  2352  000B70  2042               	addwfc	xtoa@c+1,w,c
  2353  000B72  6E42               	movwf	xtoa@c+1,c
  2354                           
  2355                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 646:       
      +                            if ((0 ? isupper((int)x) : ((unsigned)((int)x)-'A') < 26) && (0 ? isalpha(c) : (((unsi
      +                          gned)(c)|32)-'a') < 26)) {
  2356  000B74  0EBF               	movlw	191
  2357  000B76  6E27               	movwf	??_xtoa& (0+255),c
  2358  000B78  0EFF               	movlw	255
  2359  000B7A  6E28               	movwf	(??_xtoa+1)& (0+255),c
  2360  000B7C  5026               	movf	xtoa@x,w,c
  2361  000B7E  6E29               	movwf	(??_xtoa+2)& (0+255),c
  2362  000B80  6A2A               	clrf	(??_xtoa+3)& (0+255),c
  2363  000B82  5027               	movf	??_xtoa,w,c
  2364  000B84  2629               	addwf	??_xtoa+2,f,c
  2365  000B86  5028               	movf	??_xtoa+1,w,c
  2366  000B88  222A               	addwfc	??_xtoa+3,f,c
  2367  000B8A  502A               	movf	??_xtoa+3,w,c
  2368  000B8C  E106               	bnz	u2120
  2369  000B8E  0E1A               	movlw	26
  2370  000B90  5C29               	subwf	??_xtoa+2,w,c
  2371  000B92  B0D8               	btfsc	status,0,c
  2372  000B94  D002               	goto	u2120
  2373  000B96  0E01               	movlw	1
  2374  000B98  D001               	goto	u2130
  2375  000B9A                     u2120:
  2376  000B9A  0E00               	movlw	0
  2377  000B9C                     u2130:
  2378  000B9C  6E2F               	movwf	_xtoa$1183,c
  2379  000B9E  6A30               	clrf	_xtoa$1183+1,c
  2380  000BA0  502F               	movf	_xtoa$1183,w,c
  2381  000BA2  1030               	iorwf	_xtoa$1183+1,w,c
  2382  000BA4  B4D8               	btfsc	status,2,c
  2383  000BA6  D027               	goto	l3157
  2384  000BA8  0E9F               	movlw	159
  2385  000BAA  6E27               	movwf	??_xtoa& (0+255),c
  2386  000BAC  0EFF               	movlw	255
  2387  000BAE  6E28               	movwf	(??_xtoa+1)& (0+255),c
  2388  000BB0  0E20               	movlw	32
  2389  000BB2  1041               	iorwf	xtoa@c,w,c
  2390  000BB4  6E29               	movwf	(??_xtoa+2)& (0+255),c
  2391  000BB6  0E00               	movlw	0
  2392  000BB8  1042               	iorwf	xtoa@c+1,w,c
  2393  000BBA  6E2A               	movwf	(??_xtoa+3)& (0+255),c
  2394  000BBC  5027               	movf	??_xtoa,w,c
  2395  000BBE  2629               	addwf	??_xtoa+2,f,c
  2396  000BC0  5028               	movf	??_xtoa+1,w,c
  2397  000BC2  222A               	addwfc	??_xtoa+3,f,c
  2398  000BC4  502A               	movf	??_xtoa+3,w,c
  2399  000BC6  E106               	bnz	u2150
  2400  000BC8  0E1A               	movlw	26
  2401  000BCA  5C29               	subwf	??_xtoa+2,w,c
  2402  000BCC  B0D8               	btfsc	status,0,c
  2403  000BCE  D002               	goto	u2150
  2404  000BD0  0E01               	movlw	1
  2405  000BD2  D001               	goto	u2160
  2406  000BD4                     u2150:
  2407  000BD4  0E00               	movlw	0
  2408  000BD6                     u2160:
  2409  000BD6  6E31               	movwf	_xtoa$1184,c
  2410  000BD8  6A32               	clrf	_xtoa$1184+1,c
  2411  000BDA  5031               	movf	_xtoa$1184,w,c
  2412  000BDC  1032               	iorwf	_xtoa$1184+1,w,c
  2413  000BDE  B4D8               	btfsc	status,2,c
  2414  000BE0  D00A               	goto	l3157
  2415                           
  2416                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 647:       
      +                                c = toupper(c);
  2417  000BE2  C041  F007         	movff	xtoa@c,toupper@c
  2418  000BE6  C042  F008         	movff	xtoa@c+1,toupper@c+1
  2419  000BEA  ECEA  F00B         	call	_toupper	;wreg free
  2420  000BEE  C007  F041         	movff	?_toupper,xtoa@c
  2421  000BF2  C008  F042         	movff	?_toupper+1,xtoa@c+1
  2422  000BF6                     l3157:
  2423                           
  2424                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 649:       
      +                            dbuf[i] = (char)c;
  2425  000BF6  0E84               	movlw	low _dbuf
  2426  000BF8  243F               	addwf	xtoa@i,w,c
  2427  000BFA  6ED9               	movwf	fsr2l,c
  2428  000BFC  0E00               	movlw	high _dbuf
  2429  000BFE  2040               	addwfc	xtoa@i+1,w,c
  2430  000C00  6EDA               	movwf	fsr2h,c
  2431  000C02  C041  FFDF         	movff	xtoa@c,indf2
  2432                           
  2433                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 650:       
      +                            --p;
  2434  000C06  0633               	decf	xtoa@p,f,c
  2435  000C08  A0D8               	btfss	status,0,c
  2436  000C0A  0634               	decf	xtoa@p+1,f,c
  2437                           
  2438                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 651:       
      +                            --w;
  2439  000C0C  0635               	decf	xtoa@w,f,c
  2440  000C0E  A0D8               	btfss	status,0,c
  2441  000C10  0636               	decf	xtoa@w+1,f,c
  2442                           
  2443                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 652:       
      +                            n = n >> 4;
  2444  000C12  C037  F027         	movff	xtoa@n,??_xtoa
  2445  000C16  C038  F028         	movff	xtoa@n+1,??_xtoa+1
  2446  000C1A  C039  F029         	movff	xtoa@n+2,??_xtoa+2
  2447  000C1E  C03A  F02A         	movff	xtoa@n+3,??_xtoa+3
  2448  000C22  C03B  F02B         	movff	xtoa@n+4,??_xtoa+4
  2449  000C26  C03C  F02C         	movff	xtoa@n+5,??_xtoa+5
  2450  000C2A  C03D  F02D         	movff	xtoa@n+6,??_xtoa+6
  2451  000C2E  C03E  F02E         	movff	xtoa@n+7,??_xtoa+7
  2452  000C32  0E05               	movlw	5
  2453  000C34  D009               	goto	u2180
  2454  000C36                     u2185:
  2455  000C36  90D8               	bcf	status,0,c
  2456  000C38  322E               	rrcf	??_xtoa+7,f,c
  2457  000C3A  322D               	rrcf	??_xtoa+6,f,c
  2458  000C3C  322C               	rrcf	??_xtoa+5,f,c
  2459  000C3E  322B               	rrcf	??_xtoa+4,f,c
  2460  000C40  322A               	rrcf	??_xtoa+3,f,c
  2461  000C42  3229               	rrcf	??_xtoa+2,f,c
  2462  000C44  3228               	rrcf	??_xtoa+1,f,c
  2463  000C46  3227               	rrcf	??_xtoa,f,c
  2464  000C48                     u2180:
  2465  000C48  2EE8               	decfsz	wreg,f,c
  2466  000C4A  D7F5               	goto	u2185
  2467  000C4C  C027  F037         	movff	??_xtoa,xtoa@n
  2468  000C50  C028  F038         	movff	??_xtoa+1,xtoa@n+1
  2469  000C54  C029  F039         	movff	??_xtoa+2,xtoa@n+2
  2470  000C58  C02A  F03A         	movff	??_xtoa+3,xtoa@n+3
  2471  000C5C  C02B  F03B         	movff	??_xtoa+4,xtoa@n+4
  2472  000C60  C02C  F03C         	movff	??_xtoa+5,xtoa@n+5
  2473  000C64  C02D  F03D         	movff	??_xtoa+6,xtoa@n+6
  2474  000C68  C02E  F03E         	movff	??_xtoa+7,xtoa@n+7
  2475  000C6C                     l3165:
  2476                           
  2477                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 642:     wh
      +                          ile (!(i < 2) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  2478  000C6C  BE40               	btfsc	xtoa@i+1,7,c
  2479  000C6E  D020               	goto	u2230
  2480  000C70  5040               	movf	xtoa@i+1,w,c
  2481  000C72  E104               	bnz	u2190
  2482  000C74  0E02               	movlw	2
  2483  000C76  5C3F               	subwf	xtoa@i,w,c
  2484  000C78  A0D8               	btfss	status,0,c
  2485  000C7A  D01A               	goto	u2230
  2486  000C7C                     u2190:
  2487  000C7C  5037               	movf	xtoa@n,w,c
  2488  000C7E  1038               	iorwf	xtoa@n+1,w,c
  2489  000C80  1039               	iorwf	xtoa@n+2,w,c
  2490  000C82  103A               	iorwf	xtoa@n+3,w,c
  2491  000C84  103B               	iorwf	xtoa@n+4,w,c
  2492  000C86  103C               	iorwf	xtoa@n+5,w,c
  2493  000C88  103D               	iorwf	xtoa@n+6,w,c
  2494  000C8A  103E               	iorwf	xtoa@n+7,w,c
  2495  000C8C  A4D8               	btfss	status,2,c
  2496  000C8E  D75B               	goto	l3135
  2497  000C90  BE34               	btfsc	xtoa@p+1,7,c
  2498  000C92  D005               	goto	u2210
  2499  000C94  5034               	movf	xtoa@p+1,w,c
  2500  000C96  E102               	bnz	u2211
  2501  000C98  0433               	decf	xtoa@p,w,c
  2502  000C9A  B0D8               	btfsc	status,0,c
  2503  000C9C                     u2211:
  2504  000C9C  D754               	goto	l3135
  2505  000C9E                     u2210:
  2506  000C9E  BE36               	btfsc	xtoa@w+1,7,c
  2507  000CA0  D007               	goto	u2230
  2508  000CA2  5036               	movf	xtoa@w+1,w,c
  2509  000CA4  E103               	bnz	u2220
  2510  000CA6  0435               	decf	xtoa@w,w,c
  2511  000CA8  A0D8               	btfss	status,0,c
  2512  000CAA  D002               	goto	u2230
  2513  000CAC                     u2220:
  2514  000CAC  B257               	btfsc	_flags,1,c
  2515  000CAE  D74B               	goto	l3135
  2516  000CB0                     u2230:
  2517                           
  2518                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 656:     if
      +                           (flags & (1 << 4)) {
  2519  000CB0  A857               	btfss	_flags,4,c
  2520  000CB2  D016               	goto	l3181
  2521                           
  2522                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 657:       
      +                            --i;
  2523  000CB4  063F               	decf	xtoa@i,f,c
  2524  000CB6  A0D8               	btfss	status,0,c
  2525  000CB8  0640               	decf	xtoa@i+1,f,c
  2526                           
  2527                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 658:       
      +                            dbuf[i] = x;
  2528  000CBA  0E84               	movlw	low _dbuf
  2529  000CBC  243F               	addwf	xtoa@i,w,c
  2530  000CBE  6ED9               	movwf	fsr2l,c
  2531  000CC0  0E00               	movlw	high _dbuf
  2532  000CC2  2040               	addwfc	xtoa@i+1,w,c
  2533  000CC4  6EDA               	movwf	fsr2h,c
  2534  000CC6  C026  FFDF         	movff	xtoa@x,indf2
  2535                           
  2536                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 659:       
      +                            --i;
  2537  000CCA  063F               	decf	xtoa@i,f,c
  2538  000CCC  A0D8               	btfss	status,0,c
  2539  000CCE  0640               	decf	xtoa@i+1,f,c
  2540                           
  2541                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 660:       
      +                            dbuf[i] = '0';
  2542  000CD0  0E84               	movlw	low _dbuf
  2543  000CD2  243F               	addwf	xtoa@i,w,c
  2544  000CD4  6ED9               	movwf	fsr2l,c
  2545  000CD6  0E00               	movlw	high _dbuf
  2546  000CD8  2040               	addwfc	xtoa@i+1,w,c
  2547  000CDA  6EDA               	movwf	fsr2h,c
  2548  000CDC  0E30               	movlw	48
  2549  000CDE  6EDF               	movwf	indf2,c
  2550  000CE0                     l3181:
  2551                           
  2552                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 664:     re
      +                          turn pad(fp, &dbuf[i], w);
  2553  000CE0  C01C  F011         	movff	xtoa@fp,pad@fp
  2554  000CE4  C01D  F012         	movff	xtoa@fp+1,pad@fp+1
  2555  000CE8  0E84               	movlw	low _dbuf
  2556  000CEA  243F               	addwf	xtoa@i,w,c
  2557  000CEC  6E13               	movwf	pad@buf,c
  2558  000CEE  0E00               	movlw	high _dbuf
  2559  000CF0  2040               	addwfc	xtoa@i+1,w,c
  2560  000CF2  6E14               	movwf	pad@buf+1,c
  2561  000CF4  C035  F015         	movff	xtoa@w,pad@p
  2562  000CF8  C036  F016         	movff	xtoa@w+1,pad@p+1
  2563  000CFC  EC81  F009         	call	_pad	;wreg free
  2564  000D00  C011  F01C         	movff	?_pad,?_xtoa
  2565  000D04  C012  F01D         	movff	?_pad+1,?_xtoa+1
  2566  000D08  0012               	return		;funcret
  2567  000D0A                     __end_of_xtoa:
  2568                           	opt callstack 0
  2569                           
  2570 ;; *************** function _toupper *****************
  2571 ;; Defined at:
  2572 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\toupper.c"
  2573 ;; Parameters:    Size  Location     Type
  2574 ;;  c               2    6[COMRAM] int 
  2575 ;; Auto vars:     Size  Location     Type
  2576 ;;		None
  2577 ;; Return value:  Size  Location     Type
  2578 ;;                  2    6[COMRAM] int 
  2579 ;; Registers used:
  2580 ;;		wreg, status,2, status,0
  2581 ;; Tracked objects:
  2582 ;;		On entry : 0/0
  2583 ;;		On exit  : 0/0
  2584 ;;		Unchanged: 0/0
  2585 ;; Data sizes:     COMRAM   BANK0   BANK1
  2586 ;;      Params:         2       0       0
  2587 ;;      Locals:         2       0       0
  2588 ;;      Temps:          4       0       0
  2589 ;;      Totals:         8       0       0
  2590 ;;Total ram usage:        8 bytes
  2591 ;; Hardware stack levels used:    1
  2592 ;; Hardware stack levels required when called:    2
  2593 ;; This function calls:
  2594 ;;		_islower
  2595 ;; This function is called by:
  2596 ;;		_xtoa
  2597 ;; This function uses a non-reentrant model
  2598 ;;
  2599                           
  2600                           	psect	text5
  2601  0017D4                     __ptext5:
  2602                           	opt callstack 0
  2603  0017D4                     _toupper:
  2604                           	opt callstack 24
  2605                           
  2606                           ;incstack = 0
  2607  0017D4  0E9F               	movlw	159
  2608  0017D6  6E09               	movwf	??_toupper& (0+255),c
  2609  0017D8  0EFF               	movlw	255
  2610  0017DA  6E0A               	movwf	(??_toupper+1)& (0+255),c
  2611  0017DC  C007  F00B         	movff	toupper@c,??_toupper+2
  2612  0017E0  C008  F00C         	movff	toupper@c+1,??_toupper+3
  2613  0017E4  5009               	movf	??_toupper,w,c
  2614  0017E6  260B               	addwf	??_toupper+2,f,c
  2615  0017E8  500A               	movf	??_toupper+1,w,c
  2616  0017EA  220C               	addwfc	??_toupper+3,f,c
  2617  0017EC  500C               	movf	??_toupper+3,w,c
  2618  0017EE  E106               	bnz	u1720
  2619  0017F0  0E1A               	movlw	26
  2620  0017F2  5C0B               	subwf	??_toupper+2,w,c
  2621  0017F4  B0D8               	btfsc	status,0,c
  2622  0017F6  D002               	goto	u1720
  2623  0017F8  0E01               	movlw	1
  2624  0017FA  D001               	goto	u1730
  2625  0017FC                     u1720:
  2626  0017FC  0E00               	movlw	0
  2627  0017FE                     u1730:
  2628  0017FE  6E0D               	movwf	_toupper$1759,c
  2629  001800  6A0E               	clrf	_toupper$1759+1,c
  2630  001802  500D               	movf	_toupper$1759,w,c
  2631  001804  100E               	iorwf	_toupper$1759+1,w,c
  2632  001806  B4D8               	btfsc	status,2,c
  2633  001808  D005               	goto	l1457
  2634  00180A  0E5F               	movlw	95
  2635  00180C  1407               	andwf	toupper@c,w,c
  2636  00180E  6E07               	movwf	?_toupper,c
  2637  001810  6A08               	clrf	?_toupper+1,c
  2638  001812  0012               	return	
  2639  001814                     l1457:
  2640  001814  C007  F007         	movff	toupper@c,?_toupper
  2641  001818  C008  F008         	movff	toupper@c+1,?_toupper+1
  2642  00181C  0012               	return		;funcret
  2643  00181E                     __end_of_toupper:
  2644                           	opt callstack 0
  2645                           
  2646 ;; *************** function _islower *****************
  2647 ;; Defined at:
  2648 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\islower.c"
  2649 ;; Parameters:    Size  Location     Type
  2650 ;;  c               2    0[COMRAM] int 
  2651 ;; Auto vars:     Size  Location     Type
  2652 ;;		None
  2653 ;; Return value:  Size  Location     Type
  2654 ;;                  2    0[COMRAM] int 
  2655 ;; Registers used:
  2656 ;;		wreg, status,2, status,0
  2657 ;; Tracked objects:
  2658 ;;		On entry : 0/0
  2659 ;;		On exit  : 0/0
  2660 ;;		Unchanged: 0/0
  2661 ;; Data sizes:     COMRAM   BANK0   BANK1
  2662 ;;      Params:         2       0       0
  2663 ;;      Locals:         0       0       0
  2664 ;;      Temps:          4       0       0
  2665 ;;      Totals:         6       0       0
  2666 ;;Total ram usage:        6 bytes
  2667 ;; Hardware stack levels used:    1
  2668 ;; Hardware stack levels required when called:    1
  2669 ;; This function calls:
  2670 ;;		Nothing
  2671 ;; This function is called by:
  2672 ;;		_toupper
  2673 ;; This function uses a non-reentrant model
  2674 ;;
  2675                           
  2676                           	psect	text6
  2677  0019A2                     __ptext6:
  2678                           	opt callstack 0
  2679  0019A2                     _islower:
  2680                           	opt callstack 24
  2681                           
  2682                           ;incstack = 0
  2683  0019A2  0E9F               	movlw	159
  2684  0019A4  6E03               	movwf	??_islower& (0+255),c
  2685  0019A6  0EFF               	movlw	255
  2686  0019A8  6E04               	movwf	(??_islower+1)& (0+255),c
  2687  0019AA  C001  F005         	movff	islower@c,??_islower+2
  2688  0019AE  C002  F006         	movff	islower@c+1,??_islower+3
  2689  0019B2  5003               	movf	??_islower,w,c
  2690  0019B4  2605               	addwf	??_islower+2,f,c
  2691  0019B6  5004               	movf	??_islower+1,w,c
  2692  0019B8  2206               	addwfc	??_islower+3,f,c
  2693  0019BA  5006               	movf	??_islower+3,w,c
  2694  0019BC  E106               	bnz	u1610
  2695  0019BE  0E1A               	movlw	26
  2696  0019C0  5C05               	subwf	??_islower+2,w,c
  2697  0019C2  B0D8               	btfsc	status,0,c
  2698  0019C4  D002               	goto	u1610
  2699  0019C6  0E01               	movlw	1
  2700  0019C8  D001               	goto	u1620
  2701  0019CA                     u1610:
  2702  0019CA  0E00               	movlw	0
  2703  0019CC                     u1620:
  2704  0019CC  6E01               	movwf	?_islower,c
  2705  0019CE  6A02               	clrf	?_islower+1,c
  2706  0019D0  0012               	return		;funcret
  2707  0019D2                     __end_of_islower:
  2708                           	opt callstack 0
  2709                           
  2710 ;; *************** function _isupper *****************
  2711 ;; Defined at:
  2712 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\isupper.c"
  2713 ;; Parameters:    Size  Location     Type
  2714 ;;  c               2    0[COMRAM] int 
  2715 ;; Auto vars:     Size  Location     Type
  2716 ;;		None
  2717 ;; Return value:  Size  Location     Type
  2718 ;;                  2    0[COMRAM] int 
  2719 ;; Registers used:
  2720 ;;		wreg, status,2, status,0
  2721 ;; Tracked objects:
  2722 ;;		On entry : 0/0
  2723 ;;		On exit  : 0/0
  2724 ;;		Unchanged: 0/0
  2725 ;; Data sizes:     COMRAM   BANK0   BANK1
  2726 ;;      Params:         2       0       0
  2727 ;;      Locals:         0       0       0
  2728 ;;      Temps:          4       0       0
  2729 ;;      Totals:         6       0       0
  2730 ;;Total ram usage:        6 bytes
  2731 ;; Hardware stack levels used:    1
  2732 ;; Hardware stack levels required when called:    1
  2733 ;; This function calls:
  2734 ;;		Nothing
  2735 ;; This function is called by:
  2736 ;;		_xtoa
  2737 ;; This function uses a non-reentrant model
  2738 ;;
  2739                           
  2740                           	psect	text7
  2741  0019D2                     __ptext7:
  2742                           	opt callstack 0
  2743  0019D2                     _isupper:
  2744                           	opt callstack 25
  2745                           
  2746                           ;incstack = 0
  2747  0019D2  0EBF               	movlw	191
  2748  0019D4  6E03               	movwf	??_isupper& (0+255),c
  2749  0019D6  0EFF               	movlw	255
  2750  0019D8  6E04               	movwf	(??_isupper+1)& (0+255),c
  2751  0019DA  C001  F005         	movff	isupper@c,??_isupper+2
  2752  0019DE  C002  F006         	movff	isupper@c+1,??_isupper+3
  2753  0019E2  5003               	movf	??_isupper,w,c
  2754  0019E4  2605               	addwf	??_isupper+2,f,c
  2755  0019E6  5004               	movf	??_isupper+1,w,c
  2756  0019E8  2206               	addwfc	??_isupper+3,f,c
  2757  0019EA  5006               	movf	??_isupper+3,w,c
  2758  0019EC  E106               	bnz	u1680
  2759  0019EE  0E1A               	movlw	26
  2760  0019F0  5C05               	subwf	??_isupper+2,w,c
  2761  0019F2  B0D8               	btfsc	status,0,c
  2762  0019F4  D002               	goto	u1680
  2763  0019F6  0E01               	movlw	1
  2764  0019F8  D001               	goto	u1690
  2765  0019FA                     u1680:
  2766  0019FA  0E00               	movlw	0
  2767  0019FC                     u1690:
  2768  0019FC  6E01               	movwf	?_isupper,c
  2769  0019FE  6A02               	clrf	?_isupper+1,c
  2770  001A00  0012               	return		;funcret
  2771  001A02                     __end_of_isupper:
  2772                           	opt callstack 0
  2773                           
  2774 ;; *************** function _isalpha *****************
  2775 ;; Defined at:
  2776 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\isalpha.c"
  2777 ;; Parameters:    Size  Location     Type
  2778 ;;  c               2    0[COMRAM] int 
  2779 ;; Auto vars:     Size  Location     Type
  2780 ;;		None
  2781 ;; Return value:  Size  Location     Type
  2782 ;;                  2    0[COMRAM] int 
  2783 ;; Registers used:
  2784 ;;		wreg, status,2, status,0
  2785 ;; Tracked objects:
  2786 ;;		On entry : 0/0
  2787 ;;		On exit  : 0/0
  2788 ;;		Unchanged: 0/0
  2789 ;; Data sizes:     COMRAM   BANK0   BANK1
  2790 ;;      Params:         2       0       0
  2791 ;;      Locals:         0       0       0
  2792 ;;      Temps:          4       0       0
  2793 ;;      Totals:         6       0       0
  2794 ;;Total ram usage:        6 bytes
  2795 ;; Hardware stack levels used:    1
  2796 ;; Hardware stack levels required when called:    1
  2797 ;; This function calls:
  2798 ;;		Nothing
  2799 ;; This function is called by:
  2800 ;;		_xtoa
  2801 ;; This function uses a non-reentrant model
  2802 ;;
  2803                           
  2804                           	psect	text8
  2805  001908                     __ptext8:
  2806                           	opt callstack 0
  2807  001908                     _isalpha:
  2808                           	opt callstack 25
  2809                           
  2810                           ;incstack = 0
  2811  001908  0E9F               	movlw	159
  2812  00190A  6E03               	movwf	??_isalpha& (0+255),c
  2813  00190C  0EFF               	movlw	255
  2814  00190E  6E04               	movwf	(??_isalpha+1)& (0+255),c
  2815  001910  0E20               	movlw	32
  2816  001912  1001               	iorwf	isalpha@c,w,c
  2817  001914  6E05               	movwf	(??_isalpha+2)& (0+255),c
  2818  001916  0E00               	movlw	0
  2819  001918  1002               	iorwf	isalpha@c+1,w,c
  2820  00191A  6E06               	movwf	(??_isalpha+3)& (0+255),c
  2821  00191C  5003               	movf	??_isalpha,w,c
  2822  00191E  2605               	addwf	??_isalpha+2,f,c
  2823  001920  5004               	movf	??_isalpha+1,w,c
  2824  001922  2206               	addwfc	??_isalpha+3,f,c
  2825  001924  5006               	movf	??_isalpha+3,w,c
  2826  001926  E106               	bnz	u1700
  2827  001928  0E1A               	movlw	26
  2828  00192A  5C05               	subwf	??_isalpha+2,w,c
  2829  00192C  B0D8               	btfsc	status,0,c
  2830  00192E  D002               	goto	u1700
  2831  001930  0E01               	movlw	1
  2832  001932  D001               	goto	u1710
  2833  001934                     u1700:
  2834  001934  0E00               	movlw	0
  2835  001936                     u1710:
  2836  001936  6E01               	movwf	?_isalpha,c
  2837  001938  6A02               	clrf	?_isalpha+1,c
  2838  00193A  0012               	return		;funcret
  2839  00193C                     __end_of_isalpha:
  2840                           	opt callstack 0
  2841                           
  2842 ;; *************** function _dtoa *****************
  2843 ;; Defined at:
  2844 ;;		line 274 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  2845 ;; Parameters:    Size  Location     Type
  2846 ;;  fp              2   27[COMRAM] PTR struct _IO_FILE
  2847 ;;		 -> sprintf@f(6), 
  2848 ;;  d               8   29[COMRAM] long long 
  2849 ;; Auto vars:     Size  Location     Type
  2850 ;;  n               8   53[COMRAM] long long 
  2851 ;;  i               2   61[COMRAM] int 
  2852 ;;  s               2   51[COMRAM] int 
  2853 ;;  w               2   49[COMRAM] int 
  2854 ;;  p               2   47[COMRAM] int 
  2855 ;; Return value:  Size  Location     Type
  2856 ;;                  2   27[COMRAM] int 
  2857 ;; Registers used:
  2858 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2859 ;; Tracked objects:
  2860 ;;		On entry : 0/0
  2861 ;;		On exit  : 0/0
  2862 ;;		Unchanged: 0/0
  2863 ;; Data sizes:     COMRAM   BANK0   BANK1
  2864 ;;      Params:        10       0       0
  2865 ;;      Locals:        18       0       0
  2866 ;;      Temps:          8       0       0
  2867 ;;      Totals:        36       0       0
  2868 ;;Total ram usage:       36 bytes
  2869 ;; Hardware stack levels used:    1
  2870 ;; Hardware stack levels required when called:    5
  2871 ;; This function calls:
  2872 ;;		___aodiv
  2873 ;;		___aomod
  2874 ;;		_abs
  2875 ;;		_pad
  2876 ;; This function is called by:
  2877 ;;		_vfpfcnvrt
  2878 ;; This function uses a non-reentrant model
  2879 ;;
  2880                           
  2881                           	psect	text9
  2882  00089C                     __ptext9:
  2883                           	opt callstack 0
  2884  00089C                     _dtoa:
  2885                           	opt callstack 22
  2886                           
  2887                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 274: static
      +                           int dtoa(FILE *fp, long long d);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\
      +                          c99\common\doprnt.c: 275: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\c
      +                          ommon\doprnt.c: 276:     int i, p, s, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\
      +                          sources\c99\common\doprnt.c: 277:     long long n;;C:\Program Files (x86)\Microchip\xc8\
      +                          v2.05\pic\sources\c99\common\doprnt.c: 280:     n = d;
  2888                           
  2889                           ;incstack = 0
  2890  00089C  C01E  F036         	movff	dtoa@d,dtoa@n
  2891  0008A0  C01F  F037         	movff	dtoa@d+1,dtoa@n+1
  2892  0008A4  C020  F038         	movff	dtoa@d+2,dtoa@n+2
  2893  0008A8  C021  F039         	movff	dtoa@d+3,dtoa@n+3
  2894  0008AC  C022  F03A         	movff	dtoa@d+4,dtoa@n+4
  2895  0008B0  C023  F03B         	movff	dtoa@d+5,dtoa@n+5
  2896  0008B4  C024  F03C         	movff	dtoa@d+6,dtoa@n+6
  2897  0008B8  C025  F03D         	movff	dtoa@d+7,dtoa@n+7
  2898                           
  2899                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 281:     s 
      +                          = n < 0 ? 1 : 0;
  2900  0008BC  AE3D               	btfss	dtoa@n+7,7,c
  2901  0008BE  D002               	goto	u1930
  2902  0008C0  0E01               	movlw	1
  2903  0008C2  D001               	goto	u1940
  2904  0008C4                     u1930:
  2905  0008C4  0E00               	movlw	0
  2906  0008C6                     u1940:
  2907  0008C6  6E34               	movwf	dtoa@s,c
  2908  0008C8  6A35               	clrf	dtoa@s+1,c
  2909                           
  2910                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 282:     if
      +                           (s) {
  2911  0008CA  5034               	movf	dtoa@s,w,c
  2912  0008CC  1035               	iorwf	dtoa@s+1,w,c
  2913  0008CE  B4D8               	btfsc	status,2,c
  2914  0008D0  D010               	goto	l3063
  2915                           
  2916                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 283:       
      +                            n = -n;
  2917  0008D2  1E3D               	comf	dtoa@n+7,f,c
  2918  0008D4  1E3C               	comf	dtoa@n+6,f,c
  2919  0008D6  1E3B               	comf	dtoa@n+5,f,c
  2920  0008D8  1E3A               	comf	dtoa@n+4,f,c
  2921  0008DA  1E39               	comf	dtoa@n+3,f,c
  2922  0008DC  1E38               	comf	dtoa@n+2,f,c
  2923  0008DE  1E37               	comf	dtoa@n+1,f,c
  2924  0008E0  6C36               	negf	dtoa@n,c
  2925  0008E2  0E00               	movlw	0
  2926  0008E4  2237               	addwfc	dtoa@n+1,f,c
  2927  0008E6  2238               	addwfc	dtoa@n+2,f,c
  2928  0008E8  2239               	addwfc	dtoa@n+3,f,c
  2929  0008EA  223A               	addwfc	dtoa@n+4,f,c
  2930  0008EC  223B               	addwfc	dtoa@n+5,f,c
  2931  0008EE  223C               	addwfc	dtoa@n+6,f,c
  2932  0008F0  223D               	addwfc	dtoa@n+7,f,c
  2933  0008F2                     l3063:
  2934                           
  2935                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 287:     if
      +                           (!(prec < 0)) {
  2936  0008F2  0100               	movlb	0	; () banked
  2937  0008F4  AF75               	btfss	(_prec+1)& (0+255),7,b
  2938                           
  2939                           ; BSR set to: 0
  2940                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 288:       
      +                            flags &= ~(1 << 1);
  2941  0008F6  9257               	bcf	_flags,1,c
  2942                           
  2943                           ; BSR set to: 0
  2944                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 290:     p 
      +                          = (0 < prec) ? prec : 1;
  2945  0008F8  BF75               	btfsc	(_prec+1)& (0+255),7,b
  2946  0008FA  D005               	goto	u1970
  2947  0008FC  5175               	movf	(_prec+1)& (0+255),w,b
  2948  0008FE  E108               	bnz	l589
  2949  000900  0574               	decf	_prec& (0+255),w,b
  2950  000902  B0D8               	btfsc	status,0,c
  2951  000904  D005               	goto	l589
  2952  000906                     u1970:
  2953                           
  2954                           ; BSR set to: 0
  2955  000906  0E00               	movlw	0
  2956  000908  6E31               	movwf	dtoa@p+1,c
  2957  00090A  0E01               	movlw	1
  2958  00090C  6E30               	movwf	dtoa@p,c
  2959  00090E  D004               	goto	l591
  2960  000910                     l589:
  2961                           
  2962                           ; BSR set to: 0
  2963  000910  C074  F030         	movff	_prec,dtoa@p
  2964  000914  C075  F031         	movff	_prec+1,dtoa@p+1
  2965  000918                     l591:
  2966                           
  2967                           ; BSR set to: 0
  2968                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 291:     w 
      +                          = width;
  2969  000918  C072  F032         	movff	_width,dtoa@w
  2970  00091C  C073  F033         	movff	_width+1,dtoa@w+1
  2971                           
  2972                           ; BSR set to: 0
  2973                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 292:     if
      +                           (s || (flags & (1 << 2))) {
  2974  000920  5034               	movf	dtoa@s,w,c
  2975  000922  1035               	iorwf	dtoa@s+1,w,c
  2976  000924  A4D8               	btfss	status,2,c
  2977  000926  D002               	goto	u1990
  2978                           
  2979                           ; BSR set to: 0
  2980  000928  A457               	btfss	_flags,2,c
  2981  00092A  D003               	goto	l3077
  2982  00092C                     u1990:
  2983                           
  2984                           ; BSR set to: 0
  2985                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 293:       
      +                            --w;
  2986  00092C  0632               	decf	dtoa@w,f,c
  2987  00092E  A0D8               	btfss	status,0,c
  2988  000930  0633               	decf	dtoa@w+1,f,c
  2989  000932                     l3077:
  2990                           
  2991                           ; BSR set to: 0
  2992                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 297:     i 
      +                          = sizeof(dbuf) - 1;
  2993  000932  0E00               	movlw	0
  2994  000934  6E3F               	movwf	dtoa@i+1,c
  2995  000936  0E1F               	movlw	31
  2996  000938  6E3E               	movwf	dtoa@i,c
  2997                           
  2998                           ; BSR set to: 0
  2999                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 298:     db
      +                          uf[i] = '\0';
  3000  00093A  0E00               	movlw	0
  3001  00093C  6FA3               	movwf	(_dbuf+31)& (0+255),b
  3002                           
  3003                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  3004  00093E  D07C               	goto	l3091
  3005  000940                     l3081:
  3006                           
  3007                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 300:       
      +                            --i;
  3008  000940  063E               	decf	dtoa@i,f,c
  3009  000942  A0D8               	btfss	status,0,c
  3010  000944  063F               	decf	dtoa@i+1,f,c
  3011                           
  3012                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 301:       
      +                            dbuf[i] = '0' + abs(n % 10);
  3013  000946  0E84               	movlw	low _dbuf
  3014  000948  243E               	addwf	dtoa@i,w,c
  3015  00094A  6ED9               	movwf	fsr2l,c
  3016  00094C  0E00               	movlw	high _dbuf
  3017  00094E  203F               	addwfc	dtoa@i+1,w,c
  3018  000950  6EDA               	movwf	fsr2h,c
  3019  000952  C036  F001         	movff	dtoa@n,___aomod@dividend
  3020  000956  C037  F002         	movff	dtoa@n+1,___aomod@dividend+1
  3021  00095A  C038  F003         	movff	dtoa@n+2,___aomod@dividend+2
  3022  00095E  C039  F004         	movff	dtoa@n+3,___aomod@dividend+3
  3023  000962  C03A  F005         	movff	dtoa@n+4,___aomod@dividend+4
  3024  000966  C03B  F006         	movff	dtoa@n+5,___aomod@dividend+5
  3025  00096A  C03C  F007         	movff	dtoa@n+6,___aomod@dividend+6
  3026  00096E  C03D  F008         	movff	dtoa@n+7,___aomod@dividend+7
  3027  000972  0E0A               	movlw	10
  3028  000974  6E09               	movwf	___aomod@divisor,c
  3029  000976  0E00               	movlw	0
  3030  000978  6E0A               	movwf	___aomod@divisor+1,c
  3031  00097A  0E00               	movlw	0
  3032  00097C  6E0B               	movwf	___aomod@divisor+2,c
  3033  00097E  0E00               	movlw	0
  3034  000980  6E0C               	movwf	___aomod@divisor+3,c
  3035  000982  0E00               	movlw	0
  3036  000984  6E0D               	movwf	___aomod@divisor+4,c
  3037  000986  0E00               	movlw	0
  3038  000988  6E0E               	movwf	___aomod@divisor+5,c
  3039  00098A  0E00               	movlw	0
  3040  00098C  6E0F               	movwf	___aomod@divisor+6,c
  3041  00098E  0E00               	movlw	0
  3042  000990  6E10               	movwf	___aomod@divisor+7,c
  3043  000992  ECC9  F007         	call	___aomod	;wreg free
  3044  000996  C001  F026         	movff	?___aomod,??_dtoa
  3045  00099A  C002  F027         	movff	?___aomod+1,??_dtoa+1
  3046  00099E  C003  F028         	movff	?___aomod+2,??_dtoa+2
  3047  0009A2  C004  F029         	movff	?___aomod+3,??_dtoa+3
  3048  0009A6  C005  F02A         	movff	?___aomod+4,??_dtoa+4
  3049  0009AA  C006  F02B         	movff	?___aomod+5,??_dtoa+5
  3050  0009AE  C007  F02C         	movff	?___aomod+6,??_dtoa+6
  3051  0009B2  C008  F02D         	movff	?___aomod+7,??_dtoa+7
  3052  0009B6  C026  F013         	movff	??_dtoa,abs@a
  3053  0009BA  C028  F014         	movff	??_dtoa+2,abs@a+1
  3054  0009BE  ECB8  F00C         	call	_abs	;wreg free
  3055  0009C2  5013               	movf	?_abs,w,c
  3056  0009C4  0F30               	addlw	48
  3057  0009C6  6EDF               	movwf	indf2,c
  3058                           
  3059                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 302:       
      +                            --p;
  3060  0009C8  0630               	decf	dtoa@p,f,c
  3061  0009CA  A0D8               	btfss	status,0,c
  3062  0009CC  0631               	decf	dtoa@p+1,f,c
  3063                           
  3064                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 303:       
      +                            --w;
  3065  0009CE  0632               	decf	dtoa@w,f,c
  3066  0009D0  A0D8               	btfss	status,0,c
  3067  0009D2  0633               	decf	dtoa@w+1,f,c
  3068                           
  3069                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 304:       
      +                            n = n / 10;
  3070  0009D4  C036  F001         	movff	dtoa@n,___aodiv@dividend
  3071  0009D8  C037  F002         	movff	dtoa@n+1,___aodiv@dividend+1
  3072  0009DC  C038  F003         	movff	dtoa@n+2,___aodiv@dividend+2
  3073  0009E0  C039  F004         	movff	dtoa@n+3,___aodiv@dividend+3
  3074  0009E4  C03A  F005         	movff	dtoa@n+4,___aodiv@dividend+4
  3075  0009E8  C03B  F006         	movff	dtoa@n+5,___aodiv@dividend+5
  3076  0009EC  C03C  F007         	movff	dtoa@n+6,___aodiv@dividend+6
  3077  0009F0  C03D  F008         	movff	dtoa@n+7,___aodiv@dividend+7
  3078  0009F4  0E0A               	movlw	10
  3079  0009F6  6E09               	movwf	___aodiv@divisor,c
  3080  0009F8  0E00               	movlw	0
  3081  0009FA  6E0A               	movwf	___aodiv@divisor+1,c
  3082  0009FC  0E00               	movlw	0
  3083  0009FE  6E0B               	movwf	___aodiv@divisor+2,c
  3084  000A00  0E00               	movlw	0
  3085  000A02  6E0C               	movwf	___aodiv@divisor+3,c
  3086  000A04  0E00               	movlw	0
  3087  000A06  6E0D               	movwf	___aodiv@divisor+4,c
  3088  000A08  0E00               	movlw	0
  3089  000A0A  6E0E               	movwf	___aodiv@divisor+5,c
  3090  000A0C  0E00               	movlw	0
  3091  000A0E  6E0F               	movwf	___aodiv@divisor+6,c
  3092  000A10  0E00               	movlw	0
  3093  000A12  6E10               	movwf	___aodiv@divisor+7,c
  3094  000A14  EC85  F006         	call	___aodiv	;wreg free
  3095  000A18  C001  F036         	movff	?___aodiv,dtoa@n
  3096  000A1C  C002  F037         	movff	?___aodiv+1,dtoa@n+1
  3097  000A20  C003  F038         	movff	?___aodiv+2,dtoa@n+2
  3098  000A24  C004  F039         	movff	?___aodiv+3,dtoa@n+3
  3099  000A28  C005  F03A         	movff	?___aodiv+4,dtoa@n+4
  3100  000A2C  C006  F03B         	movff	?___aodiv+5,dtoa@n+5
  3101  000A30  C007  F03C         	movff	?___aodiv+6,dtoa@n+6
  3102  000A34  C008  F03D         	movff	?___aodiv+7,dtoa@n+7
  3103  000A38                     l3091:
  3104                           
  3105                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  3106  000A38  BE3F               	btfsc	dtoa@i+1,7,c
  3107  000A3A  D01F               	goto	u2040
  3108  000A3C  503F               	movf	dtoa@i+1,w,c
  3109  000A3E  E103               	bnz	u2000
  3110  000A40  043E               	decf	dtoa@i,w,c
  3111  000A42  A0D8               	btfss	status,0,c
  3112  000A44  D01A               	goto	u2040
  3113  000A46                     u2000:
  3114  000A46  5036               	movf	dtoa@n,w,c
  3115  000A48  1037               	iorwf	dtoa@n+1,w,c
  3116  000A4A  1038               	iorwf	dtoa@n+2,w,c
  3117  000A4C  1039               	iorwf	dtoa@n+3,w,c
  3118  000A4E  103A               	iorwf	dtoa@n+4,w,c
  3119  000A50  103B               	iorwf	dtoa@n+5,w,c
  3120  000A52  103C               	iorwf	dtoa@n+6,w,c
  3121  000A54  103D               	iorwf	dtoa@n+7,w,c
  3122  000A56  A4D8               	btfss	status,2,c
  3123  000A58  D773               	goto	l3081
  3124  000A5A  BE31               	btfsc	dtoa@p+1,7,c
  3125  000A5C  D005               	goto	u2020
  3126  000A5E  5031               	movf	dtoa@p+1,w,c
  3127  000A60  E102               	bnz	u2021
  3128  000A62  0430               	decf	dtoa@p,w,c
  3129  000A64  B0D8               	btfsc	status,0,c
  3130  000A66                     u2021:
  3131  000A66  D76C               	goto	l3081
  3132  000A68                     u2020:
  3133  000A68  BE33               	btfsc	dtoa@w+1,7,c
  3134  000A6A  D007               	goto	u2040
  3135  000A6C  5033               	movf	dtoa@w+1,w,c
  3136  000A6E  E103               	bnz	u2030
  3137  000A70  0432               	decf	dtoa@w,w,c
  3138  000A72  A0D8               	btfss	status,0,c
  3139  000A74  D002               	goto	u2040
  3140  000A76                     u2030:
  3141  000A76  B257               	btfsc	_flags,1,c
  3142  000A78  D763               	goto	l3081
  3143  000A7A                     u2040:
  3144                           
  3145                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 308:     if
      +                           (s || (flags & (1 << 2))) {
  3146  000A7A  5034               	movf	dtoa@s,w,c
  3147  000A7C  1035               	iorwf	dtoa@s+1,w,c
  3148  000A7E  A4D8               	btfss	status,2,c
  3149  000A80  D002               	goto	u2060
  3150  000A82  A457               	btfss	_flags,2,c
  3151  000A84  D017               	goto	l3115
  3152  000A86                     u2060:
  3153                           
  3154                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 309:       
      +                            --i;
  3155  000A86  063E               	decf	dtoa@i,f,c
  3156  000A88  A0D8               	btfss	status,0,c
  3157  000A8A  063F               	decf	dtoa@i+1,f,c
  3158                           
  3159                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 310:       
      +                            dbuf[i] = s ? '-' : '+';
  3160  000A8C  5034               	movf	dtoa@s,w,c
  3161  000A8E  1035               	iorwf	dtoa@s+1,w,c
  3162  000A90  A4D8               	btfss	status,2,c
  3163  000A92  D004               	goto	l3111
  3164  000A94  0E00               	movlw	0
  3165  000A96  6E2F               	movwf	_dtoa$1172+1,c
  3166  000A98  0E2B               	movlw	43
  3167  000A9A  D003               	goto	L3
  3168  000A9C                     l3111:
  3169  000A9C  0E00               	movlw	0
  3170  000A9E  6E2F               	movwf	_dtoa$1172+1,c
  3171  000AA0  0E2D               	movlw	45
  3172  000AA2                     L3:
  3173  000AA2  6E2E               	movwf	_dtoa$1172,c
  3174  000AA4  0E84               	movlw	low _dbuf
  3175  000AA6  243E               	addwf	dtoa@i,w,c
  3176  000AA8  6ED9               	movwf	fsr2l,c
  3177  000AAA  0E00               	movlw	high _dbuf
  3178  000AAC  203F               	addwfc	dtoa@i+1,w,c
  3179  000AAE  6EDA               	movwf	fsr2h,c
  3180  000AB0  C02E  FFDF         	movff	_dtoa$1172,indf2
  3181  000AB4                     l3115:
  3182                           
  3183                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 314:     re
      +                          turn pad(fp, &dbuf[i], w);
  3184  000AB4  C01C  F011         	movff	dtoa@fp,pad@fp
  3185  000AB8  C01D  F012         	movff	dtoa@fp+1,pad@fp+1
  3186  000ABC  0E84               	movlw	low _dbuf
  3187  000ABE  243E               	addwf	dtoa@i,w,c
  3188  000AC0  6E13               	movwf	pad@buf,c
  3189  000AC2  0E00               	movlw	high _dbuf
  3190  000AC4  203F               	addwfc	dtoa@i+1,w,c
  3191  000AC6  6E14               	movwf	pad@buf+1,c
  3192  000AC8  C032  F015         	movff	dtoa@w,pad@p
  3193  000ACC  C033  F016         	movff	dtoa@w+1,pad@p+1
  3194  000AD0  EC81  F009         	call	_pad	;wreg free
  3195  000AD4  C011  F01C         	movff	?_pad,?_dtoa
  3196  000AD8  C012  F01D         	movff	?_pad+1,?_dtoa+1
  3197  000ADC  0012               	return		;funcret
  3198  000ADE                     __end_of_dtoa:
  3199                           	opt callstack 0
  3200                           
  3201 ;; *************** function _pad *****************
  3202 ;; Defined at:
  3203 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  3204 ;; Parameters:    Size  Location     Type
  3205 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  3206 ;;		 -> sprintf@f(6), 
  3207 ;;  buf             2   18[COMRAM] PTR unsigned char 
  3208 ;;		 -> dbuf(32), 
  3209 ;;  p               2   20[COMRAM] int 
  3210 ;; Auto vars:     Size  Location     Type
  3211 ;;  w               2   25[COMRAM] int 
  3212 ;;  i               2   23[COMRAM] int 
  3213 ;; Return value:  Size  Location     Type
  3214 ;;                  2   16[COMRAM] int 
  3215 ;; Registers used:
  3216 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3217 ;; Tracked objects:
  3218 ;;		On entry : 0/0
  3219 ;;		On exit  : 0/0
  3220 ;;		Unchanged: 0/0
  3221 ;; Data sizes:     COMRAM   BANK0   BANK1
  3222 ;;      Params:         6       0       0
  3223 ;;      Locals:         4       0       0
  3224 ;;      Temps:          1       0       0
  3225 ;;      Totals:        11       0       0
  3226 ;;Total ram usage:       11 bytes
  3227 ;; Hardware stack levels used:    1
  3228 ;; Hardware stack levels required when called:    4
  3229 ;; This function calls:
  3230 ;;		_fputc
  3231 ;;		_fputs
  3232 ;;		_strlen
  3233 ;; This function is called by:
  3234 ;;		_dtoa
  3235 ;;		_xtoa
  3236 ;; This function uses a non-reentrant model
  3237 ;;
  3238                           
  3239                           	psect	text10
  3240  001302                     __ptext10:
  3241                           	opt callstack 0
  3242  001302                     _pad:
  3243                           	opt callstack 22
  3244                           
  3245                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  3246                           
  3247                           ;incstack = 0
  3248  001302  A057               	btfss	_flags,0,c
  3249  001304  D00A               	goto	l2915
  3250                           
  3251                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  3252  001306  C013  F00A         	movff	pad@buf,fputs@s
  3253  00130A  C014  F00B         	movff	pad@buf+1,fputs@s+1
  3254  00130E  C011  F00C         	movff	pad@fp,fputs@fp
  3255  001312  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  3256  001316  EC4C  F00C         	call	_fputs	;wreg free
  3257  00131A                     l2915:
  3258                           
  3259                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  3260  00131A  BE16               	btfsc	pad@p+1,7,c
  3261  00131C  D005               	goto	l2919
  3262  00131E  C015  F01A         	movff	pad@p,pad@w
  3263  001322  C016  F01B         	movff	pad@p+1,pad@w+1
  3264  001326  D004               	goto	l578
  3265  001328                     l2919:
  3266  001328  0E00               	movlw	0
  3267  00132A  6E1B               	movwf	pad@w+1,c
  3268  00132C  0E00               	movlw	0
  3269  00132E  6E1A               	movwf	pad@w,c
  3270  001330                     l578:
  3271                           
  3272                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  3273  001330  0E00               	movlw	0
  3274  001332  6E19               	movwf	pad@i+1,c
  3275  001334  0E00               	movlw	0
  3276  001336  6E18               	movwf	pad@i,c
  3277                           
  3278                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  3279  001338  D00C               	goto	l2925
  3280  00133A                     l2921:
  3281                           
  3282                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  3283  00133A  0E00               	movlw	0
  3284  00133C  6E02               	movwf	fputc@c+1,c
  3285  00133E  0E20               	movlw	32
  3286  001340  6E01               	movwf	fputc@c,c
  3287  001342  C011  F003         	movff	pad@fp,fputc@fp
  3288  001346  C012  F004         	movff	pad@fp+1,fputc@fp+1
  3289  00134A  EC31  F009         	call	_fputc	;wreg free
  3290                           
  3291                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  3292  00134E  4A18               	infsnz	pad@i,f,c
  3293  001350  2A19               	incf	pad@i+1,f,c
  3294  001352                     l2925:
  3295                           
  3296                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  3297  001352  501A               	movf	pad@w,w,c
  3298  001354  5C18               	subwf	pad@i,w,c
  3299  001356  5019               	movf	pad@i+1,w,c
  3300  001358  0A80               	xorlw	128
  3301  00135A  6E17               	movwf	??_pad& (0+255),c
  3302  00135C  501B               	movf	pad@w+1,w,c
  3303  00135E  0A80               	xorlw	128
  3304  001360  5817               	subwfb	??_pad& (0+255),w,c
  3305  001362  A0D8               	btfss	status,0,c
  3306  001364  D7EA               	goto	l2921
  3307                           
  3308                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  3309  001366  B057               	btfsc	_flags,0,c
  3310  001368  D00A               	goto	l2929
  3311                           
  3312                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  3313  00136A  C013  F00A         	movff	pad@buf,fputs@s
  3314  00136E  C014  F00B         	movff	pad@buf+1,fputs@s+1
  3315  001372  C011  F00C         	movff	pad@fp,fputs@fp
  3316  001376  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  3317  00137A  EC4C  F00C         	call	_fputs	;wreg free
  3318  00137E                     l2929:
  3319                           
  3320                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
  3321  00137E  C013  F001         	movff	pad@buf,strlen@s
  3322  001382  C014  F002         	movff	pad@buf+1,strlen@s+1
  3323  001386  EC30  F00D         	call	_strlen	;wreg free
  3324  00138A  501A               	movf	pad@w,w,c
  3325  00138C  2401               	addwf	?_strlen,w,c
  3326  00138E  6E11               	movwf	?_pad,c
  3327  001390  501B               	movf	pad@w+1,w,c
  3328  001392  2002               	addwfc	?_strlen+1,w,c
  3329  001394  6E12               	movwf	?_pad+1,c
  3330  001396  0012               	return		;funcret
  3331  001398                     __end_of_pad:
  3332                           	opt callstack 0
  3333                           
  3334 ;; *************** function _strlen *****************
  3335 ;; Defined at:
  3336 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
  3337 ;; Parameters:    Size  Location     Type
  3338 ;;  s               2    0[COMRAM] PTR const unsigned char 
  3339 ;;		 -> dbuf(32), 
  3340 ;; Auto vars:     Size  Location     Type
  3341 ;;  a               2    2[COMRAM] PTR const unsigned char 
  3342 ;;		 -> dbuf(32), 
  3343 ;; Return value:  Size  Location     Type
  3344 ;;                  2    0[COMRAM] unsigned int 
  3345 ;; Registers used:
  3346 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3347 ;; Tracked objects:
  3348 ;;		On entry : 0/0
  3349 ;;		On exit  : 0/0
  3350 ;;		Unchanged: 0/0
  3351 ;; Data sizes:     COMRAM   BANK0   BANK1
  3352 ;;      Params:         2       0       0
  3353 ;;      Locals:         2       0       0
  3354 ;;      Temps:          0       0       0
  3355 ;;      Totals:         4       0       0
  3356 ;;Total ram usage:        4 bytes
  3357 ;; Hardware stack levels used:    1
  3358 ;; Hardware stack levels required when called:    1
  3359 ;; This function calls:
  3360 ;;		Nothing
  3361 ;; This function is called by:
  3362 ;;		_pad
  3363 ;; This function uses a non-reentrant model
  3364 ;;
  3365                           
  3366                           	psect	text11
  3367  001A60                     __ptext11:
  3368                           	opt callstack 0
  3369  001A60                     _strlen:
  3370                           	opt callstack 24
  3371                           
  3372                           ;incstack = 0
  3373  001A60  C001  F003         	movff	strlen@s,strlen@a
  3374  001A64  C002  F004         	movff	strlen@s+1,strlen@a+1
  3375  001A68  D002               	goto	l2897
  3376  001A6A                     l2895:
  3377  001A6A  4A01               	infsnz	strlen@s,f,c
  3378  001A6C  2A02               	incf	strlen@s+1,f,c
  3379  001A6E                     l2897:
  3380  001A6E  C001  FFD9         	movff	strlen@s,fsr2l
  3381  001A72  C002  FFDA         	movff	strlen@s+1,fsr2h
  3382  001A76  50DF               	movf	indf2,w,c
  3383  001A78  A4D8               	btfss	status,2,c
  3384  001A7A  D7F7               	goto	l2895
  3385  001A7C  5003               	movf	strlen@a,w,c
  3386  001A7E  5C01               	subwf	strlen@s,w,c
  3387  001A80  6E01               	movwf	?_strlen,c
  3388  001A82  5004               	movf	strlen@a+1,w,c
  3389  001A84  5802               	subwfb	strlen@s+1,w,c
  3390  001A86  6E02               	movwf	?_strlen+1,c
  3391  001A88  0012               	return		;funcret
  3392  001A8A                     __end_of_strlen:
  3393                           	opt callstack 0
  3394                           
  3395 ;; *************** function _fputs *****************
  3396 ;; Defined at:
  3397 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputs.c"
  3398 ;; Parameters:    Size  Location     Type
  3399 ;;  s               2    9[COMRAM] PTR const unsigned char 
  3400 ;;		 -> dbuf(32), 
  3401 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
  3402 ;;		 -> sprintf@f(6), 
  3403 ;; Auto vars:     Size  Location     Type
  3404 ;;  i               2   14[COMRAM] int 
  3405 ;;  c               1   13[COMRAM] unsigned char 
  3406 ;; Return value:  Size  Location     Type
  3407 ;;                  2    9[COMRAM] int 
  3408 ;; Registers used:
  3409 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3410 ;; Tracked objects:
  3411 ;;		On entry : 0/0
  3412 ;;		On exit  : 0/0
  3413 ;;		Unchanged: 0/0
  3414 ;; Data sizes:     COMRAM   BANK0   BANK1
  3415 ;;      Params:         4       0       0
  3416 ;;      Locals:         3       0       0
  3417 ;;      Temps:          0       0       0
  3418 ;;      Totals:         7       0       0
  3419 ;;Total ram usage:        7 bytes
  3420 ;; Hardware stack levels used:    1
  3421 ;; Hardware stack levels required when called:    3
  3422 ;; This function calls:
  3423 ;;		_fputc
  3424 ;; This function is called by:
  3425 ;;		_pad
  3426 ;; This function uses a non-reentrant model
  3427 ;;
  3428                           
  3429                           	psect	text12
  3430  001898                     __ptext12:
  3431                           	opt callstack 0
  3432  001898                     _fputs:
  3433                           	opt callstack 22
  3434                           
  3435                           ;incstack = 0
  3436  001898  0E00               	movlw	0
  3437  00189A  6E10               	movwf	fputs@i+1,c
  3438  00189C  0E00               	movlw	0
  3439  00189E  6E0F               	movwf	fputs@i,c
  3440  0018A0  D00B               	goto	l2891
  3441  0018A2                     l2887:
  3442  0018A2  C00E  F001         	movff	fputs@c,fputc@c
  3443  0018A6  6A02               	clrf	fputc@c+1,c
  3444  0018A8  C00C  F003         	movff	fputs@fp,fputc@fp
  3445  0018AC  C00D  F004         	movff	fputs@fp+1,fputc@fp+1
  3446  0018B0  EC31  F009         	call	_fputc	;wreg free
  3447  0018B4  4A0F               	infsnz	fputs@i,f,c
  3448  0018B6  2A10               	incf	fputs@i+1,f,c
  3449  0018B8                     l2891:
  3450  0018B8  500F               	movf	fputs@i,w,c
  3451  0018BA  240A               	addwf	fputs@s,w,c
  3452  0018BC  6ED9               	movwf	fsr2l,c
  3453  0018BE  5010               	movf	fputs@i+1,w,c
  3454  0018C0  200B               	addwfc	fputs@s+1,w,c
  3455  0018C2  6EDA               	movwf	fsr2h,c
  3456  0018C4  50DF               	movf	indf2,w,c
  3457  0018C6  6E0E               	movwf	fputs@c,c
  3458  0018C8  500E               	movf	fputs@c,w,c
  3459  0018CA  B4D8               	btfsc	status,2,c
  3460  0018CC  0012               	return	
  3461  0018CE  D7E9               	goto	l2887
  3462  0018D0                     __end_of_fputs:
  3463                           	opt callstack 0
  3464                           
  3465 ;; *************** function _fputc *****************
  3466 ;; Defined at:
  3467 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
  3468 ;; Parameters:    Size  Location     Type
  3469 ;;  c               2    0[COMRAM] int 
  3470 ;;  fp              2    2[COMRAM] PTR struct _IO_FILE
  3471 ;;		 -> sprintf@f(6), 
  3472 ;; Auto vars:     Size  Location     Type
  3473 ;;		None
  3474 ;; Return value:  Size  Location     Type
  3475 ;;                  2    0[COMRAM] int 
  3476 ;; Registers used:
  3477 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3478 ;; Tracked objects:
  3479 ;;		On entry : 0/0
  3480 ;;		On exit  : 0/0
  3481 ;;		Unchanged: 0/0
  3482 ;; Data sizes:     COMRAM   BANK0   BANK1
  3483 ;;      Params:         4       0       0
  3484 ;;      Locals:         0       0       0
  3485 ;;      Temps:          5       0       0
  3486 ;;      Totals:         9       0       0
  3487 ;;Total ram usage:        9 bytes
  3488 ;; Hardware stack levels used:    1
  3489 ;; Hardware stack levels required when called:    2
  3490 ;; This function calls:
  3491 ;;		_putch
  3492 ;; This function is called by:
  3493 ;;		_pad
  3494 ;;		_vfpfcnvrt
  3495 ;;		_fputs
  3496 ;; This function uses a non-reentrant model
  3497 ;;
  3498                           
  3499                           	psect	text13
  3500  001262                     __ptext13:
  3501                           	opt callstack 0
  3502  001262                     _fputc:
  3503                           	opt callstack 22
  3504                           
  3505                           ;incstack = 0
  3506  001262  5003               	movf	fputc@fp,w,c
  3507  001264  1004               	iorwf	fputc@fp+1,w,c
  3508  001266  B4D8               	btfsc	status,2,c
  3509  001268  D004               	goto	u1560
  3510  00126A  5003               	movf	fputc@fp,w,c
  3511  00126C  1004               	iorwf	fputc@fp+1,w,c
  3512  00126E  A4D8               	btfss	status,2,c
  3513  001270  D004               	goto	l2877
  3514  001272                     u1560:
  3515  001272  5001               	movf	fputc@c,w,c
  3516  001274  ECCA  F00D         	call	_putch
  3517  001278  0012               	return	
  3518  00127A                     l2877:
  3519  00127A  EE20 F004          	lfsr	2,4
  3520  00127E  5003               	movf	fputc@fp,w,c
  3521  001280  26D9               	addwf	fsr2l,f,c
  3522  001282  5004               	movf	fputc@fp+1,w,c
  3523  001284  22DA               	addwfc	fsr2h,f,c
  3524  001286  50DE               	movf	postinc2,w,c
  3525  001288  10DE               	iorwf	postinc2,w,c
  3526  00128A  B4D8               	btfsc	status,2,c
  3527  00128C  D016               	goto	u1580
  3528  00128E  EE20 F004          	lfsr	2,4
  3529  001292  5003               	movf	fputc@fp,w,c
  3530  001294  26D9               	addwf	fsr2l,f,c
  3531  001296  5004               	movf	fputc@fp+1,w,c
  3532  001298  22DA               	addwfc	fsr2h,f,c
  3533  00129A  EE10 F002          	lfsr	1,2
  3534  00129E  5003               	movf	fputc@fp,w,c
  3535  0012A0  26E1               	addwf	fsr1l,f,c
  3536  0012A2  5004               	movf	fputc@fp+1,w,c
  3537  0012A4  22E2               	addwfc	fsr1h,f,c
  3538  0012A6  50DE               	movf	postinc2,w,c
  3539  0012A8  5CE6               	subwf	postinc1,w,c
  3540  0012AA  50E6               	movf	postinc1,w,c
  3541  0012AC  0A80               	xorlw	128
  3542  0012AE  6E09               	movwf	(??_fputc+4)& (0+255),c
  3543  0012B0  50DE               	movf	postinc2,w,c
  3544  0012B2  0A80               	xorlw	128
  3545  0012B4  5809               	subwfb	(??_fputc+4)& (0+255),w,c
  3546  0012B6  B0D8               	btfsc	status,0,c
  3547  0012B8  0012               	return	
  3548  0012BA                     u1580:
  3549  0012BA  EE20 F002          	lfsr	2,2
  3550  0012BE  5003               	movf	fputc@fp,w,c
  3551  0012C0  26D9               	addwf	fsr2l,f,c
  3552  0012C2  5004               	movf	fputc@fp+1,w,c
  3553  0012C4  22DA               	addwfc	fsr2h,f,c
  3554  0012C6  CFDE F005          	movff	postinc2,??_fputc
  3555  0012CA  CFDD F006          	movff	postdec2,??_fputc+1
  3556  0012CE  C003  FFD9         	movff	fputc@fp,fsr2l
  3557  0012D2  C004  FFDA         	movff	fputc@fp+1,fsr2h
  3558  0012D6  CFDE F007          	movff	postinc2,??_fputc+2
  3559  0012DA  CFDD F008          	movff	postdec2,??_fputc+3
  3560  0012DE  5005               	movf	??_fputc,w,c
  3561  0012E0  2407               	addwf	??_fputc+2,w,c
  3562  0012E2  6ED9               	movwf	fsr2l,c
  3563  0012E4  5006               	movf	??_fputc+1,w,c
  3564  0012E6  2008               	addwfc	??_fputc+3,w,c
  3565  0012E8  6EDA               	movwf	fsr2h,c
  3566  0012EA  C001  FFDF         	movff	fputc@c,indf2
  3567  0012EE  EE20 F002          	lfsr	2,2
  3568  0012F2  5003               	movf	fputc@fp,w,c
  3569  0012F4  26D9               	addwf	fsr2l,f,c
  3570  0012F6  5004               	movf	fputc@fp+1,w,c
  3571  0012F8  22DA               	addwfc	fsr2h,f,c
  3572  0012FA  2ADE               	incf	postinc2,f,c
  3573  0012FC  0E00               	movlw	0
  3574  0012FE  22DD               	addwfc	postdec2,f,c
  3575  001300  0012               	return		;funcret
  3576  001302                     __end_of_fputc:
  3577                           	opt callstack 0
  3578                           
  3579 ;; *************** function _putch *****************
  3580 ;; Defined at:
  3581 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\putch.c"
  3582 ;; Parameters:    Size  Location     Type
  3583 ;;  c               1    wreg     unsigned char 
  3584 ;; Auto vars:     Size  Location     Type
  3585 ;;  c               1    0[COMRAM] unsigned char 
  3586 ;; Return value:  Size  Location     Type
  3587 ;;                  1    wreg      void 
  3588 ;; Registers used:
  3589 ;;		wreg
  3590 ;; Tracked objects:
  3591 ;;		On entry : 0/0
  3592 ;;		On exit  : 0/0
  3593 ;;		Unchanged: 0/0
  3594 ;; Data sizes:     COMRAM   BANK0   BANK1
  3595 ;;      Params:         0       0       0
  3596 ;;      Locals:         0       0       0
  3597 ;;      Temps:          0       0       0
  3598 ;;      Totals:         0       0       0
  3599 ;;Total ram usage:        0 bytes
  3600 ;; Hardware stack levels used:    1
  3601 ;; Hardware stack levels required when called:    1
  3602 ;; This function calls:
  3603 ;;		Nothing
  3604 ;; This function is called by:
  3605 ;;		_fputc
  3606 ;; This function uses a non-reentrant model
  3607 ;;
  3608                           
  3609                           	psect	text14
  3610  001B94                     __ptext14:
  3611                           	opt callstack 0
  3612  001B94                     _putch:
  3613                           	opt callstack 22
  3614                           
  3615                           ;incstack = 0
  3616  001B94  0012               	return		;funcret
  3617  001B96                     __end_of_putch:
  3618                           	opt callstack 0
  3619                           
  3620 ;; *************** function _abs *****************
  3621 ;; Defined at:
  3622 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\abs.c"
  3623 ;; Parameters:    Size  Location     Type
  3624 ;;  a               2   18[COMRAM] int 
  3625 ;; Auto vars:     Size  Location     Type
  3626 ;;		None
  3627 ;; Return value:  Size  Location     Type
  3628 ;;                  2   18[COMRAM] int 
  3629 ;; Registers used:
  3630 ;;		wreg, status,2, status,0
  3631 ;; Tracked objects:
  3632 ;;		On entry : 0/0
  3633 ;;		On exit  : 0/0
  3634 ;;		Unchanged: 0/0
  3635 ;; Data sizes:     COMRAM   BANK0   BANK1
  3636 ;;      Params:         2       0       0
  3637 ;;      Locals:         0       0       0
  3638 ;;      Temps:          2       0       0
  3639 ;;      Totals:         4       0       0
  3640 ;;Total ram usage:        4 bytes
  3641 ;; Hardware stack levels used:    1
  3642 ;; Hardware stack levels required when called:    1
  3643 ;; This function calls:
  3644 ;;		Nothing
  3645 ;; This function is called by:
  3646 ;;		_main
  3647 ;;		_dtoa
  3648 ;; This function uses a non-reentrant model
  3649 ;;
  3650                           
  3651                           	psect	text15
  3652  001970                     __ptext15:
  3653                           	opt callstack 0
  3654  001970                     _abs:
  3655                           	opt callstack 25
  3656                           
  3657                           ;incstack = 0
  3658  001970  BE14               	btfsc	abs@a+1,7,c
  3659  001972  D005               	goto	u1630
  3660  001974  5014               	movf	abs@a+1,w,c
  3661  001976  E110               	bnz	l1356
  3662  001978  0413               	decf	abs@a,w,c
  3663  00197A  B0D8               	btfsc	status,0,c
  3664  00197C  D00D               	goto	l1356
  3665  00197E                     u1630:
  3666  00197E  C013  F015         	movff	abs@a,??_abs
  3667  001982  C014  F016         	movff	abs@a+1,??_abs+1
  3668  001986  1E15               	comf	??_abs,f,c
  3669  001988  1E16               	comf	??_abs+1,f,c
  3670  00198A  4A15               	infsnz	??_abs,f,c
  3671  00198C  2A16               	incf	??_abs+1,f,c
  3672  00198E  C015  F013         	movff	??_abs,?_abs
  3673  001992  C016  F014         	movff	??_abs+1,?_abs+1
  3674  001996  0012               	return	
  3675  001998                     l1356:
  3676  001998  C013  F013         	movff	abs@a,?_abs
  3677  00199C  C014  F014         	movff	abs@a+1,?_abs+1
  3678  0019A0  0012               	return		;funcret
  3679  0019A2                     __end_of_abs:
  3680                           	opt callstack 0
  3681                           
  3682 ;; *************** function ___aomod *****************
  3683 ;; Defined at:
  3684 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aomod.c"
  3685 ;; Parameters:    Size  Location     Type
  3686 ;;  dividend        8    0[COMRAM] long long 
  3687 ;;  divisor         8    8[COMRAM] long long 
  3688 ;; Auto vars:     Size  Location     Type
  3689 ;;  sign            1   17[COMRAM] unsigned char 
  3690 ;;  counter         1   16[COMRAM] unsigned char 
  3691 ;; Return value:  Size  Location     Type
  3692 ;;                  8    0[COMRAM] long long 
  3693 ;; Registers used:
  3694 ;;		wreg, status,2, status,0
  3695 ;; Tracked objects:
  3696 ;;		On entry : 0/0
  3697 ;;		On exit  : 0/0
  3698 ;;		Unchanged: 0/0
  3699 ;; Data sizes:     COMRAM   BANK0   BANK1
  3700 ;;      Params:        16       0       0
  3701 ;;      Locals:         2       0       0
  3702 ;;      Temps:          0       0       0
  3703 ;;      Totals:        18       0       0
  3704 ;;Total ram usage:       18 bytes
  3705 ;; Hardware stack levels used:    1
  3706 ;; Hardware stack levels required when called:    1
  3707 ;; This function calls:
  3708 ;;		Nothing
  3709 ;; This function is called by:
  3710 ;;		_dtoa
  3711 ;; This function uses a non-reentrant model
  3712 ;;
  3713                           
  3714                           	psect	text16
  3715  000F92                     __ptext16:
  3716                           	opt callstack 0
  3717  000F92                     ___aomod:
  3718                           	opt callstack 25
  3719                           
  3720                           ;incstack = 0
  3721  000F92  0E00               	movlw	0
  3722  000F94  6E12               	movwf	___aomod@sign,c
  3723  000F96  AE08               	btfss	___aomod@dividend+7,7,c
  3724  000F98  D012               	goto	l3013
  3725  000F9A  1E08               	comf	___aomod@dividend+7,f,c
  3726  000F9C  1E07               	comf	___aomod@dividend+6,f,c
  3727  000F9E  1E06               	comf	___aomod@dividend+5,f,c
  3728  000FA0  1E05               	comf	___aomod@dividend+4,f,c
  3729  000FA2  1E04               	comf	___aomod@dividend+3,f,c
  3730  000FA4  1E03               	comf	___aomod@dividend+2,f,c
  3731  000FA6  1E02               	comf	___aomod@dividend+1,f,c
  3732  000FA8  6C01               	negf	___aomod@dividend,c
  3733  000FAA  0E00               	movlw	0
  3734  000FAC  2202               	addwfc	___aomod@dividend+1,f,c
  3735  000FAE  2203               	addwfc	___aomod@dividend+2,f,c
  3736  000FB0  2204               	addwfc	___aomod@dividend+3,f,c
  3737  000FB2  2205               	addwfc	___aomod@dividend+4,f,c
  3738  000FB4  2206               	addwfc	___aomod@dividend+5,f,c
  3739  000FB6  2207               	addwfc	___aomod@dividend+6,f,c
  3740  000FB8  2208               	addwfc	___aomod@dividend+7,f,c
  3741  000FBA  0E01               	movlw	1
  3742  000FBC  6E12               	movwf	___aomod@sign,c
  3743  000FBE                     l3013:
  3744  000FBE  AE10               	btfss	___aomod@divisor+7,7,c
  3745  000FC0  D010               	goto	l3017
  3746  000FC2  1E10               	comf	___aomod@divisor+7,f,c
  3747  000FC4  1E0F               	comf	___aomod@divisor+6,f,c
  3748  000FC6  1E0E               	comf	___aomod@divisor+5,f,c
  3749  000FC8  1E0D               	comf	___aomod@divisor+4,f,c
  3750  000FCA  1E0C               	comf	___aomod@divisor+3,f,c
  3751  000FCC  1E0B               	comf	___aomod@divisor+2,f,c
  3752  000FCE  1E0A               	comf	___aomod@divisor+1,f,c
  3753  000FD0  6C09               	negf	___aomod@divisor,c
  3754  000FD2  0E00               	movlw	0
  3755  000FD4  220A               	addwfc	___aomod@divisor+1,f,c
  3756  000FD6  220B               	addwfc	___aomod@divisor+2,f,c
  3757  000FD8  220C               	addwfc	___aomod@divisor+3,f,c
  3758  000FDA  220D               	addwfc	___aomod@divisor+4,f,c
  3759  000FDC  220E               	addwfc	___aomod@divisor+5,f,c
  3760  000FDE  220F               	addwfc	___aomod@divisor+6,f,c
  3761  000FE0  2210               	addwfc	___aomod@divisor+7,f,c
  3762  000FE2                     l3017:
  3763  000FE2  5009               	movf	___aomod@divisor,w,c
  3764  000FE4  100A               	iorwf	___aomod@divisor+1,w,c
  3765  000FE6  100B               	iorwf	___aomod@divisor+2,w,c
  3766  000FE8  100C               	iorwf	___aomod@divisor+3,w,c
  3767  000FEA  100D               	iorwf	___aomod@divisor+4,w,c
  3768  000FEC  100E               	iorwf	___aomod@divisor+5,w,c
  3769  000FEE  100F               	iorwf	___aomod@divisor+6,w,c
  3770  000FF0  1010               	iorwf	___aomod@divisor+7,w,c
  3771  000FF2  B4D8               	btfsc	status,2,c
  3772  000FF4  D03C               	goto	l3033
  3773  000FF6  0E01               	movlw	1
  3774  000FF8  6E11               	movwf	___aomod@counter,c
  3775  000FFA  D00A               	goto	l3023
  3776  000FFC                     l3021:
  3777  000FFC  90D8               	bcf	status,0,c
  3778  000FFE  3609               	rlcf	___aomod@divisor,f,c
  3779  001000  360A               	rlcf	___aomod@divisor+1,f,c
  3780  001002  360B               	rlcf	___aomod@divisor+2,f,c
  3781  001004  360C               	rlcf	___aomod@divisor+3,f,c
  3782  001006  360D               	rlcf	___aomod@divisor+4,f,c
  3783  001008  360E               	rlcf	___aomod@divisor+5,f,c
  3784  00100A  360F               	rlcf	___aomod@divisor+6,f,c
  3785  00100C  3610               	rlcf	___aomod@divisor+7,f,c
  3786  00100E  2A11               	incf	___aomod@counter,f,c
  3787  001010                     l3023:
  3788  001010  AE10               	btfss	___aomod@divisor+7,7,c
  3789  001012  D7F4               	goto	l3021
  3790  001014                     u1870:
  3791  001014  5009               	movf	___aomod@divisor,w,c
  3792  001016  5C01               	subwf	___aomod@dividend,w,c
  3793  001018  500A               	movf	___aomod@divisor+1,w,c
  3794  00101A  5802               	subwfb	___aomod@dividend+1,w,c
  3795  00101C  500B               	movf	___aomod@divisor+2,w,c
  3796  00101E  5803               	subwfb	___aomod@dividend+2,w,c
  3797  001020  500C               	movf	___aomod@divisor+3,w,c
  3798  001022  5804               	subwfb	___aomod@dividend+3,w,c
  3799  001024  500D               	movf	___aomod@divisor+4,w,c
  3800  001026  5805               	subwfb	___aomod@dividend+4,w,c
  3801  001028  500E               	movf	___aomod@divisor+5,w,c
  3802  00102A  5806               	subwfb	___aomod@dividend+5,w,c
  3803  00102C  500F               	movf	___aomod@divisor+6,w,c
  3804  00102E  5807               	subwfb	___aomod@dividend+6,w,c
  3805  001030  5010               	movf	___aomod@divisor+7,w,c
  3806  001032  5808               	subwfb	___aomod@dividend+7,w,c
  3807  001034  A0D8               	btfss	status,0,c
  3808  001036  D010               	goto	l3029
  3809  001038  5009               	movf	___aomod@divisor,w,c
  3810  00103A  5E01               	subwf	___aomod@dividend,f,c
  3811  00103C  500A               	movf	___aomod@divisor+1,w,c
  3812  00103E  5A02               	subwfb	___aomod@dividend+1,f,c
  3813  001040  500B               	movf	___aomod@divisor+2,w,c
  3814  001042  5A03               	subwfb	___aomod@dividend+2,f,c
  3815  001044  500C               	movf	___aomod@divisor+3,w,c
  3816  001046  5A04               	subwfb	___aomod@dividend+3,f,c
  3817  001048  500D               	movf	___aomod@divisor+4,w,c
  3818  00104A  5A05               	subwfb	___aomod@dividend+4,f,c
  3819  00104C  500E               	movf	___aomod@divisor+5,w,c
  3820  00104E  5A06               	subwfb	___aomod@dividend+5,f,c
  3821  001050  500F               	movf	___aomod@divisor+6,w,c
  3822  001052  5A07               	subwfb	___aomod@dividend+6,f,c
  3823  001054  5010               	movf	___aomod@divisor+7,w,c
  3824  001056  5A08               	subwfb	___aomod@dividend+7,f,c
  3825  001058                     l3029:
  3826  001058  90D8               	bcf	status,0,c
  3827  00105A  3210               	rrcf	___aomod@divisor+7,f,c
  3828  00105C  320F               	rrcf	___aomod@divisor+6,f,c
  3829  00105E  320E               	rrcf	___aomod@divisor+5,f,c
  3830  001060  320D               	rrcf	___aomod@divisor+4,f,c
  3831  001062  320C               	rrcf	___aomod@divisor+3,f,c
  3832  001064  320B               	rrcf	___aomod@divisor+2,f,c
  3833  001066  320A               	rrcf	___aomod@divisor+1,f,c
  3834  001068  3209               	rrcf	___aomod@divisor,f,c
  3835  00106A  2E11               	decfsz	___aomod@counter,f,c
  3836  00106C  D7D3               	goto	u1870
  3837  00106E                     l3033:
  3838  00106E  5012               	movf	___aomod@sign,w,c
  3839  001070  B4D8               	btfsc	status,2,c
  3840  001072  D010               	goto	l3037
  3841  001074  1E08               	comf	___aomod@dividend+7,f,c
  3842  001076  1E07               	comf	___aomod@dividend+6,f,c
  3843  001078  1E06               	comf	___aomod@dividend+5,f,c
  3844  00107A  1E05               	comf	___aomod@dividend+4,f,c
  3845  00107C  1E04               	comf	___aomod@dividend+3,f,c
  3846  00107E  1E03               	comf	___aomod@dividend+2,f,c
  3847  001080  1E02               	comf	___aomod@dividend+1,f,c
  3848  001082  6C01               	negf	___aomod@dividend,c
  3849  001084  0E00               	movlw	0
  3850  001086  2202               	addwfc	___aomod@dividend+1,f,c
  3851  001088  2203               	addwfc	___aomod@dividend+2,f,c
  3852  00108A  2204               	addwfc	___aomod@dividend+3,f,c
  3853  00108C  2205               	addwfc	___aomod@dividend+4,f,c
  3854  00108E  2206               	addwfc	___aomod@dividend+5,f,c
  3855  001090  2207               	addwfc	___aomod@dividend+6,f,c
  3856  001092  2208               	addwfc	___aomod@dividend+7,f,c
  3857  001094                     l3037:
  3858  001094  C001  F001         	movff	___aomod@dividend,?___aomod
  3859  001098  C002  F002         	movff	___aomod@dividend+1,?___aomod+1
  3860  00109C  C003  F003         	movff	___aomod@dividend+2,?___aomod+2
  3861  0010A0  C004  F004         	movff	___aomod@dividend+3,?___aomod+3
  3862  0010A4  C005  F005         	movff	___aomod@dividend+4,?___aomod+4
  3863  0010A8  C006  F006         	movff	___aomod@dividend+5,?___aomod+5
  3864  0010AC  C007  F007         	movff	___aomod@dividend+6,?___aomod+6
  3865  0010B0  C008  F008         	movff	___aomod@dividend+7,?___aomod+7
  3866  0010B4  0012               	return		;funcret
  3867  0010B6                     __end_of___aomod:
  3868                           	opt callstack 0
  3869                           
  3870 ;; *************** function ___aodiv *****************
  3871 ;; Defined at:
  3872 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aodiv.c"
  3873 ;; Parameters:    Size  Location     Type
  3874 ;;  dividend        8    0[COMRAM] long long 
  3875 ;;  divisor         8    8[COMRAM] long long 
  3876 ;; Auto vars:     Size  Location     Type
  3877 ;;  quotient        8   18[COMRAM] long long 
  3878 ;;  sign            1   17[COMRAM] unsigned char 
  3879 ;;  counter         1   16[COMRAM] unsigned char 
  3880 ;; Return value:  Size  Location     Type
  3881 ;;                  8    0[COMRAM] long long 
  3882 ;; Registers used:
  3883 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3884 ;; Tracked objects:
  3885 ;;		On entry : 0/0
  3886 ;;		On exit  : 0/0
  3887 ;;		Unchanged: 0/0
  3888 ;; Data sizes:     COMRAM   BANK0   BANK1
  3889 ;;      Params:        16       0       0
  3890 ;;      Locals:        10       0       0
  3891 ;;      Temps:          0       0       0
  3892 ;;      Totals:        26       0       0
  3893 ;;Total ram usage:       26 bytes
  3894 ;; Hardware stack levels used:    1
  3895 ;; Hardware stack levels required when called:    1
  3896 ;; This function calls:
  3897 ;;		Nothing
  3898 ;; This function is called by:
  3899 ;;		_dtoa
  3900 ;; This function uses a non-reentrant model
  3901 ;;
  3902                           
  3903                           	psect	text17
  3904  000D0A                     __ptext17:
  3905                           	opt callstack 0
  3906  000D0A                     ___aodiv:
  3907                           	opt callstack 25
  3908                           
  3909                           ;incstack = 0
  3910  000D0A  0E00               	movlw	0
  3911  000D0C  6E12               	movwf	___aodiv@sign,c
  3912  000D0E  AE10               	btfss	___aodiv@divisor+7,7,c
  3913  000D10  D012               	goto	l2969
  3914  000D12  1E10               	comf	___aodiv@divisor+7,f,c
  3915  000D14  1E0F               	comf	___aodiv@divisor+6,f,c
  3916  000D16  1E0E               	comf	___aodiv@divisor+5,f,c
  3917  000D18  1E0D               	comf	___aodiv@divisor+4,f,c
  3918  000D1A  1E0C               	comf	___aodiv@divisor+3,f,c
  3919  000D1C  1E0B               	comf	___aodiv@divisor+2,f,c
  3920  000D1E  1E0A               	comf	___aodiv@divisor+1,f,c
  3921  000D20  6C09               	negf	___aodiv@divisor,c
  3922  000D22  0E00               	movlw	0
  3923  000D24  220A               	addwfc	___aodiv@divisor+1,f,c
  3924  000D26  220B               	addwfc	___aodiv@divisor+2,f,c
  3925  000D28  220C               	addwfc	___aodiv@divisor+3,f,c
  3926  000D2A  220D               	addwfc	___aodiv@divisor+4,f,c
  3927  000D2C  220E               	addwfc	___aodiv@divisor+5,f,c
  3928  000D2E  220F               	addwfc	___aodiv@divisor+6,f,c
  3929  000D30  2210               	addwfc	___aodiv@divisor+7,f,c
  3930  000D32  0E01               	movlw	1
  3931  000D34  6E12               	movwf	___aodiv@sign,c
  3932  000D36                     l2969:
  3933  000D36  AE08               	btfss	___aodiv@dividend+7,7,c
  3934  000D38  D012               	goto	l2975
  3935  000D3A  1E08               	comf	___aodiv@dividend+7,f,c
  3936  000D3C  1E07               	comf	___aodiv@dividend+6,f,c
  3937  000D3E  1E06               	comf	___aodiv@dividend+5,f,c
  3938  000D40  1E05               	comf	___aodiv@dividend+4,f,c
  3939  000D42  1E04               	comf	___aodiv@dividend+3,f,c
  3940  000D44  1E03               	comf	___aodiv@dividend+2,f,c
  3941  000D46  1E02               	comf	___aodiv@dividend+1,f,c
  3942  000D48  6C01               	negf	___aodiv@dividend,c
  3943  000D4A  0E00               	movlw	0
  3944  000D4C  2202               	addwfc	___aodiv@dividend+1,f,c
  3945  000D4E  2203               	addwfc	___aodiv@dividend+2,f,c
  3946  000D50  2204               	addwfc	___aodiv@dividend+3,f,c
  3947  000D52  2205               	addwfc	___aodiv@dividend+4,f,c
  3948  000D54  2206               	addwfc	___aodiv@dividend+5,f,c
  3949  000D56  2207               	addwfc	___aodiv@dividend+6,f,c
  3950  000D58  2208               	addwfc	___aodiv@dividend+7,f,c
  3951  000D5A  0E01               	movlw	1
  3952  000D5C  1A12               	xorwf	___aodiv@sign,f,c
  3953  000D5E                     l2975:
  3954  000D5E  EE20  F013         	lfsr	2,___aodiv@quotient
  3955  000D62  0E07               	movlw	7
  3956  000D64                     u1791:
  3957  000D64  6ADE               	clrf	postinc2,c
  3958  000D66  06E8               	decf	wreg,f,c
  3959  000D68  E2FD               	bc	u1791
  3960  000D6A  5009               	movf	___aodiv@divisor,w,c
  3961  000D6C  100A               	iorwf	___aodiv@divisor+1,w,c
  3962  000D6E  100B               	iorwf	___aodiv@divisor+2,w,c
  3963  000D70  100C               	iorwf	___aodiv@divisor+3,w,c
  3964  000D72  100D               	iorwf	___aodiv@divisor+4,w,c
  3965  000D74  100E               	iorwf	___aodiv@divisor+5,w,c
  3966  000D76  100F               	iorwf	___aodiv@divisor+6,w,c
  3967  000D78  1010               	iorwf	___aodiv@divisor+7,w,c
  3968  000D7A  B4D8               	btfsc	status,2,c
  3969  000D7C  D046               	goto	l2997
  3970  000D7E  0E01               	movlw	1
  3971  000D80  6E11               	movwf	___aodiv@counter,c
  3972  000D82  D00A               	goto	l2983
  3973  000D84                     l2981:
  3974  000D84  90D8               	bcf	status,0,c
  3975  000D86  3609               	rlcf	___aodiv@divisor,f,c
  3976  000D88  360A               	rlcf	___aodiv@divisor+1,f,c
  3977  000D8A  360B               	rlcf	___aodiv@divisor+2,f,c
  3978  000D8C  360C               	rlcf	___aodiv@divisor+3,f,c
  3979  000D8E  360D               	rlcf	___aodiv@divisor+4,f,c
  3980  000D90  360E               	rlcf	___aodiv@divisor+5,f,c
  3981  000D92  360F               	rlcf	___aodiv@divisor+6,f,c
  3982  000D94  3610               	rlcf	___aodiv@divisor+7,f,c
  3983  000D96  2A11               	incf	___aodiv@counter,f,c
  3984  000D98                     l2983:
  3985  000D98  AE10               	btfss	___aodiv@divisor+7,7,c
  3986  000D9A  D7F4               	goto	l2981
  3987  000D9C                     u1810:
  3988  000D9C  90D8               	bcf	status,0,c
  3989  000D9E  3613               	rlcf	___aodiv@quotient,f,c
  3990  000DA0  3614               	rlcf	___aodiv@quotient+1,f,c
  3991  000DA2  3615               	rlcf	___aodiv@quotient+2,f,c
  3992  000DA4  3616               	rlcf	___aodiv@quotient+3,f,c
  3993  000DA6  3617               	rlcf	___aodiv@quotient+4,f,c
  3994  000DA8  3618               	rlcf	___aodiv@quotient+5,f,c
  3995  000DAA  3619               	rlcf	___aodiv@quotient+6,f,c
  3996  000DAC  361A               	rlcf	___aodiv@quotient+7,f,c
  3997  000DAE  5009               	movf	___aodiv@divisor,w,c
  3998  000DB0  5C01               	subwf	___aodiv@dividend,w,c
  3999  000DB2  500A               	movf	___aodiv@divisor+1,w,c
  4000  000DB4  5802               	subwfb	___aodiv@dividend+1,w,c
  4001  000DB6  500B               	movf	___aodiv@divisor+2,w,c
  4002  000DB8  5803               	subwfb	___aodiv@dividend+2,w,c
  4003  000DBA  500C               	movf	___aodiv@divisor+3,w,c
  4004  000DBC  5804               	subwfb	___aodiv@dividend+3,w,c
  4005  000DBE  500D               	movf	___aodiv@divisor+4,w,c
  4006  000DC0  5805               	subwfb	___aodiv@dividend+4,w,c
  4007  000DC2  500E               	movf	___aodiv@divisor+5,w,c
  4008  000DC4  5806               	subwfb	___aodiv@dividend+5,w,c
  4009  000DC6  500F               	movf	___aodiv@divisor+6,w,c
  4010  000DC8  5807               	subwfb	___aodiv@dividend+6,w,c
  4011  000DCA  5010               	movf	___aodiv@divisor+7,w,c
  4012  000DCC  5808               	subwfb	___aodiv@dividend+7,w,c
  4013  000DCE  A0D8               	btfss	status,0,c
  4014  000DD0  D011               	goto	l2993
  4015  000DD2  5009               	movf	___aodiv@divisor,w,c
  4016  000DD4  5E01               	subwf	___aodiv@dividend,f,c
  4017  000DD6  500A               	movf	___aodiv@divisor+1,w,c
  4018  000DD8  5A02               	subwfb	___aodiv@dividend+1,f,c
  4019  000DDA  500B               	movf	___aodiv@divisor+2,w,c
  4020  000DDC  5A03               	subwfb	___aodiv@dividend+2,f,c
  4021  000DDE  500C               	movf	___aodiv@divisor+3,w,c
  4022  000DE0  5A04               	subwfb	___aodiv@dividend+3,f,c
  4023  000DE2  500D               	movf	___aodiv@divisor+4,w,c
  4024  000DE4  5A05               	subwfb	___aodiv@dividend+4,f,c
  4025  000DE6  500E               	movf	___aodiv@divisor+5,w,c
  4026  000DE8  5A06               	subwfb	___aodiv@dividend+5,f,c
  4027  000DEA  500F               	movf	___aodiv@divisor+6,w,c
  4028  000DEC  5A07               	subwfb	___aodiv@dividend+6,f,c
  4029  000DEE  5010               	movf	___aodiv@divisor+7,w,c
  4030  000DF0  5A08               	subwfb	___aodiv@dividend+7,f,c
  4031  000DF2  8013               	bsf	___aodiv@quotient,0,c
  4032  000DF4                     l2993:
  4033  000DF4  90D8               	bcf	status,0,c
  4034  000DF6  3210               	rrcf	___aodiv@divisor+7,f,c
  4035  000DF8  320F               	rrcf	___aodiv@divisor+6,f,c
  4036  000DFA  320E               	rrcf	___aodiv@divisor+5,f,c
  4037  000DFC  320D               	rrcf	___aodiv@divisor+4,f,c
  4038  000DFE  320C               	rrcf	___aodiv@divisor+3,f,c
  4039  000E00  320B               	rrcf	___aodiv@divisor+2,f,c
  4040  000E02  320A               	rrcf	___aodiv@divisor+1,f,c
  4041  000E04  3209               	rrcf	___aodiv@divisor,f,c
  4042  000E06  2E11               	decfsz	___aodiv@counter,f,c
  4043  000E08  D7C9               	goto	u1810
  4044  000E0A                     l2997:
  4045  000E0A  5012               	movf	___aodiv@sign,w,c
  4046  000E0C  B4D8               	btfsc	status,2,c
  4047  000E0E  D010               	goto	l3001
  4048  000E10  1E1A               	comf	___aodiv@quotient+7,f,c
  4049  000E12  1E19               	comf	___aodiv@quotient+6,f,c
  4050  000E14  1E18               	comf	___aodiv@quotient+5,f,c
  4051  000E16  1E17               	comf	___aodiv@quotient+4,f,c
  4052  000E18  1E16               	comf	___aodiv@quotient+3,f,c
  4053  000E1A  1E15               	comf	___aodiv@quotient+2,f,c
  4054  000E1C  1E14               	comf	___aodiv@quotient+1,f,c
  4055  000E1E  6C13               	negf	___aodiv@quotient,c
  4056  000E20  0E00               	movlw	0
  4057  000E22  2214               	addwfc	___aodiv@quotient+1,f,c
  4058  000E24  2215               	addwfc	___aodiv@quotient+2,f,c
  4059  000E26  2216               	addwfc	___aodiv@quotient+3,f,c
  4060  000E28  2217               	addwfc	___aodiv@quotient+4,f,c
  4061  000E2A  2218               	addwfc	___aodiv@quotient+5,f,c
  4062  000E2C  2219               	addwfc	___aodiv@quotient+6,f,c
  4063  000E2E  221A               	addwfc	___aodiv@quotient+7,f,c
  4064  000E30                     l3001:
  4065  000E30  C013  F001         	movff	___aodiv@quotient,?___aodiv
  4066  000E34  C014  F002         	movff	___aodiv@quotient+1,?___aodiv+1
  4067  000E38  C015  F003         	movff	___aodiv@quotient+2,?___aodiv+2
  4068  000E3C  C016  F004         	movff	___aodiv@quotient+3,?___aodiv+3
  4069  000E40  C017  F005         	movff	___aodiv@quotient+4,?___aodiv+4
  4070  000E44  C018  F006         	movff	___aodiv@quotient+5,?___aodiv+5
  4071  000E48  C019  F007         	movff	___aodiv@quotient+6,?___aodiv+6
  4072  000E4C  C01A  F008         	movff	___aodiv@quotient+7,?___aodiv+7
  4073  000E50  0012               	return		;funcret
  4074  000E52                     __end_of___aodiv:
  4075                           	opt callstack 0
  4076                           
  4077 ;; *************** function _atoi *****************
  4078 ;; Defined at:
  4079 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\atoi.c"
  4080 ;; Parameters:    Size  Location     Type
  4081 ;;  s               2    7[COMRAM] PTR const unsigned char 
  4082 ;;		 -> STR_11(9), STR_10(9), STR_9(9), STR_8(9), 
  4083 ;;		 -> STR_7(9), STR_6(9), STR_5(9), STR_4(9), 
  4084 ;;		 -> STR_3(8), STR_2(8), STR_1(8), 
  4085 ;; Auto vars:     Size  Location     Type
  4086 ;;  n               2   20[COMRAM] int 
  4087 ;;  neg             2   13[COMRAM] int 
  4088 ;; Return value:  Size  Location     Type
  4089 ;;                  2    7[COMRAM] int 
  4090 ;; Registers used:
  4091 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4092 ;; Tracked objects:
  4093 ;;		On entry : 0/0
  4094 ;;		On exit  : 0/0
  4095 ;;		Unchanged: 0/0
  4096 ;; Data sizes:     COMRAM   BANK0   BANK1
  4097 ;;      Params:         2       0       0
  4098 ;;      Locals:         9       0       0
  4099 ;;      Temps:          4       0       0
  4100 ;;      Totals:        15       0       0
  4101 ;;Total ram usage:       15 bytes
  4102 ;; Hardware stack levels used:    1
  4103 ;; Hardware stack levels required when called:    2
  4104 ;; This function calls:
  4105 ;;		___wmul
  4106 ;;		_isdigit
  4107 ;;		_isspace
  4108 ;; This function is called by:
  4109 ;;		_vfpfcnvrt
  4110 ;; This function uses a non-reentrant model
  4111 ;;
  4112                           
  4113                           	psect	text18
  4114  000E52                     __ptext18:
  4115                           	opt callstack 0
  4116  000E52                     _atoi:
  4117                           	opt callstack 25
  4118                           
  4119                           ;incstack = 0
  4120  000E52  0E00               	movlw	0
  4121  000E54  6E16               	movwf	atoi@n+1,c
  4122  000E56  0E00               	movlw	0
  4123  000E58  6E15               	movwf	atoi@n,c
  4124  000E5A  0E00               	movlw	0
  4125  000E5C  6E0F               	movwf	atoi@neg+1,c
  4126  000E5E  0E00               	movlw	0
  4127  000E60  6E0E               	movwf	atoi@neg,c
  4128  000E62  D002               	goto	l3189
  4129  000E64                     l3187:
  4130  000E64  4A08               	infsnz	atoi@s,f,c
  4131  000E66  2A09               	incf	atoi@s+1,f,c
  4132  000E68                     l3189:
  4133  000E68  0E01               	movlw	1
  4134  000E6A  6E14               	movwf	_atoi$1657,c
  4135  000E6C  C008  FFF6         	movff	atoi@s,tblptrl
  4136  000E70  C009  FFF7         	movff	atoi@s+1,tblptrh
  4137  000E74                     	if	0	;tblptru may be non-zero
  4138  000E74                     	endif
  4139  000E74                     	if	0	;tblptru may be non-zero
  4140  000E74                     	endif
  4141  000E74  0008               	tblrd		*
  4142  000E76  50F5               	movf	tablat,w,c
  4143  000E78  0A20               	xorlw	32
  4144  000E7A  B4D8               	btfsc	status,2,c
  4145  000E7C  D018               	goto	l3197
  4146  000E7E  0EF7               	movlw	247
  4147  000E80  6E0A               	movwf	??_atoi& (0+255),c
  4148  000E82  0EFF               	movlw	255
  4149  000E84  6E0B               	movwf	(??_atoi+1)& (0+255),c
  4150  000E86  C008  FFF6         	movff	atoi@s,tblptrl
  4151  000E8A  C009  FFF7         	movff	atoi@s+1,tblptrh
  4152  000E8E                     	if	0	;tblptru may be non-zero
  4153  000E8E                     	endif
  4154  000E8E                     	if	0	;tblptru may be non-zero
  4155  000E8E                     	endif
  4156  000E8E  0008               	tblrd		*
  4157  000E90  50F5               	movf	tablat,w,c
  4158  000E92  6E0C               	movwf	(??_atoi+2)& (0+255),c
  4159  000E94  6A0D               	clrf	(??_atoi+3)& (0+255),c
  4160  000E96  500A               	movf	??_atoi,w,c
  4161  000E98  260C               	addwf	??_atoi+2,f,c
  4162  000E9A  500B               	movf	??_atoi+1,w,c
  4163  000E9C  220D               	addwfc	??_atoi+3,f,c
  4164  000E9E  500D               	movf	??_atoi+3,w,c
  4165  000EA0  E104               	bnz	u2260
  4166  000EA2  0E05               	movlw	5
  4167  000EA4  5C0C               	subwf	??_atoi+2,w,c
  4168  000EA6  A0D8               	btfss	status,0,c
  4169  000EA8  D002               	goto	l3197
  4170  000EAA                     u2260:
  4171  000EAA  0E00               	movlw	0
  4172  000EAC  6E14               	movwf	_atoi$1657,c
  4173  000EAE                     l3197:
  4174  000EAE  C014  F010         	movff	_atoi$1657,_atoi$1656
  4175  000EB2  6A11               	clrf	_atoi$1656+1,c
  4176  000EB4  5010               	movf	_atoi$1656,w,c
  4177  000EB6  1011               	iorwf	_atoi$1656+1,w,c
  4178  000EB8  B4D8               	btfsc	status,2,c
  4179  000EBA  D008               	goto	l3207
  4180  000EBC  D7D3               	goto	l3187
  4181  000EBE                     l3203:
  4182  000EBE  0E00               	movlw	0
  4183  000EC0  6E0F               	movwf	atoi@neg+1,c
  4184  000EC2  0E01               	movlw	1
  4185  000EC4  6E0E               	movwf	atoi@neg,c
  4186  000EC6                     l3205:
  4187  000EC6  4A08               	infsnz	atoi@s,f,c
  4188  000EC8  2A09               	incf	atoi@s+1,f,c
  4189  000ECA  D02E               	goto	l3213
  4190  000ECC                     l3207:
  4191  000ECC  C008  FFF6         	movff	atoi@s,tblptrl
  4192  000ED0  C009  FFF7         	movff	atoi@s+1,tblptrh
  4193  000ED4                     	if	0	;tblptru may be non-zero
  4194  000ED4                     	endif
  4195  000ED4                     	if	0	;tblptru may be non-zero
  4196  000ED4                     	endif
  4197  000ED4  0008               	tblrd		*
  4198  000ED6  50F5               	movf	tablat,w,c
  4199  000ED8  6E0A               	movwf	??_atoi& (0+255),c
  4200  000EDA  6A0B               	clrf	(??_atoi+1)& (0+255),c
  4201                           
  4202                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4203                           ; Switch size 1, requested type "simple"
  4204                           ; Number of cases is 1, Range of values is 0 to 0
  4205                           ; switch strategies available:
  4206                           ; Name         Instructions Cycles
  4207                           ; simple_byte            4     3 (average)
  4208                           ;	Chosen strategy is simple_byte
  4209  000EDC  500B               	movf	??_atoi+1,w,c
  4210  000EDE  0A00               	xorlw	0	; case 0
  4211  000EE0  A4D8               	btfss	status,2,c
  4212  000EE2  D022               	goto	l3213
  4213                           
  4214                           ; Switch size 1, requested type "simple"
  4215                           ; Number of cases is 2, Range of values is 43 to 45
  4216                           ; switch strategies available:
  4217                           ; Name         Instructions Cycles
  4218                           ; simple_byte            7     4 (average)
  4219                           ;	Chosen strategy is simple_byte
  4220  000EE4  500A               	movf	??_atoi,w,c
  4221  000EE6  0A2B               	xorlw	43	; case 43
  4222  000EE8  B4D8               	btfsc	status,2,c
  4223  000EEA  D7ED               	goto	l3205
  4224  000EEC  0A06               	xorlw	6	; case 45
  4225  000EEE  B4D8               	btfsc	status,2,c
  4226  000EF0  D7E6               	goto	l3203
  4227  000EF2  D01A               	goto	l3213
  4228  000EF4                     l3209:
  4229  000EF4  C015  F001         	movff	atoi@n,___wmul@multiplier
  4230  000EF8  C016  F002         	movff	atoi@n+1,___wmul@multiplier+1
  4231  000EFC  0E00               	movlw	0
  4232  000EFE  6E04               	movwf	___wmul@multiplicand+1,c
  4233  000F00  0E0A               	movlw	10
  4234  000F02  6E03               	movwf	___wmul@multiplicand,c
  4235  000F04  EC6F  F00D         	call	___wmul	;wreg free
  4236  000F08  C008  FFF6         	movff	atoi@s,tblptrl
  4237  000F0C  C009  FFF7         	movff	atoi@s+1,tblptrh
  4238  000F10                     	if	0	;tblptru may be non-zero
  4239  000F10                     	endif
  4240  000F10                     	if	0	;tblptru may be non-zero
  4241  000F10                     	endif
  4242  000F10  0008               	tblrd		*
  4243  000F12  50F5               	movf	tablat,w,c
  4244  000F14  5E01               	subwf	?___wmul,f,c
  4245  000F16  0E00               	movlw	0
  4246  000F18  5A02               	subwfb	?___wmul+1,f,c
  4247  000F1A  0E30               	movlw	48
  4248  000F1C  2401               	addwf	?___wmul,w,c
  4249  000F1E  6E15               	movwf	atoi@n,c
  4250  000F20  0E00               	movlw	0
  4251  000F22  2002               	addwfc	?___wmul+1,w,c
  4252  000F24  6E16               	movwf	atoi@n+1,c
  4253  000F26  D7CF               	goto	l3205
  4254  000F28                     l3213:
  4255  000F28  0ED0               	movlw	208
  4256  000F2A  6E0A               	movwf	??_atoi& (0+255),c
  4257  000F2C  0EFF               	movlw	255
  4258  000F2E  6E0B               	movwf	(??_atoi+1)& (0+255),c
  4259  000F30  C008  FFF6         	movff	atoi@s,tblptrl
  4260  000F34  C009  FFF7         	movff	atoi@s+1,tblptrh
  4261  000F38                     	if	0	;tblptru may be non-zero
  4262  000F38                     	endif
  4263  000F38                     	if	0	;tblptru may be non-zero
  4264  000F38                     	endif
  4265  000F38  0008               	tblrd		*
  4266  000F3A  50F5               	movf	tablat,w,c
  4267  000F3C  6E0C               	movwf	(??_atoi+2)& (0+255),c
  4268  000F3E  6A0D               	clrf	(??_atoi+3)& (0+255),c
  4269  000F40  500A               	movf	??_atoi,w,c
  4270  000F42  260C               	addwf	??_atoi+2,f,c
  4271  000F44  500B               	movf	??_atoi+1,w,c
  4272  000F46  220D               	addwfc	??_atoi+3,f,c
  4273  000F48  500D               	movf	??_atoi+3,w,c
  4274  000F4A  E106               	bnz	u2280
  4275  000F4C  0E0A               	movlw	10
  4276  000F4E  5C0C               	subwf	??_atoi+2,w,c
  4277  000F50  B0D8               	btfsc	status,0,c
  4278  000F52  D002               	goto	u2280
  4279  000F54  0E01               	movlw	1
  4280  000F56  D001               	goto	u2290
  4281  000F58                     u2280:
  4282  000F58  0E00               	movlw	0
  4283  000F5A                     u2290:
  4284  000F5A  6E12               	movwf	_atoi$1658,c
  4285  000F5C  6A13               	clrf	_atoi$1658+1,c
  4286  000F5E  5012               	movf	_atoi$1658,w,c
  4287  000F60  1013               	iorwf	_atoi$1658+1,w,c
  4288  000F62  A4D8               	btfss	status,2,c
  4289  000F64  D7C7               	goto	l3209
  4290  000F66  500E               	movf	atoi@neg,w,c
  4291  000F68  100F               	iorwf	atoi@neg+1,w,c
  4292  000F6A  A4D8               	btfss	status,2,c
  4293  000F6C  D00D               	goto	l1387
  4294  000F6E  C015  F00A         	movff	atoi@n,??_atoi
  4295  000F72  C016  F00B         	movff	atoi@n+1,??_atoi+1
  4296  000F76  1E0A               	comf	??_atoi,f,c
  4297  000F78  1E0B               	comf	??_atoi+1,f,c
  4298  000F7A  4A0A               	infsnz	??_atoi,f,c
  4299  000F7C  2A0B               	incf	??_atoi+1,f,c
  4300  000F7E  C00A  F008         	movff	??_atoi,?_atoi
  4301  000F82  C00B  F009         	movff	??_atoi+1,?_atoi+1
  4302  000F86  0012               	return	
  4303  000F88                     l1387:
  4304  000F88  C015  F008         	movff	atoi@n,?_atoi
  4305  000F8C  C016  F009         	movff	atoi@n+1,?_atoi+1
  4306  000F90  0012               	return		;funcret
  4307  000F92                     __end_of_atoi:
  4308                           	opt callstack 0
  4309                           
  4310 ;; *************** function _isspace *****************
  4311 ;; Defined at:
  4312 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\isspace.c"
  4313 ;; Parameters:    Size  Location     Type
  4314 ;;  c               2    0[COMRAM] int 
  4315 ;; Auto vars:     Size  Location     Type
  4316 ;;		None
  4317 ;; Return value:  Size  Location     Type
  4318 ;;                  2    0[COMRAM] int 
  4319 ;; Registers used:
  4320 ;;		wreg, status,2, status,0
  4321 ;; Tracked objects:
  4322 ;;		On entry : 0/0
  4323 ;;		On exit  : 0/0
  4324 ;;		Unchanged: 0/0
  4325 ;; Data sizes:     COMRAM   BANK0   BANK1
  4326 ;;      Params:         2       0       0
  4327 ;;      Locals:         1       0       0
  4328 ;;      Temps:          4       0       0
  4329 ;;      Totals:         7       0       0
  4330 ;;Total ram usage:        7 bytes
  4331 ;; Hardware stack levels used:    1
  4332 ;; Hardware stack levels required when called:    1
  4333 ;; This function calls:
  4334 ;;		Nothing
  4335 ;; This function is called by:
  4336 ;;		_atoi
  4337 ;; This function uses a non-reentrant model
  4338 ;;
  4339                           
  4340                           	psect	text19
  4341  00181E                     __ptext19:
  4342                           	opt callstack 0
  4343  00181E                     _isspace:
  4344                           	opt callstack 25
  4345                           
  4346                           ;incstack = 0
  4347  00181E  0E01               	movlw	1
  4348  001820  6E07               	movwf	_isspace$1683,c
  4349  001822  0E20               	movlw	32
  4350  001824  1801               	xorwf	isspace@c,w,c
  4351  001826  1002               	iorwf	isspace@c+1,w,c
  4352  001828  B4D8               	btfsc	status,2,c
  4353  00182A  D014               	goto	l3049
  4354  00182C  0EF7               	movlw	247
  4355  00182E  6E03               	movwf	??_isspace& (0+255),c
  4356  001830  0EFF               	movlw	255
  4357  001832  6E04               	movwf	(??_isspace+1)& (0+255),c
  4358  001834  C001  F005         	movff	isspace@c,??_isspace+2
  4359  001838  C002  F006         	movff	isspace@c+1,??_isspace+3
  4360  00183C  5003               	movf	??_isspace,w,c
  4361  00183E  2605               	addwf	??_isspace+2,f,c
  4362  001840  5004               	movf	??_isspace+1,w,c
  4363  001842  2206               	addwfc	??_isspace+3,f,c
  4364  001844  5006               	movf	??_isspace+3,w,c
  4365  001846  E104               	bnz	u1910
  4366  001848  0E05               	movlw	5
  4367  00184A  5C05               	subwf	??_isspace+2,w,c
  4368  00184C  A0D8               	btfss	status,0,c
  4369  00184E  D002               	goto	l3049
  4370  001850                     u1910:
  4371  001850  0E00               	movlw	0
  4372  001852  6E07               	movwf	_isspace$1683,c
  4373  001854                     l3049:
  4374  001854  C007  F001         	movff	_isspace$1683,?_isspace
  4375  001858  6A02               	clrf	?_isspace+1,c
  4376  00185A  0012               	return		;funcret
  4377  00185C                     __end_of_isspace:
  4378                           	opt callstack 0
  4379                           
  4380 ;; *************** function _isdigit *****************
  4381 ;; Defined at:
  4382 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\isdigit.c"
  4383 ;; Parameters:    Size  Location     Type
  4384 ;;  c               2    0[COMRAM] int 
  4385 ;; Auto vars:     Size  Location     Type
  4386 ;;		None
  4387 ;; Return value:  Size  Location     Type
  4388 ;;                  2    0[COMRAM] int 
  4389 ;; Registers used:
  4390 ;;		wreg, status,2, status,0
  4391 ;; Tracked objects:
  4392 ;;		On entry : 0/0
  4393 ;;		On exit  : 0/0
  4394 ;;		Unchanged: 0/0
  4395 ;; Data sizes:     COMRAM   BANK0   BANK1
  4396 ;;      Params:         2       0       0
  4397 ;;      Locals:         0       0       0
  4398 ;;      Temps:          4       0       0
  4399 ;;      Totals:         6       0       0
  4400 ;;Total ram usage:        6 bytes
  4401 ;; Hardware stack levels used:    1
  4402 ;; Hardware stack levels required when called:    1
  4403 ;; This function calls:
  4404 ;;		Nothing
  4405 ;; This function is called by:
  4406 ;;		_vfpfcnvrt
  4407 ;;		_atoi
  4408 ;; This function uses a non-reentrant model
  4409 ;;
  4410                           
  4411                           	psect	text20
  4412  001A02                     __ptext20:
  4413                           	opt callstack 0
  4414  001A02                     _isdigit:
  4415                           	opt callstack 26
  4416                           
  4417                           ;incstack = 0
  4418  001A02  0ED0               	movlw	208
  4419  001A04  6E03               	movwf	??_isdigit& (0+255),c
  4420  001A06  0EFF               	movlw	255
  4421  001A08  6E04               	movwf	(??_isdigit+1)& (0+255),c
  4422  001A0A  C001  F005         	movff	isdigit@c,??_isdigit+2
  4423  001A0E  C002  F006         	movff	isdigit@c+1,??_isdigit+3
  4424  001A12  5003               	movf	??_isdigit,w,c
  4425  001A14  2605               	addwf	??_isdigit+2,f,c
  4426  001A16  5004               	movf	??_isdigit+1,w,c
  4427  001A18  2206               	addwfc	??_isdigit+3,f,c
  4428  001A1A  5006               	movf	??_isdigit+3,w,c
  4429  001A1C  E106               	bnz	u1750
  4430  001A1E  0E0A               	movlw	10
  4431  001A20  5C05               	subwf	??_isdigit+2,w,c
  4432  001A22  B0D8               	btfsc	status,0,c
  4433  001A24  D002               	goto	u1750
  4434  001A26  0E01               	movlw	1
  4435  001A28  D001               	goto	u1760
  4436  001A2A                     u1750:
  4437  001A2A  0E00               	movlw	0
  4438  001A2C                     u1760:
  4439  001A2C  6E01               	movwf	?_isdigit,c
  4440  001A2E  6A02               	clrf	?_isdigit+1,c
  4441  001A30  0012               	return		;funcret
  4442  001A32                     __end_of_isdigit:
  4443                           	opt callstack 0
  4444                           
  4445 ;; *************** function ___wmul *****************
  4446 ;; Defined at:
  4447 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  4448 ;; Parameters:    Size  Location     Type
  4449 ;;  multiplier      2    0[COMRAM] unsigned int 
  4450 ;;  multiplicand    2    2[COMRAM] unsigned int 
  4451 ;; Auto vars:     Size  Location     Type
  4452 ;;  product         2    4[COMRAM] unsigned int 
  4453 ;; Return value:  Size  Location     Type
  4454 ;;                  2    0[COMRAM] unsigned int 
  4455 ;; Registers used:
  4456 ;;		wreg, status,2, status,0, prodl, prodh
  4457 ;; Tracked objects:
  4458 ;;		On entry : 0/0
  4459 ;;		On exit  : 0/0
  4460 ;;		Unchanged: 0/0
  4461 ;; Data sizes:     COMRAM   BANK0   BANK1
  4462 ;;      Params:         4       0       0
  4463 ;;      Locals:         2       0       0
  4464 ;;      Temps:          0       0       0
  4465 ;;      Totals:         6       0       0
  4466 ;;Total ram usage:        6 bytes
  4467 ;; Hardware stack levels used:    1
  4468 ;; Hardware stack levels required when called:    1
  4469 ;; This function calls:
  4470 ;;		Nothing
  4471 ;; This function is called by:
  4472 ;;		_atoi
  4473 ;;		_LCD_PageSet
  4474 ;;		_LCD_PageClear
  4475 ;;		_LCD_PageSetCursor
  4476 ;; This function uses a non-reentrant model
  4477 ;;
  4478                           
  4479                           	psect	text21
  4480  001ADE                     __ptext21:
  4481                           	opt callstack 0
  4482  001ADE                     ___wmul:
  4483                           	opt callstack 25
  4484                           
  4485                           ;incstack = 0
  4486  001ADE  5001               	movf	___wmul@multiplier,w,c
  4487  001AE0  0203               	mulwf	___wmul@multiplicand,c
  4488  001AE2  CFF3 F005          	movff	prodl,___wmul@product
  4489  001AE6  CFF4 F006          	movff	prodh,___wmul@product+1
  4490  001AEA  5001               	movf	___wmul@multiplier,w,c
  4491  001AEC  0204               	mulwf	___wmul@multiplicand+1,c
  4492  001AEE  50F3               	movf	prodl,w,c
  4493  001AF0  2606               	addwf	___wmul@product+1,f,c
  4494  001AF2  5002               	movf	___wmul@multiplier+1,w,c
  4495  001AF4  0203               	mulwf	___wmul@multiplicand,c
  4496  001AF6  50F3               	movf	prodl,w,c
  4497  001AF8  2606               	addwf	___wmul@product+1,f,c
  4498  001AFA  C005  F001         	movff	___wmul@product,?___wmul
  4499  001AFE  C006  F002         	movff	___wmul@product+1,?___wmul+1
  4500  001B02  0012               	return		;funcret
  4501  001B04                     __end_of___wmul:
  4502                           	opt callstack 0
  4503                           
  4504 ;; *************** function _acceler_Read *****************
  4505 ;; Defined at:
  4506 ;;		line 86 in file "skADXL345I2C.c"
  4507 ;; Parameters:    Size  Location     Type
  4508 ;;  X               2    7[COMRAM] PTR int 
  4509 ;;		 -> main@X(2), 
  4510 ;;  Y               2    9[COMRAM] PTR int 
  4511 ;;		 -> main@Y(2), 
  4512 ;;  Z               2   11[COMRAM] PTR int 
  4513 ;;		 -> main@Z(2), 
  4514 ;; Auto vars:     Size  Location     Type
  4515 ;;  data            6   19[COMRAM] struct .
  4516 ;;  i               2   17[COMRAM] int 
  4517 ;;  ans             2   15[COMRAM] int 
  4518 ;;  ack             2   13[COMRAM] int 
  4519 ;; Return value:  Size  Location     Type
  4520 ;;                  2    7[COMRAM] int 
  4521 ;; Registers used:
  4522 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4523 ;; Tracked objects:
  4524 ;;		On entry : 0/0
  4525 ;;		On exit  : 0/0
  4526 ;;		Unchanged: 0/0
  4527 ;; Data sizes:     COMRAM   BANK0   BANK1
  4528 ;;      Params:         6       0       0
  4529 ;;      Locals:        12       0       0
  4530 ;;      Temps:          0       0       0
  4531 ;;      Totals:        18       0       0
  4532 ;;Total ram usage:       18 bytes
  4533 ;; Hardware stack levels used:    1
  4534 ;; Hardware stack levels required when called:    3
  4535 ;; This function calls:
  4536 ;;		_I2C_Receive
  4537 ;;		_I2C_Send
  4538 ;;		_I2C_Start
  4539 ;;		_I2C_Stop
  4540 ;;		_I2C_rStart
  4541 ;; This function is called by:
  4542 ;;		_main
  4543 ;; This function uses a non-reentrant model
  4544 ;;
  4545                           
  4546                           	psect	text22
  4547  00119C                     __ptext22:
  4548                           	opt callstack 0
  4549  00119C                     _acceler_Read:
  4550                           	opt callstack 27
  4551                           
  4552                           ;skADXL345I2C.c: 86: int acceler_Read(int *X, int *Y, int *Z);skADXL345I2C.c: 87: {;skAD
      +                          XL345I2C.c: 91:      } data ;;skADXL345I2C.c: 92:      int ans , i , ack ;;skADXL345I2C.
      +                          c: 94:      ans = I2C_Start(0x1D,0);
  4553                           
  4554                           ;incstack = 0
  4555  00119C  0E00               	movlw	0
  4556  00119E  6E04               	movwf	I2C_Start@adrs+1,c
  4557  0011A0  0E1D               	movlw	29
  4558  0011A2  6E03               	movwf	I2C_Start@adrs,c
  4559  0011A4  0E00               	movlw	0
  4560  0011A6  6E06               	movwf	I2C_Start@rw+1,c
  4561  0011A8  0E00               	movlw	0
  4562  0011AA  6E05               	movwf	I2C_Start@rw,c
  4563  0011AC  EC0E  F00A         	call	_I2C_Start	;wreg free
  4564  0011B0  C003  F010         	movff	?_I2C_Start,acceler_Read@ans
  4565  0011B4  C004  F011         	movff	?_I2C_Start+1,acceler_Read@ans+1
  4566                           
  4567                           ;skADXL345I2C.c: 95:      if (ans == 0) {
  4568  0011B8  5010               	movf	acceler_Read@ans,w,c
  4569  0011BA  1011               	iorwf	acceler_Read@ans+1,w,c
  4570  0011BC  A4D8               	btfss	status,2,c
  4571  0011BE  D04E               	goto	l536
  4572                           
  4573                           ;skADXL345I2C.c: 96:           I2C_Send(0x32) ;
  4574  0011C0  0E32               	movlw	50
  4575  0011C2  ECC3  F00B         	call	_I2C_Send
  4576                           
  4577                           ;skADXL345I2C.c: 97:           I2C_rStart(0x1D,1) ;
  4578  0011C6  0E00               	movlw	0
  4579  0011C8  6E04               	movwf	I2C_rStart@adrs+1,c
  4580  0011CA  0E1D               	movlw	29
  4581  0011CC  6E03               	movwf	I2C_rStart@adrs,c
  4582  0011CE  0E00               	movlw	0
  4583  0011D0  6E06               	movwf	I2C_rStart@rw+1,c
  4584  0011D2  0E01               	movlw	1
  4585  0011D4  6E05               	movwf	I2C_rStart@rw,c
  4586  0011D6  EC47  F00A         	call	_I2C_rStart	;wreg free
  4587                           
  4588                           ;skADXL345I2C.c: 98:           ack = 0 ;
  4589  0011DA  0E00               	movlw	0
  4590  0011DC  6E0F               	movwf	acceler_Read@ack+1,c
  4591  0011DE  0E00               	movlw	0
  4592  0011E0  6E0E               	movwf	acceler_Read@ack,c
  4593                           
  4594                           ;skADXL345I2C.c: 99:           for (i=0 ; i<6 ; i++) {
  4595  0011E2  0E00               	movlw	0
  4596  0011E4  6E13               	movwf	acceler_Read@i+1,c
  4597  0011E6  0E00               	movlw	0
  4598  0011E8  6E12               	movwf	acceler_Read@i,c
  4599  0011EA                     l3635:
  4600                           
  4601                           ;skADXL345I2C.c: 100:                if (i==5) ack = 1 ;
  4602  0011EA  0E05               	movlw	5
  4603  0011EC  1812               	xorwf	acceler_Read@i,w,c
  4604  0011EE  1013               	iorwf	acceler_Read@i+1,w,c
  4605  0011F0  A4D8               	btfss	status,2,c
  4606  0011F2  D004               	goto	l3639
  4607  0011F4  0E00               	movlw	0
  4608  0011F6  6E0F               	movwf	acceler_Read@ack+1,c
  4609  0011F8  0E01               	movlw	1
  4610  0011FA  6E0E               	movwf	acceler_Read@ack,c
  4611  0011FC                     l3639:
  4612                           
  4613                           ;skADXL345I2C.c: 101:                data.c[i] = I2C_Receive(ack);
  4614  0011FC  0E14               	movlw	low acceler_Read@data
  4615  0011FE  2412               	addwf	acceler_Read@i,w,c
  4616  001200  6ED9               	movwf	fsr2l,c
  4617  001202  0E00               	movlw	high acceler_Read@data
  4618  001204  2013               	addwfc	acceler_Read@i+1,w,c
  4619  001206  6EDA               	movwf	fsr2h,c
  4620  001208  C00E  F003         	movff	acceler_Read@ack,I2C_Receive@ack
  4621  00120C  C00F  F004         	movff	acceler_Read@ack+1,I2C_Receive@ack+1
  4622  001210  EC70  F00B         	call	_I2C_Receive	;wreg free
  4623  001214  5003               	movf	?_I2C_Receive,w,c
  4624  001216  6EDF               	movwf	indf2,c
  4625                           
  4626                           ;skADXL345I2C.c: 102:           }
  4627  001218  4A12               	infsnz	acceler_Read@i,f,c
  4628  00121A  2A13               	incf	acceler_Read@i+1,f,c
  4629  00121C  BE13               	btfsc	acceler_Read@i+1,7,c
  4630  00121E  D7E5               	goto	l3635
  4631  001220  5013               	movf	acceler_Read@i+1,w,c
  4632  001222  E104               	bnz	u2730
  4633  001224  0E06               	movlw	6
  4634  001226  5C12               	subwf	acceler_Read@i,w,c
  4635  001228  A0D8               	btfss	status,0,c
  4636  00122A  D7DF               	goto	l3635
  4637  00122C                     u2730:
  4638                           
  4639                           ;skADXL345I2C.c: 103:           *X = data.w[0] ;
  4640  00122C  C008  FFD9         	movff	acceler_Read@X,fsr2l
  4641  001230  C009  FFDA         	movff	acceler_Read@X+1,fsr2h
  4642  001234  C014  FFDE         	movff	acceler_Read@data,postinc2
  4643  001238  C015  FFDD         	movff	acceler_Read@data+1,postdec2
  4644                           
  4645                           ;skADXL345I2C.c: 104:           *Y = data.w[1] ;
  4646  00123C  C00A  FFD9         	movff	acceler_Read@Y,fsr2l
  4647  001240  C00B  FFDA         	movff	acceler_Read@Y+1,fsr2h
  4648  001244  C016  FFDE         	movff	acceler_Read@data+2,postinc2
  4649  001248  C017  FFDD         	movff	acceler_Read@data+3,postdec2
  4650                           
  4651                           ;skADXL345I2C.c: 105:           *Z = data.w[2] ;
  4652  00124C  C00C  FFD9         	movff	acceler_Read@Z,fsr2l
  4653  001250  C00D  FFDA         	movff	acceler_Read@Z+1,fsr2h
  4654  001254  C018  FFDE         	movff	acceler_Read@data+4,postinc2
  4655  001258  C019  FFDD         	movff	acceler_Read@data+5,postdec2
  4656  00125C                     l536:
  4657                           
  4658                           ;skADXL345I2C.c: 107:      I2C_Stop() ;
  4659  00125C  EC9C  F00D         	call	_I2C_Stop	;wreg free
  4660  001260  0012               	return		;funcret
  4661  001262                     __end_of_acceler_Read:
  4662                           	opt callstack 0
  4663                           
  4664 ;; *************** function _acceler_Init *****************
  4665 ;; Defined at:
  4666 ;;		line 62 in file "skADXL345I2C.c"
  4667 ;; Parameters:    Size  Location     Type
  4668 ;;		None
  4669 ;; Auto vars:     Size  Location     Type
  4670 ;;  ans             2   13[COMRAM] int 
  4671 ;; Return value:  Size  Location     Type
  4672 ;;                  2  239[None  ] int 
  4673 ;; Registers used:
  4674 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4675 ;; Tracked objects:
  4676 ;;		On entry : 0/0
  4677 ;;		On exit  : 0/0
  4678 ;;		Unchanged: 0/0
  4679 ;; Data sizes:     COMRAM   BANK0   BANK1
  4680 ;;      Params:         0       0       0
  4681 ;;      Locals:         2       0       0
  4682 ;;      Temps:          1       0       0
  4683 ;;      Totals:         3       0       0
  4684 ;;Total ram usage:        3 bytes
  4685 ;; Hardware stack levels used:    1
  4686 ;; Hardware stack levels required when called:    4
  4687 ;; This function calls:
  4688 ;;		_register_read
  4689 ;;		_register_write
  4690 ;; This function is called by:
  4691 ;;		_main
  4692 ;; This function uses a non-reentrant model
  4693 ;;
  4694                           
  4695                           	psect	text23
  4696  0015C8                     __ptext23:
  4697                           	opt callstack 0
  4698  0015C8                     _acceler_Init:
  4699                           	opt callstack 26
  4700                           
  4701                           ;skADXL345I2C.c: 64:     int ans ;;skADXL345I2C.c: 66:      _delay((unsigned long)((2000
      +                          )*(16000000/4000000.0))) ;
  4702                           
  4703                           ;incstack = 0
  4704  0015C8  0E0B               	movlw	11
  4705  0015CA  6E0D               	movwf	??_acceler_Init& (0+255),c
  4706  0015CC  0E62               	movlw	98
  4707  0015CE                     u3097:
  4708  0015CE  2EE8               	decfsz	wreg,f,c
  4709  0015D0  D7FE               	bra	u3097
  4710  0015D2  2E0D               	decfsz	??_acceler_Init& (0+255),f,c
  4711  0015D4  D7FC               	bra	u3097
  4712  0015D6  D000               	nop2	
  4713                           
  4714                           ;skADXL345I2C.c: 67:      ans = register_read(0x00) ;
  4715  0015D8  0E00               	movlw	0
  4716  0015DA  EC7F  F00A         	call	_register_read
  4717  0015DE  C008  F00E         	movff	?_register_read,acceler_Init@ans
  4718  0015E2  C009  F00F         	movff	?_register_read+1,acceler_Init@ans+1
  4719                           
  4720                           ;skADXL345I2C.c: 68:      if (ans == 0xE5) {
  4721  0015E6  0EE5               	movlw	229
  4722  0015E8  180E               	xorwf	acceler_Init@ans,w,c
  4723  0015EA  100F               	iorwf	acceler_Init@ans+1,w,c
  4724  0015EC  A4D8               	btfss	status,2,c
  4725  0015EE  0012               	return	
  4726                           
  4727                           ;skADXL345I2C.c: 69:           register_write(0x2C,0x0B) ;
  4728  0015F0  0E0B               	movlw	11
  4729  0015F2  6E08               	movwf	register_write@val,c
  4730  0015F4  0E2C               	movlw	44
  4731  0015F6  EC68  F00C         	call	_register_write
  4732                           
  4733                           ;skADXL345I2C.c: 70:           register_write(0x31,0x11) ;
  4734  0015FA  0E11               	movlw	17
  4735  0015FC  6E08               	movwf	register_write@val,c
  4736  0015FE  0E31               	movlw	49
  4737  001600  EC68  F00C         	call	_register_write
  4738                           
  4739                           ;skADXL345I2C.c: 71:           register_write(0x38,0x00) ;
  4740  001604  0E00               	movlw	0
  4741  001606  6E08               	movwf	register_write@val,c
  4742  001608  0E38               	movlw	56
  4743  00160A  EC68  F00C         	call	_register_write
  4744                           
  4745                           ;skADXL345I2C.c: 72:           register_write(0x2D,0x08) ;
  4746  00160E  0E08               	movlw	8
  4747  001610  6E08               	movwf	register_write@val,c
  4748  001612  0E2D               	movlw	45
  4749  001614  EC68  F00C         	call	_register_write
  4750                           
  4751                           ;skADXL345I2C.c: 73:           _delay((unsigned long)((2000)*(16000000/4000000.0))) ;
  4752  001618  0E0B               	movlw	11
  4753  00161A  6E0D               	movwf	??_acceler_Init& (0+255),c
  4754  00161C  0E62               	movlw	98
  4755  00161E                     u3107:
  4756  00161E  2EE8               	decfsz	wreg,f,c
  4757  001620  D7FE               	bra	u3107
  4758  001622  2E0D               	decfsz	??_acceler_Init& (0+255),f,c
  4759  001624  D7FC               	bra	u3107
  4760  001626  D000               	nop2	
  4761                           
  4762                           ;skADXL345I2C.c: 74:      } else ans = -1 ;
  4763  001628  0012               	return	
  4764  00162A                     __end_of_acceler_Init:
  4765                           	opt callstack 0
  4766                           
  4767 ;; *************** function _register_write *****************
  4768 ;; Defined at:
  4769 ;;		line 45 in file "skADXL345I2C.c"
  4770 ;; Parameters:    Size  Location     Type
  4771 ;;  address         1    wreg     unsigned char 
  4772 ;;  val             1    7[COMRAM] unsigned char 
  4773 ;; Auto vars:     Size  Location     Type
  4774 ;;  address         1    8[COMRAM] unsigned char 
  4775 ;;  ans             2    9[COMRAM] int 
  4776 ;; Return value:  Size  Location     Type
  4777 ;;                  2    7[COMRAM] int 
  4778 ;; Registers used:
  4779 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4780 ;; Tracked objects:
  4781 ;;		On entry : 0/0
  4782 ;;		On exit  : 0/0
  4783 ;;		Unchanged: 0/0
  4784 ;; Data sizes:     COMRAM   BANK0   BANK1
  4785 ;;      Params:         1       0       0
  4786 ;;      Locals:         3       0       0
  4787 ;;      Temps:          0       0       0
  4788 ;;      Totals:         4       0       0
  4789 ;;Total ram usage:        4 bytes
  4790 ;; Hardware stack levels used:    1
  4791 ;; Hardware stack levels required when called:    3
  4792 ;; This function calls:
  4793 ;;		_I2C_Send
  4794 ;;		_I2C_Start
  4795 ;;		_I2C_Stop
  4796 ;; This function is called by:
  4797 ;;		_acceler_Init
  4798 ;; This function uses a non-reentrant model
  4799 ;;
  4800                           
  4801                           	psect	text24
  4802  0018D0                     __ptext24:
  4803                           	opt callstack 0
  4804  0018D0                     _register_write:
  4805                           	opt callstack 26
  4806                           
  4807                           ;incstack = 0
  4808                           ;register_write@address stored from wreg
  4809  0018D0  6E09               	movwf	register_write@address,c
  4810                           
  4811                           ;skADXL345I2C.c: 45: int register_write(char address, char val);skADXL345I2C.c: 46: {;sk
      +                          ADXL345I2C.c: 47:      int ans ;;skADXL345I2C.c: 49:      ans = I2C_Start(0x1D,0);
  4812  0018D2  0E00               	movlw	0
  4813  0018D4  6E04               	movwf	I2C_Start@adrs+1,c
  4814  0018D6  0E1D               	movlw	29
  4815  0018D8  6E03               	movwf	I2C_Start@adrs,c
  4816  0018DA  0E00               	movlw	0
  4817  0018DC  6E06               	movwf	I2C_Start@rw+1,c
  4818  0018DE  0E00               	movlw	0
  4819  0018E0  6E05               	movwf	I2C_Start@rw,c
  4820  0018E2  EC0E  F00A         	call	_I2C_Start	;wreg free
  4821  0018E6  C003  F00A         	movff	?_I2C_Start,register_write@ans
  4822  0018EA  C004  F00B         	movff	?_I2C_Start+1,register_write@ans+1
  4823                           
  4824                           ;skADXL345I2C.c: 50:      if (ans == 0) {
  4825  0018EE  500A               	movf	register_write@ans,w,c
  4826  0018F0  100B               	iorwf	register_write@ans+1,w,c
  4827  0018F2  A4D8               	btfss	status,2,c
  4828  0018F4  D006               	goto	l526
  4829                           
  4830                           ;skADXL345I2C.c: 51:           I2C_Send(address) ;
  4831  0018F6  5009               	movf	register_write@address,w,c
  4832  0018F8  ECC3  F00B         	call	_I2C_Send
  4833                           
  4834                           ;skADXL345I2C.c: 52:           I2C_Send(val) ;
  4835  0018FC  5008               	movf	register_write@val,w,c
  4836  0018FE  ECC3  F00B         	call	_I2C_Send
  4837  001902                     l526:
  4838                           
  4839                           ;skADXL345I2C.c: 54:      I2C_Stop() ;
  4840  001902  EC9C  F00D         	call	_I2C_Stop	;wreg free
  4841  001906  0012               	return		;funcret
  4842  001908                     __end_of_register_write:
  4843                           	opt callstack 0
  4844                           
  4845 ;; *************** function _register_read *****************
  4846 ;; Defined at:
  4847 ;;		line 29 in file "skADXL345I2C.c"
  4848 ;; Parameters:    Size  Location     Type
  4849 ;;  address         1    wreg     unsigned char 
  4850 ;; Auto vars:     Size  Location     Type
  4851 ;;  address         1    9[COMRAM] unsigned char 
  4852 ;;  ans             2   10[COMRAM] int 
  4853 ;; Return value:  Size  Location     Type
  4854 ;;                  2    7[COMRAM] int 
  4855 ;; Registers used:
  4856 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4857 ;; Tracked objects:
  4858 ;;		On entry : 0/0
  4859 ;;		On exit  : 0/0
  4860 ;;		Unchanged: 0/0
  4861 ;; Data sizes:     COMRAM   BANK0   BANK1
  4862 ;;      Params:         2       0       0
  4863 ;;      Locals:         3       0       0
  4864 ;;      Temps:          0       0       0
  4865 ;;      Totals:         5       0       0
  4866 ;;Total ram usage:        5 bytes
  4867 ;; Hardware stack levels used:    1
  4868 ;; Hardware stack levels required when called:    3
  4869 ;; This function calls:
  4870 ;;		_I2C_Receive
  4871 ;;		_I2C_Send
  4872 ;;		_I2C_Start
  4873 ;;		_I2C_Stop
  4874 ;;		_I2C_rStart
  4875 ;; This function is called by:
  4876 ;;		_acceler_Init
  4877 ;; This function uses a non-reentrant model
  4878 ;;
  4879                           
  4880                           	psect	text25
  4881  0014FE                     __ptext25:
  4882                           	opt callstack 0
  4883  0014FE                     _register_read:
  4884                           	opt callstack 26
  4885                           
  4886                           ;incstack = 0
  4887                           ;register_read@address stored from wreg
  4888  0014FE  6E0A               	movwf	register_read@address,c
  4889                           
  4890                           ;skADXL345I2C.c: 29: int register_read(char address);skADXL345I2C.c: 30: {;skADXL345I2C.
      +                          c: 31:      int ans ;;skADXL345I2C.c: 33:      ans = I2C_Start(0x1D,0);
  4891  001500  0E00               	movlw	0
  4892  001502  6E04               	movwf	I2C_Start@adrs+1,c
  4893  001504  0E1D               	movlw	29
  4894  001506  6E03               	movwf	I2C_Start@adrs,c
  4895  001508  0E00               	movlw	0
  4896  00150A  6E06               	movwf	I2C_Start@rw+1,c
  4897  00150C  0E00               	movlw	0
  4898  00150E  6E05               	movwf	I2C_Start@rw,c
  4899  001510  EC0E  F00A         	call	_I2C_Start	;wreg free
  4900  001514  C003  F00B         	movff	?_I2C_Start,register_read@ans
  4901  001518  C004  F00C         	movff	?_I2C_Start+1,register_read@ans+1
  4902                           
  4903                           ;skADXL345I2C.c: 34:      if (ans == 0) {
  4904  00151C  500B               	movf	register_read@ans,w,c
  4905  00151E  100C               	iorwf	register_read@ans+1,w,c
  4906  001520  A4D8               	btfss	status,2,c
  4907  001522  D018               	goto	l521
  4908                           
  4909                           ;skADXL345I2C.c: 35:           I2C_Send(address) ;
  4910  001524  500A               	movf	register_read@address,w,c
  4911  001526  ECC3  F00B         	call	_I2C_Send
  4912                           
  4913                           ;skADXL345I2C.c: 36:           I2C_rStart(0x1D,1) ;
  4914  00152A  0E00               	movlw	0
  4915  00152C  6E04               	movwf	I2C_rStart@adrs+1,c
  4916  00152E  0E1D               	movlw	29
  4917  001530  6E03               	movwf	I2C_rStart@adrs,c
  4918  001532  0E00               	movlw	0
  4919  001534  6E06               	movwf	I2C_rStart@rw+1,c
  4920  001536  0E01               	movlw	1
  4921  001538  6E05               	movwf	I2C_rStart@rw,c
  4922  00153A  EC47  F00A         	call	_I2C_rStart	;wreg free
  4923                           
  4924                           ;skADXL345I2C.c: 37:           ans = I2C_Receive(1);
  4925  00153E  0E00               	movlw	0
  4926  001540  6E04               	movwf	I2C_Receive@ack+1,c
  4927  001542  0E01               	movlw	1
  4928  001544  6E03               	movwf	I2C_Receive@ack,c
  4929  001546  EC70  F00B         	call	_I2C_Receive	;wreg free
  4930  00154A  C003  F00B         	movff	?_I2C_Receive,register_read@ans
  4931  00154E  C004  F00C         	movff	?_I2C_Receive+1,register_read@ans+1
  4932                           
  4933                           ;skADXL345I2C.c: 38:      } else ans = -1 ;
  4934  001552  D002               	goto	l3489
  4935  001554                     l521:
  4936  001554  680B               	setf	register_read@ans,c
  4937  001556  680C               	setf	register_read@ans+1,c
  4938  001558                     l3489:
  4939                           
  4940                           ;skADXL345I2C.c: 39:      I2C_Stop() ;
  4941  001558  EC9C  F00D         	call	_I2C_Stop	;wreg free
  4942                           
  4943                           ;skADXL345I2C.c: 40:      return ans ;
  4944  00155C  C00B  F008         	movff	register_read@ans,?_register_read
  4945  001560  C00C  F009         	movff	register_read@ans+1,?_register_read+1
  4946  001564  0012               	return		;funcret
  4947  001566                     __end_of_register_read:
  4948                           	opt callstack 0
  4949                           
  4950 ;; *************** function _I2C_rStart *****************
  4951 ;; Defined at:
  4952 ;;		line 133 in file "skI2Clib.c"
  4953 ;; Parameters:    Size  Location     Type
  4954 ;;  adrs            2    2[COMRAM] int 
  4955 ;;  rw              2    4[COMRAM] int 
  4956 ;; Auto vars:     Size  Location     Type
  4957 ;;		None
  4958 ;; Return value:  Size  Location     Type
  4959 ;;                  2    2[COMRAM] int 
  4960 ;; Registers used:
  4961 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4962 ;; Tracked objects:
  4963 ;;		On entry : 0/0
  4964 ;;		On exit  : 0/0
  4965 ;;		Unchanged: 0/0
  4966 ;; Data sizes:     COMRAM   BANK0   BANK1
  4967 ;;      Params:         4       0       0
  4968 ;;      Locals:         0       0       0
  4969 ;;      Temps:          1       0       0
  4970 ;;      Totals:         5       0       0
  4971 ;;Total ram usage:        5 bytes
  4972 ;; Hardware stack levels used:    1
  4973 ;; Hardware stack levels required when called:    2
  4974 ;; This function calls:
  4975 ;;		_I2C_IdleCheck
  4976 ;; This function is called by:
  4977 ;;		_register_read
  4978 ;;		_acceler_Read
  4979 ;;		_Color_Read
  4980 ;;		_Color
  4981 ;; This function uses a non-reentrant model
  4982 ;;
  4983                           
  4984                           	psect	text26
  4985  00148E                     __ptext26:
  4986                           	opt callstack 0
  4987  00148E                     _I2C_rStart:
  4988                           	opt callstack 27
  4989                           
  4990                           ;skI2Clib.c: 133: int I2C_rStart(int adrs,int rw);skI2Clib.c: 134: {;skI2Clib.c: 135:   
      +                             CollisionCheck = 0 ;
  4991                           
  4992                           ;incstack = 0
  4993  00148E  0E00               	movlw	0
  4994  001490  6E5A               	movwf	_CollisionCheck+1,c
  4995  001492  0E00               	movlw	0
  4996  001494  6E59               	movwf	_CollisionCheck,c
  4997                           
  4998                           ;skI2Clib.c: 137:      I2C_IdleCheck(0x5) ;
  4999  001496  0E05               	movlw	5
  5000  001498  EC91  F00D         	call	_I2C_IdleCheck
  5001                           
  5002                           ;skI2Clib.c: 138:      SSPCON2bits.RSEN = 1 ;
  5003  00149C  82C5               	bsf	4037,1,c	;volatile
  5004                           
  5005                           ;skI2Clib.c: 140:      I2C_IdleCheck(0x5) ;
  5006  00149E  0E05               	movlw	5
  5007  0014A0  EC91  F00D         	call	_I2C_IdleCheck
  5008                           
  5009                           ;skI2Clib.c: 141:      if (CollisionCheck == 1) return -1 ;
  5010  0014A4  0459               	decf	_CollisionCheck,w,c
  5011  0014A6  105A               	iorwf	_CollisionCheck+1,w,c
  5012  0014A8  A4D8               	btfss	status,2,c
  5013  0014AA  D003               	goto	l3307
  5014  0014AC                     u2390:
  5015  0014AC  6803               	setf	?_I2C_rStart,c
  5016  0014AE  6804               	setf	?_I2C_rStart+1,c
  5017  0014B0  0012               	return	
  5018  0014B2                     l3307:
  5019                           
  5020                           ;skI2Clib.c: 142:      AckCheck = 1 ;
  5021  0014B2  0E00               	movlw	0
  5022  0014B4  0100               	movlb	0	; () banked
  5023  0014B6  6F7F               	movwf	(_AckCheck+1)& (0+255),b
  5024  0014B8  0E01               	movlw	1
  5025  0014BA  6F7E               	movwf	_AckCheck& (0+255),b
  5026                           
  5027                           ; BSR set to: 0
  5028                           ;skI2Clib.c: 143:      SSPBUF = (char)((adrs<<1)+rw) ;
  5029  0014BC  5003               	movf	I2C_rStart@adrs,w,c
  5030  0014BE  0D02               	mullw	2
  5031  0014C0  50F3               	movf	prodl,w,c
  5032  0014C2  2405               	addwf	I2C_rStart@rw,w,c
  5033  0014C4  6EC9               	movwf	4041,c	;volatile
  5034                           
  5035                           ;skI2Clib.c: 144:      while (AckCheck)_delay((unsigned long)((1)*(16000000/4000.0))) ;
  5036  0014C6  D008               	goto	l3313
  5037  0014C8                     l3311:
  5038                           
  5039                           ; BSR set to: 0
  5040  0014C8  0E06               	movlw	6
  5041  0014CA  6E07               	movwf	??_I2C_rStart& (0+255),c
  5042  0014CC  0E30               	movlw	48
  5043  0014CE                     u3117:
  5044  0014CE  2EE8               	decfsz	wreg,f,c
  5045  0014D0  D7FE               	bra	u3117
  5046  0014D2  2E07               	decfsz	??_I2C_rStart& (0+255),f,c
  5047  0014D4  D7FC               	bra	u3117
  5048  0014D6  D000               	nop2	
  5049  0014D8                     l3313:
  5050  0014D8  0100               	movlb	0	; () banked
  5051  0014DA  517E               	movf	_AckCheck& (0+255),w,b
  5052  0014DC  117F               	iorwf	(_AckCheck+1)& (0+255),w,b
  5053  0014DE  A4D8               	btfss	status,2,c
  5054  0014E0  D7F3               	goto	l3311
  5055                           
  5056                           ; BSR set to: 0
  5057                           ;skI2Clib.c: 145:      if (CollisionCheck == 1) return -1 ;
  5058  0014E2  0459               	decf	_CollisionCheck,w,c
  5059  0014E4  105A               	iorwf	_CollisionCheck+1,w,c
  5060  0014E6  B4D8               	btfsc	status,2,c
  5061  0014E8  D7E1               	goto	u2390
  5062                           
  5063                           ; BSR set to: 0
  5064                           ;skI2Clib.c: 146:      return SSPCON2bits.ACKSTAT ;
  5065  0014EA  ACC5               	btfss	4037,6,c	;volatile
  5066  0014EC  D003               	goto	u2420
  5067  0014EE  6A07               	clrf	??_I2C_rStart& (0+255),c
  5068  0014F0  2A07               	incf	??_I2C_rStart& (0+255),f,c
  5069  0014F2  D001               	goto	u2428
  5070  0014F4                     u2420:
  5071  0014F4  6A07               	clrf	??_I2C_rStart& (0+255),c
  5072  0014F6                     u2428:
  5073  0014F6  5007               	movf	??_I2C_rStart,w,c
  5074  0014F8  6E03               	movwf	?_I2C_rStart,c
  5075  0014FA  6A04               	clrf	?_I2C_rStart+1,c
  5076  0014FC  0012               	return		;funcret
  5077  0014FE                     __end_of_I2C_rStart:
  5078                           	opt callstack 0
  5079                           
  5080 ;; *************** function _I2C_Receive *****************
  5081 ;; Defined at:
  5082 ;;		line 192 in file "skI2Clib.c"
  5083 ;; Parameters:    Size  Location     Type
  5084 ;;  ack             2    2[COMRAM] int 
  5085 ;; Auto vars:     Size  Location     Type
  5086 ;;  dt              2    4[COMRAM] int 
  5087 ;; Return value:  Size  Location     Type
  5088 ;;                  2    2[COMRAM] int 
  5089 ;; Registers used:
  5090 ;;		wreg, status,2, status,0, cstack
  5091 ;; Tracked objects:
  5092 ;;		On entry : 0/0
  5093 ;;		On exit  : 0/0
  5094 ;;		Unchanged: 0/0
  5095 ;; Data sizes:     COMRAM   BANK0   BANK1
  5096 ;;      Params:         2       0       0
  5097 ;;      Locals:         2       0       0
  5098 ;;      Temps:          0       0       0
  5099 ;;      Totals:         4       0       0
  5100 ;;Total ram usage:        4 bytes
  5101 ;; Hardware stack levels used:    1
  5102 ;; Hardware stack levels required when called:    2
  5103 ;; This function calls:
  5104 ;;		_I2C_IdleCheck
  5105 ;; This function is called by:
  5106 ;;		_register_read
  5107 ;;		_acceler_Read
  5108 ;;		_Color_Read
  5109 ;;		_Color
  5110 ;; This function uses a non-reentrant model
  5111 ;;
  5112                           
  5113                           	psect	text27
  5114  0016E0                     __ptext27:
  5115                           	opt callstack 0
  5116  0016E0                     _I2C_Receive:
  5117                           	opt callstack 27
  5118                           
  5119                           ;skI2Clib.c: 192: int I2C_Receive(int ack);skI2Clib.c: 193: {;skI2Clib.c: 194:      int 
      +                          dt ;;skI2Clib.c: 196:      CollisionCheck = 0 ;
  5120                           
  5121                           ;incstack = 0
  5122  0016E0  0E00               	movlw	0
  5123  0016E2  6E5A               	movwf	_CollisionCheck+1,c
  5124  0016E4  0E00               	movlw	0
  5125  0016E6  6E59               	movwf	_CollisionCheck,c
  5126                           
  5127                           ;skI2Clib.c: 197:      I2C_IdleCheck(0x5) ;
  5128  0016E8  0E05               	movlw	5
  5129  0016EA  EC91  F00D         	call	_I2C_IdleCheck
  5130                           
  5131                           ;skI2Clib.c: 198:      SSPCON2bits.RCEN = 1 ;
  5132  0016EE  86C5               	bsf	4037,3,c	;volatile
  5133                           
  5134                           ;skI2Clib.c: 199:      I2C_IdleCheck(0x4) ;
  5135  0016F0  0E04               	movlw	4
  5136  0016F2  EC91  F00D         	call	_I2C_IdleCheck
  5137                           
  5138                           ;skI2Clib.c: 200:      if (CollisionCheck == 1) return -1 ;
  5139  0016F6  0459               	decf	_CollisionCheck,w,c
  5140  0016F8  105A               	iorwf	_CollisionCheck+1,w,c
  5141  0016FA  A4D8               	btfss	status,2,c
  5142  0016FC  D003               	goto	l464
  5143  0016FE  6803               	setf	?_I2C_Receive,c
  5144  001700  6804               	setf	?_I2C_Receive+1,c
  5145  001702  0012               	return	
  5146  001704                     l464:
  5147                           
  5148                           ;skI2Clib.c: 201:      dt = SSPBUF ;
  5149  001704  CFC9 F005          	movff	4041,I2C_Receive@dt	;volatile
  5150  001708  6A06               	clrf	I2C_Receive@dt+1,c
  5151                           
  5152                           ;skI2Clib.c: 202:      I2C_IdleCheck(0x5) ;
  5153  00170A  0E05               	movlw	5
  5154  00170C  EC91  F00D         	call	_I2C_IdleCheck
  5155                           
  5156                           ;skI2Clib.c: 203:      if (CollisionCheck == 1) return -1 ;
  5157  001710  0459               	decf	_CollisionCheck,w,c
  5158  001712  105A               	iorwf	_CollisionCheck+1,w,c
  5159  001714  A4D8               	btfss	status,2,c
  5160  001716  D003               	goto	l466
  5161  001718  6803               	setf	?_I2C_Receive,c
  5162  00171A  6804               	setf	?_I2C_Receive+1,c
  5163  00171C  0012               	return	
  5164  00171E                     l466:
  5165                           
  5166                           ;skI2Clib.c: 204:      SSPCON2bits.ACKDT = ack ;
  5167  00171E  B003               	btfsc	I2C_Receive@ack,0,c
  5168  001720  D002               	bra	u2455
  5169  001722  9AC5               	bcf	4037,5,c	;volatile
  5170  001724  D001               	bra	u2456
  5171  001726                     u2455:
  5172  001726  8AC5               	bsf	4037,5,c	;volatile
  5173  001728                     u2456:
  5174                           
  5175                           ;skI2Clib.c: 205:      SSPCON2bits.ACKEN = 1 ;
  5176  001728  88C5               	bsf	4037,4,c	;volatile
  5177                           
  5178                           ;skI2Clib.c: 206:      return dt ;
  5179  00172A  C005  F003         	movff	I2C_Receive@dt,?_I2C_Receive
  5180  00172E  C006  F004         	movff	I2C_Receive@dt+1,?_I2C_Receive+1
  5181  001732  0012               	return		;funcret
  5182  001734                     __end_of_I2C_Receive:
  5183                           	opt callstack 0
  5184                           
  5185 ;; *************** function ___awdiv *****************
  5186 ;; Defined at:
  5187 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
  5188 ;; Parameters:    Size  Location     Type
  5189 ;;  dividend        2    0[COMRAM] int 
  5190 ;;  divisor         2    2[COMRAM] int 
  5191 ;; Auto vars:     Size  Location     Type
  5192 ;;  quotient        2    6[COMRAM] int 
  5193 ;;  sign            1    5[COMRAM] unsigned char 
  5194 ;;  counter         1    4[COMRAM] unsigned char 
  5195 ;; Return value:  Size  Location     Type
  5196 ;;                  2    0[COMRAM] int 
  5197 ;; Registers used:
  5198 ;;		wreg, status,2, status,0
  5199 ;; Tracked objects:
  5200 ;;		On entry : 0/0
  5201 ;;		On exit  : 0/0
  5202 ;;		Unchanged: 0/0
  5203 ;; Data sizes:     COMRAM   BANK0   BANK1
  5204 ;;      Params:         4       0       0
  5205 ;;      Locals:         4       0       0
  5206 ;;      Temps:          0       0       0
  5207 ;;      Totals:         8       0       0
  5208 ;;Total ram usage:        8 bytes
  5209 ;; Hardware stack levels used:    1
  5210 ;; Hardware stack levels required when called:    1
  5211 ;; This function calls:
  5212 ;;		Nothing
  5213 ;; This function is called by:
  5214 ;;		_main
  5215 ;;		_LCD_PageSet
  5216 ;; This function uses a non-reentrant model
  5217 ;;
  5218                           
  5219                           	psect	text28
  5220  001398                     __ptext28:
  5221                           	opt callstack 0
  5222  001398                     ___awdiv:
  5223                           	opt callstack 29
  5224                           
  5225                           ;incstack = 0
  5226  001398  0E00               	movlw	0
  5227  00139A  6E06               	movwf	___awdiv@sign,c
  5228  00139C  AE04               	btfss	___awdiv@divisor+1,7,c
  5229  00139E  D006               	goto	l3679
  5230  0013A0  6C03               	negf	___awdiv@divisor,c
  5231  0013A2  1E04               	comf	___awdiv@divisor+1,f,c
  5232  0013A4  B0D8               	btfsc	status,0,c
  5233  0013A6  2A04               	incf	___awdiv@divisor+1,f,c
  5234  0013A8  0E01               	movlw	1
  5235  0013AA  6E06               	movwf	___awdiv@sign,c
  5236  0013AC                     l3679:
  5237  0013AC  AE02               	btfss	___awdiv@dividend+1,7,c
  5238  0013AE  D006               	goto	l3685
  5239  0013B0  6C01               	negf	___awdiv@dividend,c
  5240  0013B2  1E02               	comf	___awdiv@dividend+1,f,c
  5241  0013B4  B0D8               	btfsc	status,0,c
  5242  0013B6  2A02               	incf	___awdiv@dividend+1,f,c
  5243  0013B8  0E01               	movlw	1
  5244  0013BA  1A06               	xorwf	___awdiv@sign,f,c
  5245  0013BC                     l3685:
  5246  0013BC  0E00               	movlw	0
  5247  0013BE  6E08               	movwf	___awdiv@quotient+1,c
  5248  0013C0  0E00               	movlw	0
  5249  0013C2  6E07               	movwf	___awdiv@quotient,c
  5250  0013C4  5003               	movf	___awdiv@divisor,w,c
  5251  0013C6  1004               	iorwf	___awdiv@divisor+1,w,c
  5252  0013C8  B4D8               	btfsc	status,2,c
  5253  0013CA  D01C               	goto	l3707
  5254  0013CC  0E01               	movlw	1
  5255  0013CE  6E05               	movwf	___awdiv@counter,c
  5256  0013D0  D004               	goto	l3693
  5257  0013D2                     l3691:
  5258  0013D2  90D8               	bcf	status,0,c
  5259  0013D4  3603               	rlcf	___awdiv@divisor,f,c
  5260  0013D6  3604               	rlcf	___awdiv@divisor+1,f,c
  5261  0013D8  2A05               	incf	___awdiv@counter,f,c
  5262  0013DA                     l3693:
  5263  0013DA  AE04               	btfss	___awdiv@divisor+1,7,c
  5264  0013DC  D7FA               	goto	l3691
  5265  0013DE                     u2780:
  5266  0013DE  90D8               	bcf	status,0,c
  5267  0013E0  3607               	rlcf	___awdiv@quotient,f,c
  5268  0013E2  3608               	rlcf	___awdiv@quotient+1,f,c
  5269  0013E4  5003               	movf	___awdiv@divisor,w,c
  5270  0013E6  5C01               	subwf	___awdiv@dividend,w,c
  5271  0013E8  5004               	movf	___awdiv@divisor+1,w,c
  5272  0013EA  5802               	subwfb	___awdiv@dividend+1,w,c
  5273  0013EC  A0D8               	btfss	status,0,c
  5274  0013EE  D005               	goto	l3703
  5275  0013F0  5003               	movf	___awdiv@divisor,w,c
  5276  0013F2  5E01               	subwf	___awdiv@dividend,f,c
  5277  0013F4  5004               	movf	___awdiv@divisor+1,w,c
  5278  0013F6  5A02               	subwfb	___awdiv@dividend+1,f,c
  5279  0013F8  8007               	bsf	___awdiv@quotient,0,c
  5280  0013FA                     l3703:
  5281  0013FA  90D8               	bcf	status,0,c
  5282  0013FC  3204               	rrcf	___awdiv@divisor+1,f,c
  5283  0013FE  3203               	rrcf	___awdiv@divisor,f,c
  5284  001400  2E05               	decfsz	___awdiv@counter,f,c
  5285  001402  D7ED               	goto	u2780
  5286  001404                     l3707:
  5287  001404  5006               	movf	___awdiv@sign,w,c
  5288  001406  B4D8               	btfsc	status,2,c
  5289  001408  D004               	goto	l3711
  5290  00140A  6C07               	negf	___awdiv@quotient,c
  5291  00140C  1E08               	comf	___awdiv@quotient+1,f,c
  5292  00140E  B0D8               	btfsc	status,0,c
  5293  001410  2A08               	incf	___awdiv@quotient+1,f,c
  5294  001412                     l3711:
  5295  001412  C007  F001         	movff	___awdiv@quotient,?___awdiv
  5296  001416  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  5297  00141A  0012               	return		;funcret
  5298  00141C                     __end_of___awdiv:
  5299                           	opt callstack 0
  5300                           
  5301 ;; *************** function _SYSTEM_Initialize *****************
  5302 ;; Defined at:
  5303 ;;		line 50 in file "mcc_generated_files/mcc.c"
  5304 ;; Parameters:    Size  Location     Type
  5305 ;;		None
  5306 ;; Auto vars:     Size  Location     Type
  5307 ;;		None
  5308 ;; Return value:  Size  Location     Type
  5309 ;;                  1    wreg      void 
  5310 ;; Registers used:
  5311 ;;		wreg, status,2, cstack
  5312 ;; Tracked objects:
  5313 ;;		On entry : 0/0
  5314 ;;		On exit  : 0/0
  5315 ;;		Unchanged: 0/0
  5316 ;; Data sizes:     COMRAM   BANK0   BANK1
  5317 ;;      Params:         0       0       0
  5318 ;;      Locals:         0       0       0
  5319 ;;      Temps:          0       0       0
  5320 ;;      Totals:         0       0       0
  5321 ;;Total ram usage:        0 bytes
  5322 ;; Hardware stack levels used:    1
  5323 ;; Hardware stack levels required when called:    2
  5324 ;; This function calls:
  5325 ;;		_INTERRUPT_Initialize
  5326 ;;		_OSCILLATOR_Initialize
  5327 ;;		_PIN_MANAGER_Initialize
  5328 ;; This function is called by:
  5329 ;;		_main
  5330 ;; This function uses a non-reentrant model
  5331 ;;
  5332                           
  5333                           	psect	text29
  5334  001B5C                     __ptext29:
  5335                           	opt callstack 0
  5336  001B5C                     _SYSTEM_Initialize:
  5337                           	opt callstack 28
  5338                           
  5339                           ;mcc_generated_files/mcc.c: 53:     INTERRUPT_Initialize();
  5340                           
  5341                           ;incstack = 0
  5342  001B5C  ECC8  F00D         	call	_INTERRUPT_Initialize	;wreg free
  5343                           
  5344                           ;mcc_generated_files/mcc.c: 54:     PIN_MANAGER_Initialize();
  5345  001B60  EC45  F00D         	call	_PIN_MANAGER_Initialize	;wreg free
  5346                           
  5347                           ;mcc_generated_files/mcc.c: 55:     OSCILLATOR_Initialize();
  5348  001B64  ECB5  F00D         	call	_OSCILLATOR_Initialize	;wreg free
  5349  001B68  0012               	return		;funcret
  5350  001B6A                     __end_of_SYSTEM_Initialize:
  5351                           	opt callstack 0
  5352                           
  5353 ;; *************** function _PIN_MANAGER_Initialize *****************
  5354 ;; Defined at:
  5355 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  5356 ;; Parameters:    Size  Location     Type
  5357 ;;		None
  5358 ;; Auto vars:     Size  Location     Type
  5359 ;;		None
  5360 ;; Return value:  Size  Location     Type
  5361 ;;                  1    wreg      void 
  5362 ;; Registers used:
  5363 ;;		wreg, status,2
  5364 ;; Tracked objects:
  5365 ;;		On entry : 0/0
  5366 ;;		On exit  : 0/0
  5367 ;;		Unchanged: 0/0
  5368 ;; Data sizes:     COMRAM   BANK0   BANK1
  5369 ;;      Params:         0       0       0
  5370 ;;      Locals:         0       0       0
  5371 ;;      Temps:          0       0       0
  5372 ;;      Totals:         0       0       0
  5373 ;;Total ram usage:        0 bytes
  5374 ;; Hardware stack levels used:    1
  5375 ;; Hardware stack levels required when called:    1
  5376 ;; This function calls:
  5377 ;;		Nothing
  5378 ;; This function is called by:
  5379 ;;		_SYSTEM_Initialize
  5380 ;; This function uses a non-reentrant model
  5381 ;;
  5382                           
  5383                           	psect	text30
  5384  001A8A                     __ptext30:
  5385                           	opt callstack 0
  5386  001A8A                     _PIN_MANAGER_Initialize:
  5387                           	opt callstack 28
  5388                           
  5389                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
  5390                           
  5391                           ;incstack = 0
  5392  001A8A  0E00               	movlw	0
  5393  001A8C  6E89               	movwf	3977,c	;volatile
  5394                           
  5395                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0x00;
  5396  001A8E  0E00               	movlw	0
  5397  001A90  6E8A               	movwf	3978,c	;volatile
  5398                           
  5399                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0x00;
  5400  001A92  0E00               	movlw	0
  5401  001A94  6E8B               	movwf	3979,c	;volatile
  5402                           
  5403                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x37;
  5404  001A96  0E37               	movlw	55
  5405  001A98  6E92               	movwf	3986,c	;volatile
  5406                           
  5407                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0x70;
  5408  001A9A  0E70               	movlw	112
  5409  001A9C  6E93               	movwf	3987,c	;volatile
  5410                           
  5411                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0x7F;
  5412  001A9E  0E7F               	movlw	127
  5413  001AA0  6E94               	movwf	3988,c	;volatile
  5414                           
  5415                           ;mcc_generated_files/pin_manager.c: 74:     ANSEL = 0xFF;
  5416  001AA2  687E               	setf	3966,c	;volatile
  5417                           
  5418                           ;mcc_generated_files/pin_manager.c: 75:     ANSELH = 0x09;
  5419  001AA4  0E09               	movlw	9
  5420  001AA6  6E7F               	movwf	3967,c	;volatile
  5421                           
  5422                           ;mcc_generated_files/pin_manager.c: 80:     WPUB = 0x50;
  5423  001AA8  0E50               	movlw	80
  5424  001AAA  6E78               	movwf	3960,c	;volatile
  5425                           
  5426                           ;mcc_generated_files/pin_manager.c: 81:     WPUA = 0x00;
  5427  001AAC  0E00               	movlw	0
  5428  001AAE  6E77               	movwf	3959,c	;volatile
  5429                           
  5430                           ;mcc_generated_files/pin_manager.c: 82:     INTCON2bits.nRBPU = 0;
  5431  001AB0  9EF1               	bcf	4081,7,c	;volatile
  5432  001AB2  0012               	return		;funcret
  5433  001AB4                     __end_of_PIN_MANAGER_Initialize:
  5434                           	opt callstack 0
  5435                           
  5436 ;; *************** function _OSCILLATOR_Initialize *****************
  5437 ;; Defined at:
  5438 ;;		line 58 in file "mcc_generated_files/mcc.c"
  5439 ;; Parameters:    Size  Location     Type
  5440 ;;		None
  5441 ;; Auto vars:     Size  Location     Type
  5442 ;;		None
  5443 ;; Return value:  Size  Location     Type
  5444 ;;                  1    wreg      void 
  5445 ;; Registers used:
  5446 ;;		wreg, status,2
  5447 ;; Tracked objects:
  5448 ;;		On entry : 0/0
  5449 ;;		On exit  : 0/0
  5450 ;;		Unchanged: 0/0
  5451 ;; Data sizes:     COMRAM   BANK0   BANK1
  5452 ;;      Params:         0       0       0
  5453 ;;      Locals:         0       0       0
  5454 ;;      Temps:          0       0       0
  5455 ;;      Totals:         0       0       0
  5456 ;;Total ram usage:        0 bytes
  5457 ;; Hardware stack levels used:    1
  5458 ;; Hardware stack levels required when called:    1
  5459 ;; This function calls:
  5460 ;;		Nothing
  5461 ;; This function is called by:
  5462 ;;		_SYSTEM_Initialize
  5463 ;; This function uses a non-reentrant model
  5464 ;;
  5465                           
  5466                           	psect	text31
  5467  001B6A                     __ptext31:
  5468                           	opt callstack 0
  5469  001B6A                     _OSCILLATOR_Initialize:
  5470                           	opt callstack 28
  5471                           
  5472                           ;mcc_generated_files/mcc.c: 61:     OSCCON = 0x70;
  5473                           
  5474                           ;incstack = 0
  5475  001B6A  0E70               	movlw	112
  5476  001B6C  6ED3               	movwf	4051,c	;volatile
  5477                           
  5478                           ;mcc_generated_files/mcc.c: 63:     OSCCON2 = 0x04;
  5479  001B6E  0E04               	movlw	4
  5480  001B70  6ED2               	movwf	4050,c	;volatile
  5481                           
  5482                           ;mcc_generated_files/mcc.c: 65:     OSCTUNE = 0x00;
  5483  001B72  0E00               	movlw	0
  5484  001B74  6E9B               	movwf	3995,c	;volatile
  5485  001B76  0012               	return		;funcret
  5486  001B78                     __end_of_OSCILLATOR_Initialize:
  5487                           	opt callstack 0
  5488                           
  5489 ;; *************** function _INTERRUPT_Initialize *****************
  5490 ;; Defined at:
  5491 ;;		line 55 in file "mcc_generated_files/interrupt_manager.c"
  5492 ;; Parameters:    Size  Location     Type
  5493 ;;		None
  5494 ;; Auto vars:     Size  Location     Type
  5495 ;;		None
  5496 ;; Return value:  Size  Location     Type
  5497 ;;                  1    wreg      void 
  5498 ;; Registers used:
  5499 ;;		None
  5500 ;; Tracked objects:
  5501 ;;		On entry : 0/0
  5502 ;;		On exit  : 0/0
  5503 ;;		Unchanged: 0/0
  5504 ;; Data sizes:     COMRAM   BANK0   BANK1
  5505 ;;      Params:         0       0       0
  5506 ;;      Locals:         0       0       0
  5507 ;;      Temps:          0       0       0
  5508 ;;      Totals:         0       0       0
  5509 ;;Total ram usage:        0 bytes
  5510 ;; Hardware stack levels used:    1
  5511 ;; Hardware stack levels required when called:    1
  5512 ;; This function calls:
  5513 ;;		Nothing
  5514 ;; This function is called by:
  5515 ;;		_SYSTEM_Initialize
  5516 ;; This function uses a non-reentrant model
  5517 ;;
  5518                           
  5519                           	psect	text32
  5520  001B90                     __ptext32:
  5521                           	opt callstack 0
  5522  001B90                     _INTERRUPT_Initialize:
  5523                           	opt callstack 28
  5524                           
  5525                           ;mcc_generated_files/interrupt_manager.c: 58:     RCONbits.IPEN = 0;
  5526                           
  5527                           ;incstack = 0
  5528  001B90  9ED0               	bcf	4048,7,c	;volatile
  5529  001B92  0012               	return		;funcret
  5530  001B94                     __end_of_INTERRUPT_Initialize:
  5531                           	opt callstack 0
  5532                           
  5533 ;; *************** function _LCD_SetCursor *****************
  5534 ;; Defined at:
  5535 ;;		line 96 in file "skI2CLCDlib.c"
  5536 ;; Parameters:    Size  Location     Type
  5537 ;;  col             2   10[COMRAM] int 
  5538 ;;  row             2   12[COMRAM] int 
  5539 ;; Auto vars:     Size  Location     Type
  5540 ;;  row_offsets     4   14[COMRAM] int [2]
  5541 ;; Return value:  Size  Location     Type
  5542 ;;                  1    wreg      void 
  5543 ;; Registers used:
  5544 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5545 ;; Tracked objects:
  5546 ;;		On entry : 0/0
  5547 ;;		On exit  : 0/0
  5548 ;;		Unchanged: 0/0
  5549 ;; Data sizes:     COMRAM   BANK0   BANK1
  5550 ;;      Params:         4       0       0
  5551 ;;      Locals:         4       0       0
  5552 ;;      Temps:          0       0       0
  5553 ;;      Totals:         8       0       0
  5554 ;;Total ram usage:        8 bytes
  5555 ;; Hardware stack levels used:    1
  5556 ;; Hardware stack levels required when called:    4
  5557 ;; This function calls:
  5558 ;;		_LCD_Command
  5559 ;; This function is called by:
  5560 ;;		_main
  5561 ;;		_LCD_PageClear
  5562 ;;		_LCD_PageSetCursor
  5563 ;;		_Color_Read
  5564 ;;		_Color
  5565 ;; This function uses a non-reentrant model
  5566 ;;
  5567                           
  5568                           	psect	text33
  5569  001A32                     __ptext33:
  5570                           	opt callstack 0
  5571  001A32                     _LCD_SetCursor:
  5572                           	opt callstack 26
  5573                           
  5574                           ;skI2CLCDlib.c: 96: void LCD_SetCursor(int col, int row);skI2CLCDlib.c: 97: {;skI2CLCDli
      +                          b.c: 98:      int row_offsets[] = { 0x00, 0x40 } ;
  5575                           
  5576                           ;incstack = 0
  5577  001A32  C0EE  F00F         	movff	LCD_SetCursor@F2916,LCD_SetCursor@row_offsets
  5578  001A36  C0EF  F010         	movff	LCD_SetCursor@F2916+1,LCD_SetCursor@row_offsets+1
  5579  001A3A  C0F0  F011         	movff	LCD_SetCursor@F2916+2,LCD_SetCursor@row_offsets+2
  5580  001A3E  C0F1  F012         	movff	LCD_SetCursor@F2916+3,LCD_SetCursor@row_offsets+3
  5581                           
  5582                           ;skI2CLCDlib.c: 100:      LCD_Command(0x80 | (col + row_offsets[row])) ;
  5583  001A42  90D8               	bcf	status,0,c
  5584  001A44  340D               	rlcf	LCD_SetCursor@row,w,c
  5585  001A46  6ED9               	movwf	fsr2l,c
  5586  001A48  340E               	rlcf	LCD_SetCursor@row+1,w,c
  5587  001A4A  6EDA               	movwf	fsr2h,c
  5588  001A4C  0E0F               	movlw	low LCD_SetCursor@row_offsets
  5589  001A4E  26D9               	addwf	fsr2l,f,c
  5590  001A50  0E00               	movlw	high LCD_SetCursor@row_offsets
  5591  001A52  22DA               	addwfc	fsr2h,f,c
  5592  001A54  50DF               	movf	indf2,w,c
  5593  001A56  240B               	addwf	LCD_SetCursor@col,w,c
  5594  001A58  0980               	iorlw	128
  5595  001A5A  EC2E  F00C         	call	_LCD_Command
  5596  001A5E  0012               	return		;funcret
  5597  001A60                     __end_of_LCD_SetCursor:
  5598                           	opt callstack 0
  5599                           
  5600 ;; *************** function _LCD_Puts *****************
  5601 ;; Defined at:
  5602 ;;		line 128 in file "skI2CLCDlib.c"
  5603 ;; Parameters:    Size  Location     Type
  5604 ;;  s               2    7[COMRAM] PTR const unsigned char 
  5605 ;;		 -> Color@buf(16), Color_Read@buf(16), main@s(8), moji(17), 
  5606 ;; Auto vars:     Size  Location     Type
  5607 ;;  ans             2   10[COMRAM] int 
  5608 ;; Return value:  Size  Location     Type
  5609 ;;                  1    wreg      void 
  5610 ;; Registers used:
  5611 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5612 ;; Tracked objects:
  5613 ;;		On entry : 0/0
  5614 ;;		On exit  : 0/0
  5615 ;;		Unchanged: 0/0
  5616 ;; Data sizes:     COMRAM   BANK0   BANK1
  5617 ;;      Params:         2       0       0
  5618 ;;      Locals:         2       0       0
  5619 ;;      Temps:          1       0       0
  5620 ;;      Totals:         5       0       0
  5621 ;;Total ram usage:        5 bytes
  5622 ;; Hardware stack levels used:    1
  5623 ;; Hardware stack levels required when called:    3
  5624 ;; This function calls:
  5625 ;;		_I2C_Send
  5626 ;;		_I2C_Start
  5627 ;;		_I2C_Stop
  5628 ;; This function is called by:
  5629 ;;		_main
  5630 ;;		_Color_Read
  5631 ;;		_Color
  5632 ;; This function uses a non-reentrant model
  5633 ;;
  5634                           
  5635                           	psect	text34
  5636  00162A                     __ptext34:
  5637                           	opt callstack 0
  5638  00162A                     _LCD_Puts:
  5639                           	opt callstack 27
  5640                           
  5641                           ;skI2CLCDlib.c: 128: void LCD_Puts(const char * s);skI2CLCDlib.c: 129: {;skI2CLCDlib.c: 
      +                          130:      int ans ;;skI2CLCDlib.c: 132:      ans = I2C_Start(0x3E,0);
  5642                           
  5643                           ;incstack = 0
  5644  00162A  0E00               	movlw	0
  5645  00162C  6E04               	movwf	I2C_Start@adrs+1,c
  5646  00162E  0E3E               	movlw	62
  5647  001630  6E03               	movwf	I2C_Start@adrs,c
  5648  001632  0E00               	movlw	0
  5649  001634  6E06               	movwf	I2C_Start@rw+1,c
  5650  001636  0E00               	movlw	0
  5651  001638  6E05               	movwf	I2C_Start@rw,c
  5652  00163A  EC0E  F00A         	call	_I2C_Start	;wreg free
  5653  00163E  C003  F00B         	movff	?_I2C_Start,LCD_Puts@ans
  5654  001642  C004  F00C         	movff	?_I2C_Start+1,LCD_Puts@ans+1
  5655                           
  5656                           ;skI2CLCDlib.c: 133:      if (ans == 0) {
  5657  001646  500B               	movf	LCD_Puts@ans,w,c
  5658  001648  100C               	iorwf	LCD_Puts@ans+1,w,c
  5659  00164A  A4D8               	btfss	status,2,c
  5660  00164C  D01B               	goto	u2700
  5661                           
  5662                           ;skI2CLCDlib.c: 134:           I2C_Send(0b01000000) ;
  5663  00164E  0E40               	movlw	64
  5664  001650  ECC3  F00B         	call	_I2C_Send
  5665                           
  5666                           ;skI2CLCDlib.c: 135:           while(*s) {
  5667  001654  D010               	goto	l3615
  5668  001656                     l3609:
  5669                           
  5670                           ;skI2CLCDlib.c: 136:                I2C_Send(*s++) ;
  5671  001656  C008  FFD9         	movff	LCD_Puts@s,fsr2l
  5672  00165A  C009  FFDA         	movff	LCD_Puts@s+1,fsr2h
  5673  00165E  50DF               	movf	indf2,w,c
  5674  001660  ECC3  F00B         	call	_I2C_Send
  5675  001664  4A08               	infsnz	LCD_Puts@s,f,c
  5676  001666  2A09               	incf	LCD_Puts@s+1,f,c
  5677                           
  5678                           ;skI2CLCDlib.c: 137:                _delay((unsigned long)((10)*(16000000/4000.0)));
  5679  001668  0E34               	movlw	52
  5680  00166A  6E0A               	movwf	??_LCD_Puts& (0+255),c
  5681  00166C  0EF2               	movlw	242
  5682  00166E                     u3127:
  5683  00166E  2EE8               	decfsz	wreg,f,c
  5684  001670  D7FE               	bra	u3127
  5685  001672  2E0A               	decfsz	??_LCD_Puts& (0+255),f,c
  5686  001674  D7FC               	bra	u3127
  5687  001676                     l3615:
  5688                           
  5689                           ;skI2CLCDlib.c: 135:           while(*s) {
  5690  001676  C008  FFD9         	movff	LCD_Puts@s,fsr2l
  5691  00167A  C009  FFDA         	movff	LCD_Puts@s+1,fsr2h
  5692  00167E  50DF               	movf	indf2,w,c
  5693  001680  A4D8               	btfss	status,2,c
  5694  001682  D7E9               	goto	l3609
  5695  001684                     u2700:
  5696                           
  5697                           ;skI2CLCDlib.c: 140:      I2C_Stop() ;
  5698  001684  EC9C  F00D         	call	_I2C_Stop	;wreg free
  5699  001688  0012               	return		;funcret
  5700  00168A                     __end_of_LCD_Puts:
  5701                           	opt callstack 0
  5702                           
  5703 ;; *************** function _LCD_Init_ST7032i *****************
  5704 ;; Defined at:
  5705 ;;		line 329 in file "skI2CLCDlib.c"
  5706 ;; Parameters:    Size  Location     Type
  5707 ;;  icon            2   10[COMRAM] int 
  5708 ;;  contrast        2   12[COMRAM] int 
  5709 ;;  bon             2   14[COMRAM] int 
  5710 ;;  colsu           2   16[COMRAM] int 
  5711 ;; Auto vars:     Size  Location     Type
  5712 ;;  d               2   21[COMRAM] unsigned int 
  5713 ;; Return value:  Size  Location     Type
  5714 ;;                  1    wreg      void 
  5715 ;; Registers used:
  5716 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5717 ;; Tracked objects:
  5718 ;;		On entry : 0/0
  5719 ;;		On exit  : 0/0
  5720 ;;		Unchanged: 0/0
  5721 ;; Data sizes:     COMRAM   BANK0   BANK1
  5722 ;;      Params:         8       0       0
  5723 ;;      Locals:         2       0       0
  5724 ;;      Temps:          3       0       0
  5725 ;;      Totals:        13       0       0
  5726 ;;Total ram usage:       13 bytes
  5727 ;; Hardware stack levels used:    1
  5728 ;; Hardware stack levels required when called:    4
  5729 ;; This function calls:
  5730 ;;		_LCD_Command
  5731 ;;		_Wait10ms
  5732 ;; This function is called by:
  5733 ;;		_main
  5734 ;; This function uses a non-reentrant model
  5735 ;;
  5736                           
  5737                           	psect	text35
  5738  0010B6                     __ptext35:
  5739                           	opt callstack 0
  5740  0010B6                     _LCD_Init_ST7032i:
  5741                           	opt callstack 26
  5742                           
  5743                           ;skI2CLCDlib.c: 329: void LCD_Init_ST7032i(int icon, int contrast, int bon, int colsu);s
      +                          kI2CLCDlib.c: 330: {;skI2CLCDlib.c: 331:      unsigned int d ;;skI2CLCDlib.c: 332:      
      +                          _delay((unsigned long)((400)*(16000000/4000.0)));
  5744                           
  5745                           ;incstack = 0
  5746  0010B6  0E09               	movlw	9
  5747  0010B8  6E14               	movwf	(??_LCD_Init_ST7032i+1)& (0+255),c
  5748  0010BA  0E1E               	movlw	30
  5749  0010BC  6E13               	movwf	??_LCD_Init_ST7032i& (0+255),c
  5750  0010BE  0EE4               	movlw	228
  5751  0010C0                     u3137:
  5752  0010C0  2EE8               	decfsz	wreg,f,c
  5753  0010C2  D7FE               	bra	u3137
  5754  0010C4  2E13               	decfsz	??_LCD_Init_ST7032i& (0+255),f,c
  5755  0010C6  D7FC               	bra	u3137
  5756  0010C8  2E14               	decfsz	(??_LCD_Init_ST7032i+1)& (0+255),f,c
  5757  0010CA  D7FA               	bra	u3137
  5758  0010CC  D000               	nop2	
  5759                           
  5760                           ;skI2CLCDlib.c: 333:      LCD_ColumnSu = colsu ;
  5761  0010CE  C011  F07C         	movff	LCD_Init_ST7032i@colsu,_LCD_ColumnSu
  5762  0010D2  C012  F07D         	movff	LCD_Init_ST7032i@colsu+1,_LCD_ColumnSu+1
  5763                           
  5764                           ;skI2CLCDlib.c: 334:      Wait10ms(4) ;
  5765  0010D6  0E00               	movlw	0
  5766  0010D8  6E02               	movwf	Wait10ms@num+1,c
  5767  0010DA  0E04               	movlw	4
  5768  0010DC  6E01               	movwf	Wait10ms@num,c
  5769  0010DE  EC82  F00D         	call	_Wait10ms	;wreg free
  5770                           
  5771                           ;skI2CLCDlib.c: 335:      FuncSet_DT = 0x38 ;
  5772  0010E2  0E00               	movlw	0
  5773  0010E4  0100               	movlb	0	; () banked
  5774  0010E6  6F79               	movwf	(_FuncSet_DT+1)& (0+255),b
  5775  0010E8  0E38               	movlw	56
  5776  0010EA  6F78               	movwf	_FuncSet_DT& (0+255),b
  5777                           
  5778                           ; BSR set to: 0
  5779                           ;skI2CLCDlib.c: 336:      LCD_Command(FuncSet_DT);
  5780  0010EC  5178               	movf	_FuncSet_DT& (0+255),w,b
  5781  0010EE  EC2E  F00C         	call	_LCD_Command
  5782                           
  5783                           ;skI2CLCDlib.c: 337:      LCD_Command(0x39) ;
  5784  0010F2  0E39               	movlw	57
  5785  0010F4  EC2E  F00C         	call	_LCD_Command
  5786                           
  5787                           ;skI2CLCDlib.c: 338:      LCD_Command(0x14) ;
  5788  0010F8  0E14               	movlw	20
  5789  0010FA  EC2E  F00C         	call	_LCD_Command
  5790                           
  5791                           ;skI2CLCDlib.c: 339:      d = 0x70 | (contrast & 0x0F) ;
  5792  0010FE  0E0F               	movlw	15
  5793  001100  140D               	andwf	LCD_Init_ST7032i@contrast,w,c
  5794  001102  6E13               	movwf	??_LCD_Init_ST7032i& (0+255),c
  5795  001104  0E00               	movlw	0
  5796  001106  140E               	andwf	LCD_Init_ST7032i@contrast+1,w,c
  5797  001108  6E14               	movwf	(??_LCD_Init_ST7032i+1)& (0+255),c
  5798  00110A  0E70               	movlw	112
  5799  00110C  1013               	iorwf	??_LCD_Init_ST7032i,w,c
  5800  00110E  6E16               	movwf	LCD_Init_ST7032i@d,c
  5801  001110  5014               	movf	??_LCD_Init_ST7032i+1,w,c
  5802  001112  6E17               	movwf	LCD_Init_ST7032i@d+1,c
  5803                           
  5804                           ;skI2CLCDlib.c: 340:      LCD_Command(d) ;
  5805  001114  5016               	movf	LCD_Init_ST7032i@d,w,c
  5806  001116  EC2E  F00C         	call	_LCD_Command
  5807                           
  5808                           ;skI2CLCDlib.c: 341:      d = 0x50 | ((contrast & 0x30) >> 4) ;
  5809  00111A  C00D  F013         	movff	LCD_Init_ST7032i@contrast,??_LCD_Init_ST7032i
  5810  00111E  C00E  F014         	movff	LCD_Init_ST7032i@contrast+1,??_LCD_Init_ST7032i+1
  5811  001122  0E04               	movlw	4
  5812  001124  6E15               	movwf	(??_LCD_Init_ST7032i+2)& (0+255),c
  5813  001126                     u2655:
  5814  001126  3414               	rlcf	??_LCD_Init_ST7032i+1,w,c
  5815  001128  3214               	rrcf	??_LCD_Init_ST7032i+1,f,c
  5816  00112A  3213               	rrcf	??_LCD_Init_ST7032i,f,c
  5817  00112C  2E15               	decfsz	(??_LCD_Init_ST7032i+2)& (0+255),f,c
  5818  00112E  D7FB               	goto	u2655
  5819  001130  0E03               	movlw	3
  5820  001132  1613               	andwf	??_LCD_Init_ST7032i,f,c
  5821  001134  0E00               	movlw	0
  5822  001136  1614               	andwf	??_LCD_Init_ST7032i+1,f,c
  5823  001138  0E50               	movlw	80
  5824  00113A  1013               	iorwf	??_LCD_Init_ST7032i,w,c
  5825  00113C  6E16               	movwf	LCD_Init_ST7032i@d,c
  5826  00113E  5014               	movf	??_LCD_Init_ST7032i+1,w,c
  5827  001140  6E17               	movwf	LCD_Init_ST7032i@d+1,c
  5828                           
  5829                           ;skI2CLCDlib.c: 342:      if (icon == 1) d = d | 0x08 ;
  5830  001142  040B               	decf	LCD_Init_ST7032i@icon,w,c
  5831  001144  100C               	iorwf	LCD_Init_ST7032i@icon+1,w,c
  5832  001146  A4D8               	btfss	status,2,c
  5833  001148  D005               	goto	l380
  5834  00114A  0E08               	movlw	8
  5835  00114C  1016               	iorwf	LCD_Init_ST7032i@d,w,c
  5836  00114E  6E16               	movwf	LCD_Init_ST7032i@d,c
  5837  001150  5017               	movf	LCD_Init_ST7032i@d+1,w,c
  5838  001152  6E17               	movwf	LCD_Init_ST7032i@d+1,c
  5839  001154                     l380:
  5840                           
  5841                           ;skI2CLCDlib.c: 343:      if (bon == 1) d = d | 0x04 ;
  5842  001154  040F               	decf	LCD_Init_ST7032i@bon,w,c
  5843  001156  1010               	iorwf	LCD_Init_ST7032i@bon+1,w,c
  5844  001158  A4D8               	btfss	status,2,c
  5845  00115A  D005               	goto	l3567
  5846  00115C  0E04               	movlw	4
  5847  00115E  1016               	iorwf	LCD_Init_ST7032i@d,w,c
  5848  001160  6E16               	movwf	LCD_Init_ST7032i@d,c
  5849  001162  5017               	movf	LCD_Init_ST7032i@d+1,w,c
  5850  001164  6E17               	movwf	LCD_Init_ST7032i@d+1,c
  5851  001166                     l3567:
  5852                           
  5853                           ;skI2CLCDlib.c: 344:      ContSet_DT = d ;
  5854  001166  C016  F076         	movff	LCD_Init_ST7032i@d,_ContSet_DT
  5855  00116A  C017  F077         	movff	LCD_Init_ST7032i@d+1,_ContSet_DT+1
  5856                           
  5857                           ;skI2CLCDlib.c: 345:      LCD_Command(0x56) ;
  5858  00116E  0E56               	movlw	86
  5859  001170  EC2E  F00C         	call	_LCD_Command
  5860                           
  5861                           ;skI2CLCDlib.c: 346:      LCD_Command(0x6C) ;
  5862  001174  0E6C               	movlw	108
  5863  001176  EC2E  F00C         	call	_LCD_Command
  5864                           
  5865                           ;skI2CLCDlib.c: 347:      Wait10ms(20) ;
  5866  00117A  0E00               	movlw	0
  5867  00117C  6E02               	movwf	Wait10ms@num+1,c
  5868  00117E  0E14               	movlw	20
  5869  001180  6E01               	movwf	Wait10ms@num,c
  5870  001182  EC82  F00D         	call	_Wait10ms	;wreg free
  5871                           
  5872                           ;skI2CLCDlib.c: 348:      LCD_Command(FuncSet_DT);
  5873  001186  0100               	movlb	0	; () banked
  5874  001188  5178               	movf	_FuncSet_DT& (0+255),w,b
  5875  00118A  EC2E  F00C         	call	_LCD_Command
  5876                           
  5877                           ;skI2CLCDlib.c: 349:      LCD_Command(0x01) ;
  5878  00118E  0E01               	movlw	1
  5879  001190  EC2E  F00C         	call	_LCD_Command
  5880                           
  5881                           ;skI2CLCDlib.c: 350:      LCD_Command(0x0C) ;
  5882  001194  0E0C               	movlw	12
  5883  001196  EC2E  F00C         	call	_LCD_Command
  5884  00119A  0012               	return		;funcret
  5885  00119C                     __end_of_LCD_Init_ST7032i:
  5886                           	opt callstack 0
  5887                           
  5888 ;; *************** function _Wait10ms *****************
  5889 ;; Defined at:
  5890 ;;		line 48 in file "skI2CLCDlib.c"
  5891 ;; Parameters:    Size  Location     Type
  5892 ;;  num             2    0[COMRAM] unsigned int 
  5893 ;; Auto vars:     Size  Location     Type
  5894 ;;		None
  5895 ;; Return value:  Size  Location     Type
  5896 ;;                  1    wreg      void 
  5897 ;; Registers used:
  5898 ;;		wreg, status,2, status,0
  5899 ;; Tracked objects:
  5900 ;;		On entry : 0/0
  5901 ;;		On exit  : 0/0
  5902 ;;		Unchanged: 0/0
  5903 ;; Data sizes:     COMRAM   BANK0   BANK1
  5904 ;;      Params:         2       0       0
  5905 ;;      Locals:         0       0       0
  5906 ;;      Temps:          1       0       0
  5907 ;;      Totals:         3       0       0
  5908 ;;Total ram usage:        3 bytes
  5909 ;; Hardware stack levels used:    1
  5910 ;; Hardware stack levels required when called:    1
  5911 ;; This function calls:
  5912 ;;		Nothing
  5913 ;; This function is called by:
  5914 ;;		_LCD_Init_ST7032i
  5915 ;; This function uses a non-reentrant model
  5916 ;;
  5917                           
  5918                           	psect	text36
  5919  001B04                     __ptext36:
  5920                           	opt callstack 0
  5921  001B04                     _Wait10ms:
  5922                           	opt callstack 28
  5923                           
  5924                           ;skI2CLCDlib.c: 51:           _delay((unsigned long)((10)*(16000000/4000.0))) ;
  5925                           
  5926                           ;incstack = 0
  5927                           ;skI2CLCDlib.c: 48: void Wait10ms(unsigned int num);skI2CLCDlib.c: 49: {;skI2CLCDlib.c: 
      +                          50:      do {
  5928  001B04  0E34               	movlw	52
  5929  001B06  6E03               	movwf	??_Wait10ms& (0+255),c
  5930  001B08  0EF2               	movlw	242
  5931  001B0A                     u3147:
  5932  001B0A  2EE8               	decfsz	wreg,f,c
  5933  001B0C  D7FE               	bra	u3147
  5934  001B0E  2E03               	decfsz	??_Wait10ms& (0+255),f,c
  5935  001B10  D7FC               	bra	u3147
  5936                           
  5937                           ;skI2CLCDlib.c: 52:      } while(--num != 0);
  5938  001B12  0601               	decf	Wait10ms@num,f,c
  5939  001B14  A0D8               	btfss	status,0,c
  5940  001B16  0602               	decf	Wait10ms@num+1,f,c
  5941  001B18  5001               	movf	Wait10ms@num,w,c
  5942  001B1A  1002               	iorwf	Wait10ms@num+1,w,c
  5943  001B1C  B4D8               	btfsc	status,2,c
  5944  001B1E  0012               	return	
  5945  001B20  D7F1               	goto	_Wait10ms
  5946  001B22                     __end_of_Wait10ms:
  5947                           	opt callstack 0
  5948                           
  5949 ;; *************** function _LCD_Clear *****************
  5950 ;; Defined at:
  5951 ;;		line 79 in file "skI2CLCDlib.c"
  5952 ;; Parameters:    Size  Location     Type
  5953 ;;		None
  5954 ;; Auto vars:     Size  Location     Type
  5955 ;;		None
  5956 ;; Return value:  Size  Location     Type
  5957 ;;                  1    wreg      void 
  5958 ;; Registers used:
  5959 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5960 ;; Tracked objects:
  5961 ;;		On entry : 0/0
  5962 ;;		On exit  : 0/0
  5963 ;;		Unchanged: 0/0
  5964 ;; Data sizes:     COMRAM   BANK0   BANK1
  5965 ;;      Params:         0       0       0
  5966 ;;      Locals:         0       0       0
  5967 ;;      Temps:          1       0       0
  5968 ;;      Totals:         1       0       0
  5969 ;;Total ram usage:        1 bytes
  5970 ;; Hardware stack levels used:    1
  5971 ;; Hardware stack levels required when called:    4
  5972 ;; This function calls:
  5973 ;;		_LCD_Command
  5974 ;; This function is called by:
  5975 ;;		_main
  5976 ;;		_Color_Read
  5977 ;;		_Color
  5978 ;; This function uses a non-reentrant model
  5979 ;;
  5980                           
  5981                           	psect	text37
  5982  00193C                     __ptext37:
  5983                           	opt callstack 0
  5984  00193C                     _LCD_Clear:
  5985                           	opt callstack 26
  5986                           
  5987                           ;skI2CLCDlib.c: 81:      LCD_Command(0x01) ;
  5988                           
  5989                           ;incstack = 0
  5990  00193C  0E01               	movlw	1
  5991  00193E  EC2E  F00C         	call	_LCD_Command
  5992                           
  5993                           ;skI2CLCDlib.c: 82:      _delay((unsigned long)((1100)*(16000000/4000000.0))) ;
  5994  001942  0E06               	movlw	6
  5995  001944  6E0B               	movwf	??_LCD_Clear& (0+255),c
  5996  001946  0EB6               	movlw	182
  5997  001948                     u3157:
  5998  001948  2EE8               	decfsz	wreg,f,c
  5999  00194A  D7FE               	bra	u3157
  6000  00194C  2E0B               	decfsz	??_LCD_Clear& (0+255),f,c
  6001  00194E  D7FC               	bra	u3157
  6002                           
  6003                           ;skI2CLCDlib.c: 83:      LCD_Command(0x02) ;
  6004  001950  0E02               	movlw	2
  6005  001952  EC2E  F00C         	call	_LCD_Command
  6006                           
  6007                           ;skI2CLCDlib.c: 84:      _delay((unsigned long)((1100)*(16000000/4000000.0))) ;
  6008  001956  0E06               	movlw	6
  6009  001958  6E0B               	movwf	??_LCD_Clear& (0+255),c
  6010  00195A  0EB6               	movlw	182
  6011  00195C                     u3167:
  6012  00195C  2EE8               	decfsz	wreg,f,c
  6013  00195E  D7FE               	bra	u3167
  6014  001960  2E0B               	decfsz	??_LCD_Clear& (0+255),f,c
  6015  001962  D7FC               	bra	u3167
  6016                           
  6017                           ;skI2CLCDlib.c: 85:      LCD_NowPage = 0 ;
  6018  001964  0E00               	movlw	0
  6019  001966  0100               	movlb	0	; () banked
  6020  001968  6F7B               	movwf	(_LCD_NowPage+1)& (0+255),b
  6021  00196A  0E00               	movlw	0
  6022  00196C  6F7A               	movwf	_LCD_NowPage& (0+255),b
  6023                           
  6024                           ; BSR set to: 0
  6025  00196E  0012               	return		;funcret
  6026  001970                     __end_of_LCD_Clear:
  6027                           	opt callstack 0
  6028                           
  6029 ;; *************** function _LCD_Command *****************
  6030 ;; Defined at:
  6031 ;;		line 60 in file "skI2CLCDlib.c"
  6032 ;; Parameters:    Size  Location     Type
  6033 ;;  c               1    wreg     unsigned char 
  6034 ;; Auto vars:     Size  Location     Type
  6035 ;;  c               1    9[COMRAM] unsigned char 
  6036 ;;  ans             2    7[COMRAM] int 
  6037 ;; Return value:  Size  Location     Type
  6038 ;;                  1    wreg      void 
  6039 ;; Registers used:
  6040 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6041 ;; Tracked objects:
  6042 ;;		On entry : 0/0
  6043 ;;		On exit  : 0/0
  6044 ;;		Unchanged: 0/0
  6045 ;; Data sizes:     COMRAM   BANK0   BANK1
  6046 ;;      Params:         0       0       0
  6047 ;;      Locals:         3       0       0
  6048 ;;      Temps:          0       0       0
  6049 ;;      Totals:         3       0       0
  6050 ;;Total ram usage:        3 bytes
  6051 ;; Hardware stack levels used:    1
  6052 ;; Hardware stack levels required when called:    3
  6053 ;; This function calls:
  6054 ;;		_I2C_Send
  6055 ;;		_I2C_Start
  6056 ;;		_I2C_Stop
  6057 ;;		_Wait27us
  6058 ;; This function is called by:
  6059 ;;		_LCD_Clear
  6060 ;;		_LCD_SetCursor
  6061 ;;		_LCD_Init_ST7032i
  6062 ;;		_LCD_IconClear
  6063 ;;		_LCD_IconOnOff
  6064 ;;		_LCD_PageSet
  6065 ;;		_LCD_Contrast
  6066 ;; This function uses a non-reentrant model
  6067 ;;
  6068                           
  6069                           	psect	text38
  6070  00185C                     __ptext38:
  6071                           	opt callstack 0
  6072  00185C                     _LCD_Command:
  6073                           	opt callstack 26
  6074                           
  6075                           ; BSR set to: 0
  6076                           ;incstack = 0
  6077                           ;LCD_Command@c stored from wreg
  6078  00185C  6E0A               	movwf	LCD_Command@c,c
  6079                           
  6080                           ;skI2CLCDlib.c: 60: void LCD_Command(unsigned char c);skI2CLCDlib.c: 61: {;skI2CLCDlib.c
      +                          : 62:      int ans ;;skI2CLCDlib.c: 64:      ans = I2C_Start(0x3E,0);
  6081  00185E  0E00               	movlw	0
  6082  001860  6E04               	movwf	I2C_Start@adrs+1,c
  6083  001862  0E3E               	movlw	62
  6084  001864  6E03               	movwf	I2C_Start@adrs,c
  6085  001866  0E00               	movlw	0
  6086  001868  6E06               	movwf	I2C_Start@rw+1,c
  6087  00186A  0E00               	movlw	0
  6088  00186C  6E05               	movwf	I2C_Start@rw,c
  6089  00186E  EC0E  F00A         	call	_I2C_Start	;wreg free
  6090  001872  C003  F008         	movff	?_I2C_Start,LCD_Command@ans
  6091  001876  C004  F009         	movff	?_I2C_Start+1,LCD_Command@ans+1
  6092                           
  6093                           ;skI2CLCDlib.c: 65:      if (ans == 0) {
  6094  00187A  5008               	movf	LCD_Command@ans,w,c
  6095  00187C  1009               	iorwf	LCD_Command@ans+1,w,c
  6096  00187E  A4D8               	btfss	status,2,c
  6097  001880  D006               	goto	l308
  6098                           
  6099                           ;skI2CLCDlib.c: 67:           I2C_Send(0b10000000) ;
  6100  001882  0E80               	movlw	128
  6101  001884  ECC3  F00B         	call	_I2C_Send
  6102                           
  6103                           ;skI2CLCDlib.c: 68:           I2C_Send(c) ;
  6104  001888  500A               	movf	LCD_Command@c,w,c
  6105  00188A  ECC3  F00B         	call	_I2C_Send
  6106  00188E                     l308:
  6107                           
  6108                           ;skI2CLCDlib.c: 70:      I2C_Stop() ;
  6109  00188E  EC9C  F00D         	call	_I2C_Stop	;wreg free
  6110                           
  6111                           ;skI2CLCDlib.c: 71:      Wait27us() ;
  6112  001892  ECC3  F00D         	call	_Wait27us	;wreg free
  6113  001896  0012               	return		;funcret
  6114  001898                     __end_of_LCD_Command:
  6115                           	opt callstack 0
  6116                           
  6117 ;; *************** function _Wait27us *****************
  6118 ;; Defined at:
  6119 ;;		line 55 in file "skI2CLCDlib.c"
  6120 ;; Parameters:    Size  Location     Type
  6121 ;;		None
  6122 ;; Auto vars:     Size  Location     Type
  6123 ;;		None
  6124 ;; Return value:  Size  Location     Type
  6125 ;;                  1    wreg      void 
  6126 ;; Registers used:
  6127 ;;		wreg
  6128 ;; Tracked objects:
  6129 ;;		On entry : 0/0
  6130 ;;		On exit  : 0/0
  6131 ;;		Unchanged: 0/0
  6132 ;; Data sizes:     COMRAM   BANK0   BANK1
  6133 ;;      Params:         0       0       0
  6134 ;;      Locals:         0       0       0
  6135 ;;      Temps:          0       0       0
  6136 ;;      Totals:         0       0       0
  6137 ;;Total ram usage:        0 bytes
  6138 ;; Hardware stack levels used:    1
  6139 ;; Hardware stack levels required when called:    1
  6140 ;; This function calls:
  6141 ;;		Nothing
  6142 ;; This function is called by:
  6143 ;;		_LCD_Command
  6144 ;;		_LCD_Putc
  6145 ;;		_LCD_CreateChar
  6146 ;;		_LCD_IconClear
  6147 ;;		_LCD_IconOnOff
  6148 ;; This function uses a non-reentrant model
  6149 ;;
  6150                           
  6151                           	psect	text39
  6152  001B86                     __ptext39:
  6153                           	opt callstack 0
  6154  001B86                     _Wait27us:
  6155                           	opt callstack 27
  6156                           
  6157                           ;skI2CLCDlib.c: 57:      _delay((unsigned long)((26)*(16000000/4000000.0))) ;
  6158                           
  6159                           ;incstack = 0
  6160  001B86  0E22               	movlw	34
  6161  001B88                     u3177:
  6162  001B88  2EE8               	decfsz	wreg,f,c
  6163  001B8A  D7FE               	bra	u3177
  6164  001B8C  D000               	nop2	
  6165  001B8E  0012               	return		;funcret
  6166  001B90                     __end_of_Wait27us:
  6167                           	opt callstack 0
  6168                           
  6169 ;; *************** function _I2C_Stop *****************
  6170 ;; Defined at:
  6171 ;;		line 154 in file "skI2Clib.c"
  6172 ;; Parameters:    Size  Location     Type
  6173 ;;		None
  6174 ;; Auto vars:     Size  Location     Type
  6175 ;;		None
  6176 ;; Return value:  Size  Location     Type
  6177 ;;                  2  285[None  ] int 
  6178 ;; Registers used:
  6179 ;;		wreg, status,2, status,0, cstack
  6180 ;; Tracked objects:
  6181 ;;		On entry : 0/0
  6182 ;;		On exit  : 0/0
  6183 ;;		Unchanged: 0/0
  6184 ;; Data sizes:     COMRAM   BANK0   BANK1
  6185 ;;      Params:         0       0       0
  6186 ;;      Locals:         0       0       0
  6187 ;;      Temps:          0       0       0
  6188 ;;      Totals:         0       0       0
  6189 ;;Total ram usage:        0 bytes
  6190 ;; Hardware stack levels used:    1
  6191 ;; Hardware stack levels required when called:    2
  6192 ;; This function calls:
  6193 ;;		_I2C_IdleCheck
  6194 ;; This function is called by:
  6195 ;;		_LCD_Command
  6196 ;;		_LCD_Puts
  6197 ;;		_register_read
  6198 ;;		_register_write
  6199 ;;		_acceler_Read
  6200 ;;		_LCD_Putc
  6201 ;;		_LCD_CreateChar
  6202 ;;		_LCD_IconClear
  6203 ;;		_LCD_IconOnOff
  6204 ;;		_Color_Read
  6205 ;;		_Color
  6206 ;; This function uses a non-reentrant model
  6207 ;;
  6208                           
  6209                           	psect	text40
  6210  001B38                     __ptext40:
  6211                           	opt callstack 0
  6212  001B38                     _I2C_Stop:
  6213                           	opt callstack 27
  6214                           
  6215                           ;skI2Clib.c: 156:      CollisionCheck = 0 ;
  6216                           
  6217                           ;incstack = 0
  6218  001B38  0E00               	movlw	0
  6219  001B3A  6E5A               	movwf	_CollisionCheck+1,c
  6220  001B3C  0E00               	movlw	0
  6221  001B3E  6E59               	movwf	_CollisionCheck,c
  6222                           
  6223                           ;skI2Clib.c: 158:      I2C_IdleCheck(0x5) ;
  6224  001B40  0E05               	movlw	5
  6225  001B42  EC91  F00D         	call	_I2C_IdleCheck
  6226                           
  6227                           ;skI2Clib.c: 159:      SSPCON2bits.PEN = 1 ;
  6228  001B46  84C5               	bsf	4037,2,c	;volatile
  6229  001B48  0012               	return		;funcret
  6230  001B4A                     __end_of_I2C_Stop:
  6231                           	opt callstack 0
  6232                           
  6233 ;; *************** function _I2C_Start *****************
  6234 ;; Defined at:
  6235 ;;		line 106 in file "skI2Clib.c"
  6236 ;; Parameters:    Size  Location     Type
  6237 ;;  adrs            2    2[COMRAM] int 
  6238 ;;  rw              2    4[COMRAM] int 
  6239 ;; Auto vars:     Size  Location     Type
  6240 ;;		None
  6241 ;; Return value:  Size  Location     Type
  6242 ;;                  2    2[COMRAM] int 
  6243 ;; Registers used:
  6244 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6245 ;; Tracked objects:
  6246 ;;		On entry : 0/0
  6247 ;;		On exit  : 0/0
  6248 ;;		Unchanged: 0/0
  6249 ;; Data sizes:     COMRAM   BANK0   BANK1
  6250 ;;      Params:         4       0       0
  6251 ;;      Locals:         0       0       0
  6252 ;;      Temps:          1       0       0
  6253 ;;      Totals:         5       0       0
  6254 ;;Total ram usage:        5 bytes
  6255 ;; Hardware stack levels used:    1
  6256 ;; Hardware stack levels required when called:    2
  6257 ;; This function calls:
  6258 ;;		_I2C_IdleCheck
  6259 ;; This function is called by:
  6260 ;;		_LCD_Command
  6261 ;;		_LCD_Puts
  6262 ;;		_register_read
  6263 ;;		_register_write
  6264 ;;		_acceler_Read
  6265 ;;		_LCD_Putc
  6266 ;;		_LCD_CreateChar
  6267 ;;		_LCD_IconClear
  6268 ;;		_LCD_IconOnOff
  6269 ;;		_Color_Read
  6270 ;;		_Color
  6271 ;; This function uses a non-reentrant model
  6272 ;;
  6273                           
  6274                           	psect	text41
  6275  00141C                     __ptext41:
  6276                           	opt callstack 0
  6277  00141C                     _I2C_Start:
  6278                           	opt callstack 27
  6279                           
  6280                           ;skI2Clib.c: 106: int I2C_Start(int adrs,int rw);skI2Clib.c: 107: {;skI2Clib.c: 108:    
      +                            CollisionCheck = 0 ;
  6281                           
  6282                           ;incstack = 0
  6283  00141C  0E00               	movlw	0
  6284  00141E  6E5A               	movwf	_CollisionCheck+1,c
  6285  001420  0E00               	movlw	0
  6286  001422  6E59               	movwf	_CollisionCheck,c
  6287                           
  6288                           ;skI2Clib.c: 110:      I2C_IdleCheck(0x5) ;
  6289  001424  0E05               	movlw	5
  6290  001426  EC91  F00D         	call	_I2C_IdleCheck
  6291                           
  6292                           ;skI2Clib.c: 111:      SSPCON2bits.SEN = 1 ;
  6293  00142A  80C5               	bsf	4037,0,c	;volatile
  6294                           
  6295                           ;skI2Clib.c: 113:      I2C_IdleCheck(0x5) ;
  6296  00142C  0E05               	movlw	5
  6297  00142E  EC91  F00D         	call	_I2C_IdleCheck
  6298                           
  6299                           ;skI2Clib.c: 114:      if (CollisionCheck == 1) return -1 ;
  6300  001432  0459               	decf	_CollisionCheck,w,c
  6301  001434  105A               	iorwf	_CollisionCheck+1,w,c
  6302  001436  A4D8               	btfss	status,2,c
  6303  001438  D003               	goto	l3241
  6304  00143A                     u2320:
  6305  00143A  6803               	setf	?_I2C_Start,c
  6306  00143C  6804               	setf	?_I2C_Start+1,c
  6307  00143E  0012               	return	
  6308  001440                     l3241:
  6309                           
  6310                           ;skI2Clib.c: 115:      AckCheck = 1 ;
  6311  001440  0E00               	movlw	0
  6312  001442  0100               	movlb	0	; () banked
  6313  001444  6F7F               	movwf	(_AckCheck+1)& (0+255),b
  6314  001446  0E01               	movlw	1
  6315  001448  6F7E               	movwf	_AckCheck& (0+255),b
  6316                           
  6317                           ; BSR set to: 0
  6318                           ;skI2Clib.c: 116:      SSPIF = 0 ;
  6319  00144A  969E               	bcf	3998,3,c	;volatile
  6320                           
  6321                           ; BSR set to: 0
  6322                           ;skI2Clib.c: 117:      SSPBUF = (char)((adrs<<1)+rw) ;
  6323  00144C  5003               	movf	I2C_Start@adrs,w,c
  6324  00144E  0D02               	mullw	2
  6325  001450  50F3               	movf	prodl,w,c
  6326  001452  2405               	addwf	I2C_Start@rw,w,c
  6327  001454  6EC9               	movwf	4041,c	;volatile
  6328                           
  6329                           ;skI2Clib.c: 118:      while (AckCheck)_delay((unsigned long)((1)*(16000000/4000.0)));
  6330  001456  D008               	goto	l3249
  6331  001458                     l3247:
  6332                           
  6333                           ; BSR set to: 0
  6334  001458  0E06               	movlw	6
  6335  00145A  6E07               	movwf	??_I2C_Start& (0+255),c
  6336  00145C  0E30               	movlw	48
  6337  00145E                     u3187:
  6338  00145E  2EE8               	decfsz	wreg,f,c
  6339  001460  D7FE               	bra	u3187
  6340  001462  2E07               	decfsz	??_I2C_Start& (0+255),f,c
  6341  001464  D7FC               	bra	u3187
  6342  001466  D000               	nop2	
  6343  001468                     l3249:
  6344  001468  0100               	movlb	0	; () banked
  6345  00146A  517E               	movf	_AckCheck& (0+255),w,b
  6346  00146C  117F               	iorwf	(_AckCheck+1)& (0+255),w,b
  6347  00146E  A4D8               	btfss	status,2,c
  6348  001470  D7F3               	goto	l3247
  6349                           
  6350                           ; BSR set to: 0
  6351                           ;skI2Clib.c: 119:      if (CollisionCheck == 1) return -1 ;
  6352  001472  0459               	decf	_CollisionCheck,w,c
  6353  001474  105A               	iorwf	_CollisionCheck+1,w,c
  6354  001476  B4D8               	btfsc	status,2,c
  6355  001478  D7E0               	goto	u2320
  6356                           
  6357                           ; BSR set to: 0
  6358                           ;skI2Clib.c: 120:      return SSPCON2bits.ACKSTAT ;
  6359  00147A  ACC5               	btfss	4037,6,c	;volatile
  6360  00147C  D003               	goto	u2350
  6361  00147E  6A07               	clrf	??_I2C_Start& (0+255),c
  6362  001480  2A07               	incf	??_I2C_Start& (0+255),f,c
  6363  001482  D001               	goto	u2358
  6364  001484                     u2350:
  6365  001484  6A07               	clrf	??_I2C_Start& (0+255),c
  6366  001486                     u2358:
  6367  001486  5007               	movf	??_I2C_Start,w,c
  6368  001488  6E03               	movwf	?_I2C_Start,c
  6369  00148A  6A04               	clrf	?_I2C_Start+1,c
  6370  00148C  0012               	return		;funcret
  6371  00148E                     __end_of_I2C_Start:
  6372                           	opt callstack 0
  6373                           
  6374 ;; *************** function _I2C_Send *****************
  6375 ;; Defined at:
  6376 ;;		line 172 in file "skI2Clib.c"
  6377 ;; Parameters:    Size  Location     Type
  6378 ;;  dt              1    wreg     unsigned char 
  6379 ;; Auto vars:     Size  Location     Type
  6380 ;;  dt              1    3[COMRAM] unsigned char 
  6381 ;; Return value:  Size  Location     Type
  6382 ;;                  2  283[None  ] int 
  6383 ;; Registers used:
  6384 ;;		wreg, status,2, status,0, cstack
  6385 ;; Tracked objects:
  6386 ;;		On entry : 0/0
  6387 ;;		On exit  : 0/0
  6388 ;;		Unchanged: 0/0
  6389 ;; Data sizes:     COMRAM   BANK0   BANK1
  6390 ;;      Params:         0       0       0
  6391 ;;      Locals:         1       0       0
  6392 ;;      Temps:          1       0       0
  6393 ;;      Totals:         2       0       0
  6394 ;;Total ram usage:        2 bytes
  6395 ;; Hardware stack levels used:    1
  6396 ;; Hardware stack levels required when called:    2
  6397 ;; This function calls:
  6398 ;;		_I2C_IdleCheck
  6399 ;; This function is called by:
  6400 ;;		_LCD_Command
  6401 ;;		_LCD_Puts
  6402 ;;		_register_read
  6403 ;;		_register_write
  6404 ;;		_acceler_Read
  6405 ;;		_LCD_Putc
  6406 ;;		_LCD_CreateChar
  6407 ;;		_LCD_IconClear
  6408 ;;		_LCD_IconOnOff
  6409 ;;		_Color_Read
  6410 ;;		_Color
  6411 ;; This function uses a non-reentrant model
  6412 ;;
  6413                           
  6414                           	psect	text42
  6415  001786                     __ptext42:
  6416                           	opt callstack 0
  6417  001786                     _I2C_Send:
  6418                           	opt callstack 27
  6419                           
  6420                           ;incstack = 0
  6421                           ;I2C_Send@dt stored from wreg
  6422  001786  6E04               	movwf	I2C_Send@dt,c
  6423                           
  6424                           ;skI2Clib.c: 172: int I2C_Send(char dt);skI2Clib.c: 173: {;skI2Clib.c: 174:      Collisi
      +                          onCheck = 0 ;
  6425  001788  0E00               	movlw	0
  6426  00178A  6E5A               	movwf	_CollisionCheck+1,c
  6427  00178C  0E00               	movlw	0
  6428  00178E  6E59               	movwf	_CollisionCheck,c
  6429                           
  6430                           ;skI2Clib.c: 175:      I2C_IdleCheck(0x5) ;
  6431  001790  0E05               	movlw	5
  6432  001792  EC91  F00D         	call	_I2C_IdleCheck
  6433                           
  6434                           ;skI2Clib.c: 176:      if (CollisionCheck == 1) return -1 ;
  6435  001796  0459               	decf	_CollisionCheck,w,c
  6436  001798  105A               	iorwf	_CollisionCheck+1,w,c
  6437  00179A  B4D8               	btfsc	status,2,c
  6438  00179C  0012               	return	
  6439                           
  6440                           ;skI2Clib.c: 177:      AckCheck = 1 ;
  6441  00179E  0E00               	movlw	0
  6442  0017A0  0100               	movlb	0	; () banked
  6443  0017A2  6F7F               	movwf	(_AckCheck+1)& (0+255),b
  6444  0017A4  0E01               	movlw	1
  6445  0017A6  6F7E               	movwf	_AckCheck& (0+255),b
  6446                           
  6447                           ; BSR set to: 0
  6448                           ;skI2Clib.c: 178:      SSPBUF = dt ;
  6449  0017A8  C004  FFC9         	movff	I2C_Send@dt,4041	;volatile
  6450                           
  6451                           ;skI2Clib.c: 179:      while (AckCheck) _delay((unsigned long)((1)*(16000000/4000.0)));
  6452  0017AC  D008               	goto	l3273
  6453  0017AE                     l3271:
  6454                           
  6455                           ; BSR set to: 0
  6456  0017AE  0E06               	movlw	6
  6457  0017B0  6E03               	movwf	??_I2C_Send& (0+255),c
  6458  0017B2  0E30               	movlw	48
  6459  0017B4                     u3197:
  6460  0017B4  2EE8               	decfsz	wreg,f,c
  6461  0017B6  D7FE               	bra	u3197
  6462  0017B8  2E03               	decfsz	??_I2C_Send& (0+255),f,c
  6463  0017BA  D7FC               	bra	u3197
  6464  0017BC  D000               	nop2	
  6465  0017BE                     l3273:
  6466  0017BE  0100               	movlb	0	; () banked
  6467  0017C0  517E               	movf	_AckCheck& (0+255),w,b
  6468  0017C2  117F               	iorwf	(_AckCheck+1)& (0+255),w,b
  6469  0017C4  A4D8               	btfss	status,2,c
  6470  0017C6  D7F3               	goto	l3271
  6471                           
  6472                           ; BSR set to: 0
  6473                           ;skI2Clib.c: 180:      if (CollisionCheck == 1) return -1 ;
  6474  0017C8  0459               	decf	_CollisionCheck,w,c
  6475  0017CA  105A               	iorwf	_CollisionCheck+1,w,c
  6476  0017CC  B4D8               	btfsc	status,2,c
  6477  0017CE  0012               	return	
  6478                           
  6479                           ; BSR set to: 0
  6480                           ;skI2Clib.c: 181:      return SSPCON2bits.ACKSTAT ;;	Return value of _I2C_Send is never 
      +                          used
  6481  0017D0  50C5               	movf	4037,w,c	;volatile
  6482  0017D2  0012               	return		;funcret
  6483  0017D4                     __end_of_I2C_Send:
  6484                           	opt callstack 0
  6485                           
  6486 ;; *************** function _I2C_IdleCheck *****************
  6487 ;; Defined at:
  6488 ;;		line 43 in file "skI2Clib.c"
  6489 ;; Parameters:    Size  Location     Type
  6490 ;;  mask            1    wreg     unsigned char 
  6491 ;; Auto vars:     Size  Location     Type
  6492 ;;  mask            1    1[COMRAM] unsigned char 
  6493 ;; Return value:  Size  Location     Type
  6494 ;;                  1    wreg      void 
  6495 ;; Registers used:
  6496 ;;		wreg, status,2, status,0
  6497 ;; Tracked objects:
  6498 ;;		On entry : 0/0
  6499 ;;		On exit  : 0/0
  6500 ;;		Unchanged: 0/0
  6501 ;; Data sizes:     COMRAM   BANK0   BANK1
  6502 ;;      Params:         0       0       0
  6503 ;;      Locals:         1       0       0
  6504 ;;      Temps:          1       0       0
  6505 ;;      Totals:         2       0       0
  6506 ;;Total ram usage:        2 bytes
  6507 ;; Hardware stack levels used:    1
  6508 ;; Hardware stack levels required when called:    1
  6509 ;; This function calls:
  6510 ;;		Nothing
  6511 ;; This function is called by:
  6512 ;;		_I2C_Start
  6513 ;;		_I2C_rStart
  6514 ;;		_I2C_Stop
  6515 ;;		_I2C_Send
  6516 ;;		_I2C_Receive
  6517 ;; This function uses a non-reentrant model
  6518 ;;
  6519                           
  6520                           	psect	text43
  6521  001B22                     __ptext43:
  6522                           	opt callstack 0
  6523  001B22                     _I2C_IdleCheck:
  6524                           	opt callstack 27
  6525                           
  6526                           ;incstack = 0
  6527                           ;I2C_IdleCheck@mask stored from wreg
  6528  001B22  6E02               	movwf	I2C_IdleCheck@mask,c
  6529  001B24                     
  6530                           ;skI2Clib.c: 43: void I2C_IdleCheck(char mask);skI2Clib.c: 44: {;skI2Clib.c: 45:      wh
      +                          ile (( SSPCON2 & 0x1F ) | (SSPSTAT & mask)) ;
  6531  001B24  50C7               	movf	4039,w,c	;volatile
  6532  001B26  1402               	andwf	I2C_IdleCheck@mask,w,c
  6533  001B28  6E01               	movwf	??_I2C_IdleCheck& (0+255),c
  6534  001B2A  50C5               	movf	4037,w,c	;volatile
  6535  001B2C  0B1F               	andlw	31
  6536  001B2E  1001               	iorwf	??_I2C_IdleCheck,w,c
  6537  001B30  0900               	iorlw	0
  6538  001B32  B4D8               	btfsc	status,2,c
  6539  001B34  0012               	return	
  6540  001B36  D7F6               	goto	l3053
  6541  001B38                     __end_of_I2C_IdleCheck:
  6542                           	opt callstack 0
  6543                           
  6544 ;; *************** function _InitI2C_Master *****************
  6545 ;; Defined at:
  6546 ;;		line 78 in file "skI2Clib.c"
  6547 ;; Parameters:    Size  Location     Type
  6548 ;;  speed           2    0[COMRAM] int 
  6549 ;; Auto vars:     Size  Location     Type
  6550 ;;		None
  6551 ;; Return value:  Size  Location     Type
  6552 ;;                  1    wreg      void 
  6553 ;; Registers used:
  6554 ;;		wreg, status,2, status,0
  6555 ;; Tracked objects:
  6556 ;;		On entry : 0/0
  6557 ;;		On exit  : 0/0
  6558 ;;		Unchanged: 0/0
  6559 ;; Data sizes:     COMRAM   BANK0   BANK1
  6560 ;;      Params:         2       0       0
  6561 ;;      Locals:         0       0       0
  6562 ;;      Temps:          0       0       0
  6563 ;;      Totals:         2       0       0
  6564 ;;Total ram usage:        2 bytes
  6565 ;; Hardware stack levels used:    1
  6566 ;; Hardware stack levels required when called:    1
  6567 ;; This function calls:
  6568 ;;		Nothing
  6569 ;; This function is called by:
  6570 ;;		_main
  6571 ;; This function uses a non-reentrant model
  6572 ;;
  6573                           
  6574                           	psect	text44
  6575  001AB4                     __ptext44:
  6576                           	opt callstack 0
  6577  001AB4                     _InitI2C_Master:
  6578                           	opt callstack 29
  6579                           
  6580                           ;skI2Clib.c: 78: void InitI2C_Master(int speed);skI2Clib.c: 79: {;skI2Clib.c: 80:     SS
      +                          PCON1= 0b00101000 ;
  6581                           
  6582                           ;incstack = 0
  6583  001AB4  0E28               	movlw	40
  6584  001AB6  6EC6               	movwf	4038,c	;volatile
  6585                           
  6586                           ;skI2Clib.c: 81:      SSPSTAT= 0b10000000 ;
  6587  001AB8  0E80               	movlw	128
  6588  001ABA  6EC7               	movwf	4039,c	;volatile
  6589                           
  6590                           ;skI2Clib.c: 83:      if (speed == 0) {
  6591  001ABC  5001               	movf	InitI2C_Master@speed,w,c
  6592  001ABE  1002               	iorwf	InitI2C_Master@speed+1,w,c
  6593  001AC0  A4D8               	btfss	status,2,c
  6594  001AC2  D003               	goto	l3525
  6595                           
  6596                           ;skI2Clib.c: 84:           SSPADD = 0x27 ;
  6597  001AC4  0E27               	movlw	39
  6598  001AC6  6EC8               	movwf	4040,c	;volatile
  6599                           
  6600                           ;skI2Clib.c: 85:      } else {
  6601  001AC8  D003               	goto	l3529
  6602  001ACA                     l3525:
  6603                           
  6604                           ;skI2Clib.c: 86:           SSPADD = 0x09 ;
  6605  001ACA  0E09               	movlw	9
  6606  001ACC  6EC8               	movwf	4040,c	;volatile
  6607                           
  6608                           ;skI2Clib.c: 87:           SSPSTATbits.SMP = 0 ;
  6609  001ACE  9EC7               	bcf	4039,7,c	;volatile
  6610  001AD0                     l3529:
  6611                           
  6612                           ;skI2Clib.c: 89:      SSPIE = 1 ;
  6613  001AD0  869D               	bsf	3997,3,c	;volatile
  6614                           
  6615                           ;skI2Clib.c: 90:      BCLIE = 1 ;
  6616  001AD2  86A0               	bsf	4000,3,c	;volatile
  6617                           
  6618                           ;skI2Clib.c: 91:      PEIE = 1 ;
  6619  001AD4  8CF2               	bsf	4082,6,c	;volatile
  6620                           
  6621                           ;skI2Clib.c: 92:      GIE = 1 ;
  6622  001AD6  8EF2               	bsf	4082,7,c	;volatile
  6623                           
  6624                           ;skI2Clib.c: 93:      SSPIF = 0 ;
  6625  001AD8  969E               	bcf	3998,3,c	;volatile
  6626                           
  6627                           ;skI2Clib.c: 94:      BCLIF = 0 ;
  6628  001ADA  96A1               	bcf	4001,3,c	;volatile
  6629  001ADC  0012               	return		;funcret
  6630  001ADE                     __end_of_InitI2C_Master:
  6631                           	opt callstack 0
  6632                           
  6633 ;; *************** function _INTERRUPT_InterruptManager *****************
  6634 ;; Defined at:
  6635 ;;		line 61 in file "mcc_generated_files/interrupt_manager.c"
  6636 ;; Parameters:    Size  Location     Type
  6637 ;;		None
  6638 ;; Auto vars:     Size  Location     Type
  6639 ;;		None
  6640 ;; Return value:  Size  Location     Type
  6641 ;;                  1    wreg      void 
  6642 ;; Registers used:
  6643 ;;		wreg, status,2, status,0
  6644 ;; Tracked objects:
  6645 ;;		On entry : 0/0
  6646 ;;		On exit  : 0/0
  6647 ;;		Unchanged: 0/0
  6648 ;; Data sizes:     COMRAM   BANK0   BANK1
  6649 ;;      Params:         0       0       0
  6650 ;;      Locals:         0       0       0
  6651 ;;      Temps:          0       0       0
  6652 ;;      Totals:         0       0       0
  6653 ;;Total ram usage:        0 bytes
  6654 ;; Hardware stack levels used:    1
  6655 ;; This function calls:
  6656 ;;		Nothing
  6657 ;; This function is called by:
  6658 ;;		Interrupt level 2
  6659 ;; This function uses a non-reentrant model
  6660 ;;
  6661                           
  6662                           	psect	intcode
  6663  000008                     __pintcode:
  6664                           	opt callstack 0
  6665  000008                     _INTERRUPT_InterruptManager:
  6666                           	opt callstack 22
  6667                           
  6668                           ;incstack = 0
  6669  000008  825B               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6670                           
  6671                           ;mcc_generated_files/interrupt_manager.c: 64:     if(INTCONbits.PEIE == 1)
  6672  00000A  ACF2               	btfss	4082,6,c	;volatile
  6673  00000C  D013               	goto	i2l229
  6674                           
  6675                           ;mcc_generated_files/interrupt_manager.c: 65:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 66:          if (SSPIF == 1) {
  6676  00000E  A69E               	btfss	3998,3,c	;volatile
  6677  000010  D00A               	goto	i2l3729
  6678                           
  6679                           ;mcc_generated_files/interrupt_manager.c: 67:               if (AckCheck == 1) AckCheck 
      +                          = 0 ;
  6680  000012  0100               	movlb	0	; () banked
  6681  000014  057E               	decf	_AckCheck& (0+255),w,b
  6682  000016  117F               	iorwf	(_AckCheck+1)& (0+255),w,b
  6683  000018  A4D8               	btfss	status,2,c
  6684  00001A  D004               	goto	i2l3727
  6685                           
  6686                           ; BSR set to: 0
  6687  00001C  0E00               	movlw	0
  6688  00001E  6F7F               	movwf	(_AckCheck+1)& (0+255),b
  6689  000020  0E00               	movlw	0
  6690  000022  6F7E               	movwf	_AckCheck& (0+255),b
  6691  000024                     i2l3727:
  6692                           
  6693                           ; BSR set to: 0
  6694                           ;mcc_generated_files/interrupt_manager.c: 68:               SSPIF = 0 ;
  6695  000024  969E               	bcf	3998,3,c	;volatile
  6696  000026                     i2l3729:
  6697                           
  6698                           ;mcc_generated_files/interrupt_manager.c: 70:          if (BCLIF == 1) {
  6699  000026  A6A1               	btfss	4001,3,c	;volatile
  6700  000028  D005               	goto	i2l229
  6701                           
  6702                           ;mcc_generated_files/interrupt_manager.c: 71:               CollisionCheck = 1 ;
  6703  00002A  0E00               	movlw	0
  6704  00002C  6E5A               	movwf	_CollisionCheck+1,c
  6705  00002E  0E01               	movlw	1
  6706  000030  6E59               	movwf	_CollisionCheck,c
  6707                           
  6708                           ;mcc_generated_files/interrupt_manager.c: 72:               BCLIF = 0 ;
  6709  000032  96A1               	bcf	4001,3,c	;volatile
  6710  000034                     i2l229:
  6711  000034  925B               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6712  000036  0011               	retfie		f
  6713  000038                     __end_of_INTERRUPT_InterruptManager:
  6714                           	opt callstack 0
  6715                           
  6716                           	psect	rparam
  6717  0000                     
  6718                           	psect	temp
  6719  00005B                     btemp:
  6720                           	opt callstack 0
  6721  00005B                     	ds	1
  6722  0000                     int$flags	set	btemp
  6723  0000                     wtemp8	set	btemp+1
  6724  0000                     ttemp5	set	btemp+1
  6725  0000                     ttemp6	set	btemp+4
  6726  0000                     ttemp7	set	btemp+8
  6727                           tosu	equ	0xFFF
  6728                           tosh	equ	0xFFE
  6729                           tosl	equ	0xFFD
  6730                           stkptr	equ	0xFFC
  6731                           pclatu	equ	0xFFB
  6732                           pclath	equ	0xFFA
  6733                           pcl	equ	0xFF9
  6734                           tblptru	equ	0xFF8
  6735                           tblptrh	equ	0xFF7
  6736                           tblptrl	equ	0xFF6
  6737                           tablat	equ	0xFF5
  6738                           prodh	equ	0xFF4
  6739                           prodl	equ	0xFF3
  6740                           indf0	equ	0xFEF
  6741                           postinc0	equ	0xFEE
  6742                           postdec0	equ	0xFED
  6743                           preinc0	equ	0xFEC
  6744                           plusw0	equ	0xFEB
  6745                           fsr0h	equ	0xFEA
  6746                           fsr0l	equ	0xFE9
  6747                           wreg	equ	0xFE8
  6748                           indf1	equ	0xFE7
  6749                           postinc1	equ	0xFE6
  6750                           postdec1	equ	0xFE5
  6751                           preinc1	equ	0xFE4
  6752                           plusw1	equ	0xFE3
  6753                           fsr1h	equ	0xFE2
  6754                           fsr1l	equ	0xFE1
  6755                           bsr	equ	0xFE0
  6756                           indf2	equ	0xFDF
  6757                           postinc2	equ	0xFDE
  6758                           postdec2	equ	0xFDD
  6759                           preinc2	equ	0xFDC
  6760                           plusw2	equ	0xFDB
  6761                           fsr2h	equ	0xFDA
  6762                           fsr2l	equ	0xFD9
  6763                           status	equ	0xFD8


Data Sizes:
    Strings     60
    Constant    0
    Data        30
    BSS         72
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     86      90
    BANK0           160     65     146
    BANK1           256      0      17

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_11(CODE[9]), STR_10(CODE[9]), STR_9(CODE[9]), STR_8(CODE[9]), 
		 -> STR_7(CODE[9]), STR_6(CODE[9]), STR_5(CODE[9]), STR_4(CODE[9]), 
		 -> STR_3(CODE[8]), STR_2(CODE[8]), STR_1(CODE[8]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 16
		 -> Color@buf(COMRAM[16]), Color_Read@buf(COMRAM[16]), main@s(BANK0[8]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> Color@buf(COMRAM[16]), Color_Read@buf(COMRAM[16]), main@s(BANK0[8]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    S1696_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 16
		 -> Color@buf(COMRAM[16]), Color_Read@buf(COMRAM[16]), main@s(BANK0[8]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> Color@buf(COMRAM[16]), Color_Read@buf(COMRAM[16]), main@s(BANK0[8]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_11(CODE[9]), STR_10(CODE[9]), STR_9(CODE[9]), STR_8(CODE[9]), 
		 -> STR_7(CODE[9]), STR_6(CODE[9]), STR_5(CODE[9]), STR_4(CODE[9]), 
		 -> STR_3(CODE[8]), STR_2(CODE[8]), STR_1(CODE[8]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_11(CODE[9]), STR_10(CODE[9]), STR_9(CODE[9]), STR_8(CODE[9]), 
		 -> STR_7(CODE[9]), STR_6(CODE[9]), STR_5(CODE[9]), STR_4(CODE[9]), 
		 -> STR_3(CODE[8]), STR_2(CODE[8]), STR_1(CODE[8]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 9
		 -> STR_11(CODE[9]), STR_10(CODE[9]), STR_9(CODE[9]), STR_8(CODE[9]), 
		 -> STR_7(CODE[9]), STR_6(CODE[9]), STR_5(CODE[9]), STR_4(CODE[9]), 
		 -> STR_3(CODE[8]), STR_2(CODE[8]), STR_1(CODE[8]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    xtoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    acceler_Read@Z	PTR int  size(2) Largest target is 2
		 -> main@Z(BANK0[2]), 

    acceler_Read@Y	PTR int  size(2) Largest target is 2
		 -> main@Y(BANK0[2]), 

    acceler_Read@X	PTR int  size(2) Largest target is 2
		 -> main@X(BANK0[2]), 

    LCD_Puts@s	PTR const unsigned char  size(2) Largest target is 17
		 -> Color@buf(COMRAM[16]), Color_Read@buf(COMRAM[16]), main@s(BANK0[8]), moji(BANK1[17]), 

    i2c_driver_i2cISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    i2c_driver_busCollisionISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 


Critical Paths under _main in COMRAM

    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_xtoa
    _xtoa->_pad
    _toupper->_islower
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _atoi->_isspace
    _acceler_Read->_I2C_Start
    _acceler_Read->_I2C_rStart
    _acceler_Init->_register_read
    _register_write->_I2C_Start
    _register_read->_I2C_Start
    _register_read->_I2C_rStart
    _I2C_rStart->_I2C_IdleCheck
    _I2C_Receive->_I2C_IdleCheck
    _LCD_SetCursor->_LCD_Command
    _LCD_Puts->_I2C_Start
    _LCD_Init_ST7032i->_LCD_Command
    _LCD_Clear->_LCD_Command
    _LCD_Command->_I2C_Start
    _I2C_Stop->_I2C_IdleCheck
    _I2C_Start->_I2C_IdleCheck
    _I2C_Send->_I2C_IdleCheck

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sprintf
    _vfprintf->_vfpfcnvrt

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                46    46      0   40455
                                             84 COMRAM     2     2      0
                                             37 BANK0     28    28      0
                     _InitI2C_Master
                          _LCD_Clear
                   _LCD_Init_ST7032i
                           _LCD_Puts
                      _LCD_SetCursor
                  _SYSTEM_Initialize
                            ___awdiv
                                _abs
                       _acceler_Init
                       _acceler_Read
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             16    10      6   15644
                                             21 BANK0     16    10      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6   13769
                                             76 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           46    40      6   13391
                                             66 COMRAM    10     4      6
                                              0 BANK0     21    21      0
                               _atoi
                               _dtoa
                              _fputc
                            _isdigit
                               _xtoa
 ---------------------------------------------------------------------------------
 (4) _xtoa                                                39    28     11    4491
                                             27 COMRAM    39    28     11
                            _isalpha
                            _isupper
                                _pad
                            _toupper
 ---------------------------------------------------------------------------------
 (5) _toupper                                              8     6      2     412
                                              6 COMRAM     8     6      2
                            _islower
 ---------------------------------------------------------------------------------
 (6) _islower                                              6     4      2     161
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) _isupper                                              6     4      2     161
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) _isalpha                                              6     4      2     161
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                36    26     10    4662
                                             27 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    2937
                                             16 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     166
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1235
                                              9 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (7) _fputc                                                9     5      4     834
                                              0 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (8) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     218
                                             18 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     448
                                              0 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     452
                                              0 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (4) _atoi                                                15    13      2    2096
                                              7 COMRAM    15    13      2
                             ___wmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (5) _isspace                                              7     5      2     207
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              6     4      2     237
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    1255
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _acceler_Read                                        18    12      6    4975
                                              7 COMRAM    18    12      6
                        _I2C_Receive
                           _I2C_Send
                          _I2C_Start
                           _I2C_Stop
                         _I2C_rStart
 ---------------------------------------------------------------------------------
 (1) _acceler_Init                                         3     3      0    6650
                                             12 COMRAM     3     3      0
                      _register_read
                     _register_write
 ---------------------------------------------------------------------------------
 (2) _register_write                                       4     3      1    2334
                                              7 COMRAM     4     3      1
                           _I2C_Send
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (2) _register_read                                        5     3      2    4286
                                              7 COMRAM     5     3      2
                        _I2C_Receive
                           _I2C_Send
                          _I2C_Start
                           _I2C_Stop
                         _I2C_rStart
 ---------------------------------------------------------------------------------
 (2) _I2C_rStart                                           5     1      4     826
                                              2 COMRAM     5     1      4
                      _I2C_IdleCheck
 ---------------------------------------------------------------------------------
 (2) _I2C_Receive                                          4     2      2    1435
                                              2 COMRAM     4     2      2
                      _I2C_IdleCheck
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4     908
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCD_SetCursor                                        8     4      4    3589
                                             10 COMRAM     8     4      4
                        _LCD_Command
 ---------------------------------------------------------------------------------
 (1) _LCD_Puts                                             5     3      2    2936
                                              7 COMRAM     5     3      2
                           _I2C_Send
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (1) _LCD_Init_ST7032i                                    13     5      8    2681
                                             10 COMRAM    13     5      8
                        _LCD_Command
                           _Wait10ms
 ---------------------------------------------------------------------------------
 (2) _Wait10ms                                             3     1      2     174
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _LCD_Clear                                            1     1      0    2001
                                             10 COMRAM     1     1      0
                        _LCD_Command
 ---------------------------------------------------------------------------------
 (2) _LCD_Command                                          3     3      0    2001
                                              7 COMRAM     3     3      0
                           _I2C_Send
                          _I2C_Start
                           _I2C_Stop
                           _Wait27us
 ---------------------------------------------------------------------------------
 (3) _Wait27us                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Stop                                             0     0      0      22
                      _I2C_IdleCheck
 ---------------------------------------------------------------------------------
 (2) _I2C_Start                                            5     1      4    1890
                                              2 COMRAM     5     1      4
                      _I2C_IdleCheck
 ---------------------------------------------------------------------------------
 (2) _I2C_Send                                             2     2      0      44
                                              2 COMRAM     2     2      0
                      _I2C_IdleCheck
 ---------------------------------------------------------------------------------
 (3) _I2C_IdleCheck                                        2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _InitI2C_Master                                       2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _INTERRUPT_InterruptManager                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _InitI2C_Master
   _LCD_Clear
     _LCD_Command
       _I2C_Send
         _I2C_IdleCheck
       _I2C_Start
         _I2C_IdleCheck
       _I2C_Stop
         _I2C_IdleCheck
       _Wait27us
   _LCD_Init_ST7032i
     _LCD_Command
       _I2C_Send
         _I2C_IdleCheck
       _I2C_Start
         _I2C_IdleCheck
       _I2C_Stop
         _I2C_IdleCheck
       _Wait27us
     _Wait10ms
   _LCD_Puts
     _I2C_Send
       _I2C_IdleCheck
     _I2C_Start
       _I2C_IdleCheck
     _I2C_Stop
       _I2C_IdleCheck
   _LCD_SetCursor
     _LCD_Command
       _I2C_Send
         _I2C_IdleCheck
       _I2C_Start
         _I2C_IdleCheck
       _I2C_Stop
         _I2C_IdleCheck
       _Wait27us
   _SYSTEM_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   ___awdiv
   _abs
     ___aomod (ARG)
   _acceler_Init
     _register_read
       _I2C_Receive
         _I2C_IdleCheck
       _I2C_Send
         _I2C_IdleCheck
       _I2C_Start
         _I2C_IdleCheck
       _I2C_Stop
         _I2C_IdleCheck
       _I2C_rStart
         _I2C_IdleCheck
     _register_write
       _I2C_Send
         _I2C_IdleCheck
       _I2C_Start
         _I2C_IdleCheck
       _I2C_Stop
         _I2C_IdleCheck
   _acceler_Read
     _I2C_Receive
       _I2C_IdleCheck
     _I2C_Send
       _I2C_IdleCheck
     _I2C_Start
       _I2C_IdleCheck
     _I2C_Stop
       _I2C_IdleCheck
     _I2C_rStart
       _I2C_IdleCheck
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _atoi
           ___wmul
           _isdigit
           _isspace
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
                 _putch
             _strlen
         _fputc
           _putch
         _isdigit
         _xtoa
           _isalpha
           _isupper
           _pad
             _fputc
               _putch
             _fputs
               _fputc
                 _putch
             _strlen
           _toupper
             _islower

 _INTERRUPT_InterruptManager (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1FF      0       0       8        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      11       6        6.6%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     41      92       4       91.3%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     56      5A       1       95.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      FD       7        0.0%
DATA                 0      0      FD       9        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sat Jul 13 21:18:54 2019

                                  _a 006C                                    _b 0068  
                                  _c 0060                   __size_of_I2C_Start 0072  
                       ?_LCD_Command 0001                          _SSPSTATbits 000FC7  
                       ___awdiv@sign 0006                  ___wmul@multiplicand 0003  
                       __CFG_CP0$OFF 000000                         __CFG_CP1$OFF 000000  
                      _LCD_SetCursor 1A32                                  l308 188E  
                                l521 1554                                  l273 07D0  
                                l380 1154                                  l526 1902  
                                l614 0AFC                                  l464 1704  
                                l536 125C                                  l616 0B04  
                                l466 171E                                  l591 0918  
                                l578 1330                                  l589 0910  
                                _GIE 007F97                         __CFG_CPB$OFF 000000  
                       __CFG_CPD$OFF 000000                                  _abs 1970  
                                _pad 1302                         __CFG_BORV$19 000000  
                __size_of_I2C_rStart 0070                 __size_of_I2C_Receive 0054  
                                wreg 000FE8                         __CFG_LVP$OFF 000000  
                               ?_abs 0013                                 l3001 0E30  
                               l3021 0FFC                                 l3013 0FBE  
                               l3023 1010                                 l3111 0A9C  
                               l3033 106E                                 l3017 0FE2  
                               l3203 0EBE                                 l3115 0AB4  
                               l1356 1998                                 l3053 1B24  
                               l3213 0F28                                 l3205 0EC6  
                               l3037 1094                                 l3029 1058  
                               l3311 14C8                                 l3207 0ECC  
                               l3063 08F2                                 l3143 0B68  
                               l3135 0B46                                 l3241 1440  
                               l3313 14D8                                 l3049 1854  
                               l3209 0EF4                                 l3081 0940  
                               l1457 1814                                 l3129 0B18  
                               l3307 14B2                                 l1387 0F88  
                               l3091 0A38                                 l3077 0932  
                               l3181 0CE0                                 l3157 0BF6  
                               l3165 0C6C                                 l3271 17AE  
                               l3247 1458                                 l3423 0552  
                               l3351 0284                                 l3511 16C4  
                               l3273 17BE                                 l3249 1468  
                               l3433 0598                                 l3409 0484  
                               l3353 0286                                 l3187 0E64  
                               l3371 02A6                                 l3363 029E  
                               l3355 0296                                 l3525 1ACA  
                               l3197 0EAE                                 l3189 0E68  
                               l3429 058E                                 l3509 169E  
                               l3615 1676                                 l3711 1412  
                               l3703 13FA                                 l3391 037C  
                               l3375 02B0                                 l3367 02A2  
                               l3359 029A                                 l3439 05B0  
                               l3529 1AD0                                 l3609 1656  
                               l2921 133A                                 l3393 038A  
                               l3377 02F2                                 l3707 1404  
                               l3635 11EA                                 l2915 131A  
                               l2925 1352                                 l3389 035E  
                               ?_pad 0011                                 l3567 1166  
                               l3639 11FC                                 l2919 1328  
                               l3489 1558                                 l2929 137E  
                               l3691 13D2                                 l2891 18B8  
                               l3693 13DA                                 l3685 13BC  
                               l2981 0D84                                 l2877 127A  
                               l3679 13AC                                 l2983 0D98  
                               l2975 0D5E                                 l2887 18A2  
                               l2895 1A6A                                 l3783 075C  
                               l3767 06AE                                 l2993 0DF4  
                               l2969 0D36                                 l2897 1A6E  
                               l2997 0E0A                                 l3797 07D2  
                               STR_1 0225                                 STR_2 022D  
                               STR_3 0235                                 STR_4 021C  
                               STR_5 020A                                 STR_6 0201  
                               STR_7 0213                                 u2000 0A46  
                               u2020 0A68                                 u2021 0A66  
                               u2030 0A76                                 u2110 0B64  
                               u2040 0A7A                                 u2120 0B9A  
                               u2210 0C9E                                 u2130 0B9C  
                               u2211 0C9C                                 u2060 0A86  
                               u2220 0CAC                                 _LATA 000F89  
                               u2230 0CB0                                 u2150 0BD4  
                               _LATB 000F8A                                 _LATC 000F8B  
                               u2320 143A                                 u2160 0BD6  
                               u1610 19CA                                 u2090 0AF2  
                               u3107 161E                                 u2420 14F4  
                               u2260 0EAA                                 u1700 1934  
                               u1620 19CC                                 u2180 0C48  
                               u3117 14CE                                 u2350 1484  
                               u1630 197E                                 u1710 1936  
                               u2190 0C7C                                 u2510 03C2  
                               u3127 166E                                 u2280 0F58  
                               u1560 1272                                 u1720 17FC  
                               u2520 03C4                                 u3137 10C0  
                               u2185 0C36                                 u3057 062E  
                               u2290 0F5A                                 u1810 0D9C  
                               u1730 17FE                                 u2530 03D2  
                               u3147 1B0A                                 u3067 065A  
                               u2700 1684                                 u2428 14F6  
                               u1580 12BA                                 u3157 1948  
                               u3077 067E                                 u2358 1486  
                               u2390 14AC                                 u1750 1A2A  
                               u1910 1850                                 u2550 0406  
                               u3167 195C                                 u2455 1726  
                               u3087 0892                                 u2456 1728  
                               u1760 1A2C                                 u1680 19FA  
                               u3177 1B88                                 u3097 15CE  
                               u2730 122C                                 u1930 08C4  
                               u1690 19FC                                 u2570 04B8  
                               u3187 145E                                 u1940 08C6  
                               u3197 17B4                                 u1870 1014  
                               u2655 1126                                 u1791 0D64  
                               u1970 0906                                 u2850 0704  
                               _PEIE 007F96                                 u2780 13DE  
                               u2860 07CC                                 u1990 092C  
                               _WPUA 000F77                                 _WPUB 000F78  
                               abs@a 0013                                 _dbuf 0084  
                               _atoi 0E52                                 _main 05E4  
                               _dtoa 089C                __size_of_acceler_Init 0062  
              __size_of_acceler_Read 00C6                                 _moji 0100  
                 __size_of_LCD_Clear 0034                                 _prec 0074  
                               _nout 0070                                 pad@i 0018  
                               pad@p 0015                                 fsr1h 000FE2  
                               fsr2h 000FDA                                 indf2 000FDF  
                               fsr1l 000FE1                                 pad@w 001A  
                               fsr2l 000FD9                     __end_of_I2C_Send 17D4  
                               btemp 005B                                 _xtoa 0ADE  
                   __end_of_I2C_Stop 1B4A                                 prodh 000FF4  
                               prodl 000FF3                                 start 0038  
                      __CFG_IESO$OFF 000000                        __CFG_FOSC$IRC 000000  
                       ___param_bank 000000               __size_of_I2C_IdleCheck 0016  
                              ??_abs 0015                                ??_pad 0017  
               register_read@address 000A                     __end_of_LCD_Puts 168A  
                     ?_LCD_SetCursor 000B       __size_of_OSCILLATOR_Initialize 000E  
      __end_of_OSCILLATOR_Initialize 1B78                      __end_of___aodiv 0E52  
                              ?_atoi 0008                                ?_main 0001  
                              ?_dtoa 001C                      __end_of___aomod 10B6  
                              _BCLIE 007D03                                _BCLIF 007D0B  
                    __end_of___awdiv 141C                                _ANSEL 000F7E  
                    ___awdiv@divisor 0003                                ?_xtoa 001C  
                     __CFG_DEBUG$OFF 000000                        __CFG_WDTEN$ON 000000  
                              i2l229 0034                      ___awdiv@counter 0005  
                     __CFG_BBSIZ$OFF 000000                          LCD_Puts@ans 000B  
                       vfpfcnvrt@fmt 0045                         vfpfcnvrt@llu 00AC  
                              _TRISA 000F92                                _TRISB 000F93  
                              _TRISC 000F94                                _SSPIE 007CEB  
                              _SSPIF 007CF3                        __CFG_WRT0$OFF 000000  
                      __CFG_WRT1$OFF 000000                           _ContSet_DT 0076  
                     __CFG_EBTR0$OFF 000000                       __CFG_FCMEN$OFF 000000  
                     __CFG_EBTR1$OFF 000000                        __CFG_WRTB$OFF 000000  
                      __CFG_WRTC$OFF 000000                        __CFG_WRTD$OFF 000000  
                       _acceler_Init 15C8                         _acceler_Read 119C  
                     __CFG_EBTRB$OFF 000000                                _flags 0057  
                              _moji2 00E5                                _fputc 1262  
                    __end_of_isalpha 193C                                _fputs 1898  
                    __end_of_isdigit 1A32                                atoi@n 0015  
                              pad@fp 0011                                atoi@s 0008  
                              _width 0072                                _putch 1B94  
                              main@X 00E3                                main@Y 00DF  
                              main@Z 00E1                                main@i 00D7  
                              dtoa@d 001E                                main@s 00C9  
                              dtoa@i 003E                                dtoa@n 0036  
                              dtoa@p 0030                                dtoa@s 0034  
                              dtoa@w 0032                      __end_of_islower 19D2  
                    __end_of_isspace 185C                    __end_of_I2C_Start 148E  
                       LCD_Command@c 000A                      __end_of_isupper 1A02  
                              tablat 000FF5           _i2c_driver_busCollisionISR 0082  
              __end_of_register_read 1566                                ttemp5 005C  
                              ttemp6 005F                                ttemp7 0063  
                              status 000FD8                                wtemp8 005C  
                    __end_of_sprintf 1786                                xtoa@c 0041  
                              xtoa@d 001E                                xtoa@i 003F  
                              xtoa@n 0037                                xtoa@p 0033  
                              xtoa@w 0035                                xtoa@x 0026  
                     __CFG_HFOFST$ON 000000                    LCD_Init_ST7032i@d 0016  
                    __end_of_toupper 181E                     ??_InitI2C_Master 0003  
                         _FuncSet_DT 0078                         _toupper$1759 000D  
                     __CFG_MCLRE$OFF 000000                      __initialization 1566  
                       __end_of_atoi 0F92                         __end_of_main 089C  
                       __end_of_dtoa 0ADE                         __end_of_xtoa 0D0A  
                     __CFG_PCLKEN$ON 000000          ?_INTERRUPT_InterruptManager 0001  
                   __end_of_Wait10ms 1B22                               ??_atoi 000A  
                             ??_main 0055                     __end_of_Wait27us 1B90  
                             ??_dtoa 0026                               ??_xtoa 0027  
                  __end_of_LCD_Clear 1970                        __activetblptr 000002  
                     __CFG_PLLEN$OFF 000000                        _I2C_IdleCheck 1B22  
                             ?_fputc 0001                               ?_fputs 000A  
                   ___awdiv@dividend 0001                               ?_putch 0001  
                             _ANSELH 000F7F                       _register_write 18D0  
                             i2l3727 0024                               i2l3729 0026  
                             _OSCCON 000FD3                        vfpfcnvrt@done 00B4  
           __end_of_LCD_Init_ST7032i 119C                               _SSPADD 000FC8  
                             _SSPBUF 000FC9                               _SSPMSK 000F6F  
                       ??_I2C_rStart 0007                       __CFG_PWRTEN$ON 000000  
                     __CFG_XINST$OFF 000000                         vfprintf@cfmt 0053  
                          ??___aodiv 0011                    register_write@ans 000A  
                          ??___aomod 0011                               ___wmul 1ADE  
                  register_write@val 0008                            ??___awdiv 0005  
                     __CFG_STVREN$ON 000000                      ??_LCD_SetCursor 000F  
                             clear_0 15AC                     ___awdiv@quotient 0007  
                             pad@buf 0013                 __size_of_LCD_Command 003C  
                             dtoa@fp 001C                               main@xl 00D9  
                             main@yl 00DB                               main@zl 00DD  
                             _strlen 1A60                               fputc@c 0001  
                             fputs@c 000E                               fputs@i 000F  
                             fputs@s 000A                            ??_isalpha 0003  
                          ??_isdigit 0003                            ?_I2C_Send 0001  
                          ?_I2C_Stop 0001                            ??_islower 0003  
                       __mediumconst 0000                            ??_isspace 0003  
                 __end_of_I2C_rStart 14FE                          Wait10ms@num 0001  
                             tblptrh 000FF7                            ??_isupper 0003  
                             tblptrl 000FF6                               tblptru 000FF8  
                     ?_I2C_IdleCheck 0001                               putch@c 0001  
                   __end_of_vfprintf 16E0               __end_of_register_write 1908  
                          ??_sprintf 0055                               xtoa@fp 001C  
                          ??_toupper 0009        __size_of_INTERRUPT_Initialize 0004  
                  _SYSTEM_Initialize 1B5C                           __accesstop 0060  
            __end_of__initialization 15BA                            ?_LCD_Puts 0008  
                 ?_SYSTEM_Initialize 0001                        ___rparam_used 000001  
                     __pcstackCOMRAM 0001                         __pidataBANK0 1B78  
                       __pidataBANK1 1B4A                  ??_SYSTEM_Initialize 0001  
                          LCD_Puts@s 0008                  InitI2C_Master@speed 0001  
                      __end_of_fputc 1302                        __end_of_fputs 18D0  
                      __end_of_putch 1B96                register_write@address 0009  
                         ??_I2C_Send 0003                           ??_I2C_Stop 0003  
                    ?_register_write 0008                              ??_fputc 0005  
          __end_of_SYSTEM_Initialize 1B6A                              ??_fputs 000E  
                            ??_putch 0001                           __pbssBANK0 0060  
                         ??_LCD_Puts 000A                            ?_Wait10ms 0001  
                          ?_Wait27us 0001                           I2C_Send@dt 0004  
                            ?___wmul 0001                        ??_I2C_Receive 0005  
                            ?_strlen 0001                      ??_I2C_IdleCheck 0001  
                            _OSCCON2 000FD2                   __size_of_vfpfcnvrt 03A6  
                            _OSCTUNE 000F9B                              _SSPCON1 000FC6  
                            _SSPCON2 000FC5                              _SSPSTAT 000FC7  
                          _I2C_Start 141C                           ??_Wait10ms 0003  
                         ??_Wait27us 0001                       I2C_Receive@ack 0003  
                            __Hparam 0000                              __Lparam 0000  
                            ___aodiv 0D0A                              ___aomod 0F92  
                            ___awdiv 1398                      __size_of___wmul 0026  
                          ?_vfprintf 004D                         __psmallconst 0200  
           LCD_SetCursor@row_offsets 000F                              __pcinit 1566  
                            __ramtop 0200                              __ptext0 05E4  
                            __ptext1 1734                              __ptext2 168A  
                            __ptext3 023E                              __ptext4 0ADE  
                            __ptext5 17D4                              __ptext6 19A2  
                            __ptext7 19D2                              __ptext8 1908  
                            __ptext9 089C                      __size_of_strlen 002A  
              _OSCILLATOR_Initialize 1B6A                         __size_of_abs 0032  
                       __size_of_pad 0096                              _isalpha 1908  
                            _isdigit 1A02                     acceler_Read@data 0014  
                            _islower 19A2             ??_PIN_MANAGER_Initialize 0001  
                            _isspace 181E                              _isupper 19D2  
                          _LCD_Clear 193C                  __end_of_I2C_Receive 1734  
                            atoi@neg 000E           __size_of_SYSTEM_Initialize 000E  
                            _sprintf 1734                              _toupper 17D4  
               end_of_initialization 15BA                     LCD_SetCursor@col 000B  
                   LCD_SetCursor@row 000D                              fputc@fp 0003  
                     LCD_Command@ans 0008                        __Lmediumconst 0000  
                            fputs@fp 000C                    ?_LCD_Init_ST7032i 000B  
                         ?_I2C_Start 0003                   ??_LCD_Init_ST7032i 0013  
                       I2C_rStart@rw 0005                    __end_of_vfpfcnvrt 05E4  
                            postdec1 000FE5                              postdec2 000FDD  
                            postinc0 000FEE                              postinc1 000FE6  
                            postinc2 000FDE                           ??_vfprintf 0053  
                            strlen@a 0003                              strlen@s 0001  
             __size_of_register_read 0068                  LCD_Init_ST7032i@bon 000F  
                       _LCD_ColumnSu 007C                           ?_LCD_Clear 0001  
                  __size_of_I2C_Send 004E                    __size_of_I2C_Stop 0012  
                  __size_of_LCD_Puts 0060         __end_of_INTERRUPT_Initialize 1B94  
                      ??_LCD_Command 0008                          vfpfcnvrt@ap 0047  
                        vfpfcnvrt@fp 0043                          vfpfcnvrt@ll 00A4  
                     __end_of___wmul 1B04                __end_of_LCD_SetCursor 1A60  
            __size_of_InitI2C_Master 002A               ?_OSCILLATOR_Initialize 0001  
                        _I2C_Receive 16E0                     ??_register_write 0009  
                     __end_of_strlen 1A8A                  start_initialization 1566  
    __size_of_PIN_MANAGER_Initialize 002A                     register_read@ans 000B  
                        __end_of_abs 19A2                          __end_of_pad 1398  
                      _register_read 14FE                          ??_I2C_Start 0007  
                        vfprintf@fmt 004F                    __size_of_Wait10ms 001E  
                  __size_of_Wait27us 000A                             ??___wmul 0005  
                        __pdataBANK0 00E5                          __pdataBANK1 0100  
                           ??_strlen 0003                       _CollisionCheck 0059  
                  _i2c_driver_i2cISR 0080                  __end_of_LCD_Command 1898  
                        __pbssCOMRAM 0057                        __pcstackBANK0 00A4  
                   ___aodiv@dividend 0001                        ?_acceler_Init 0001  
                      ?_acceler_Read 0008                          ??_LCD_Clear 000B  
                     ?_register_read 0008                            _atoi$1656 0010  
                          _atoi$1657 0014                            _atoi$1658 0012  
             _PIN_MANAGER_Initialize 1A8A                            _dtoa$1172 002E  
                          __pintcode 0008                             ?___aodiv 0001  
                           ?___aomod 0001                             ?___awdiv 0001  
                   ___aodiv@quotient 0013                        acceler_Read@X 0008  
                      acceler_Read@Y 000A                        acceler_Read@Z 000C  
                      acceler_Read@i 0012         ??_INTERRUPT_InterruptManager 0001  
                  __size_of_vfprintf 0056                          __smallconst 0200  
                           ?_isalpha 0001                          I2C_Start@rw 0005  
                           ?_isdigit 0001                             _I2C_Send 1786  
                           _I2C_Stop 1B38                        I2C_Receive@dt 0005  
                     ??_acceler_Init 000D                       ??_acceler_Read 000E  
                           ?_islower 0001                             ?_isspace 0001  
                           ?_isupper 0001                __end_of_I2C_IdleCheck 1B38  
                           ?_sprintf 00B9                       __size_of_fputc 00A0  
                     __size_of_fputs 0038                             ?_toupper 0007  
                     __size_of_putch 0002                 _INTERRUPT_Initialize 1B90  
           LCD_Init_ST7032i@contrast 000D                      acceler_Init@ans 000E  
                    acceler_Read@ack 000E                      acceler_Read@ans 0010  
                     ___wmul@product 0005                             _LCD_Puts 162A  
                           _LATBbits 000F8A                             _PIE1bits 000F9D  
__size_of_INTERRUPT_InterruptManager 0030                             _PIR1bits 000F9E  
                           _PIR2bits 000FA1                             _RCONbits 000FD0  
                   __CFG_WDTPS$32768 000000                          _LCD_Command 185C  
                           _AckCheck 007E                            _vfpfcnvrt 023E  
                          _xtoa$1183 002F                            _xtoa$1184 0031  
                     _InitI2C_Master 1AB4            __size_of_LCD_Init_ST7032i 00E6  
                  ___wmul@multiplier 0001                          _LCD_NowPage 007A  
                       _isspace$1683 0007                        I2C_Start@adrs 0003  
                         vfpfcnvrt@c 00B8                          _INTCON2bits 000FF1  
                          copy_data0 157A                            copy_data1 159A  
              ?_INTERRUPT_Initialize 0001                   LCD_SetCursor@F2916 00EE  
                    ??_register_read 000A                           _I2C_rStart 148E  
                           _Wait10ms 1B04                             _Wait27us 1B86  
                           __Hrparam 0000                           vfprintf@ap 0051  
                           __Lrparam 0000                           vfprintf@fp 004D  
                 __CFG_BOREN$SBORDIS 000000               __end_of_InitI2C_Master 1ADE  
            ??_OSCILLATOR_Initialize 0001                     __size_of___aodiv 0148  
                   __size_of___aomod 0124                     __size_of___awdiv 0084  
                  I2C_IdleCheck@mask 0002                           ?_vfpfcnvrt 0043  
                    ___aodiv@divisor 0009                         ?_I2C_Receive 0003  
                    ___aodiv@counter 0011                           sprintf@fmt 00BB  
                   __size_of_isalpha 0034                     __size_of_isdigit 0030  
                   __size_of_islower 0030                     __size_of_isspace 003E  
                           __ptext10 1302                             __ptext11 1A60  
                           __ptext20 1A02                             __ptext12 1898  
                           __ptext21 1ADE                             __ptext13 1262  
                           __ptext30 1A8A                             __ptext22 119C  
                           __ptext14 1B94                             __ptext31 1B6A  
                           __ptext23 15C8                             __ptext15 1970  
                           __ptext40 1B38                             __ptext32 1B90  
                           __ptext24 18D0                             __ptext16 0F92  
                           __ptext41 141C                             __ptext33 1A32  
                           __ptext25 14FE                             __ptext17 0D0A  
                           __ptext42 1786                             __ptext34 162A  
                           __ptext26 148E                             __ptext18 0E52  
                           __ptext43 1B22                             __ptext35 10B6  
                           __ptext27 16E0                             __ptext19 181E  
                           __ptext44 1AB4                             __ptext36 1B04  
                           __ptext28 1398                             __ptext37 193C  
                           __ptext29 1B5C                             __ptext38 185C  
                           __ptext39 1B86                     __size_of_isupper 0030  
                   __size_of_sprintf 0052                     __size_of_toupper 004A  
                     I2C_rStart@adrs 0003                        __size_of_atoi 0140  
                      __size_of_main 02B8                        __size_of_dtoa 0242  
                      __size_of_xtoa 022C                 __end_of_acceler_Init 162A  
               __end_of_acceler_Read 1262                             int$flags 005B  
                    ?_InitI2C_Master 0001                             _vfprintf 168A  
 __end_of_INTERRUPT_InterruptManager 0038           _INTERRUPT_InterruptManager 0008  
                           main@xcal 00D1                             main@ycal 00D3  
                           main@zcal 00D5                     ___aomod@dividend 0001  
                     _vfpfcnvrt$1198 00B6                           _INTCONbits 000FF2  
                           isalpha@c 0001                             isdigit@c 0001  
             ??_INTERRUPT_Initialize 0001                             intlevel2 0000  
                          sprintf@ap 00C1                             islower@c 0001  
                           isspace@c 0001               __size_of_LCD_SetCursor 002E  
            ?_PIN_MANAGER_Initialize 0001                          ?_I2C_rStart 0003  
                           isupper@c 0001                      ___aomod@divisor 0009  
                        ??_vfpfcnvrt 0049                      ___aomod@counter 0011  
                   _LCD_Init_ST7032i 10B6                             sprintf@f 00C3  
                           sprintf@s 00B9                LCD_Init_ST7032i@colsu 0011  
                           toupper@c 0007                          _SSPCON1bits 000FC6  
                        _SSPCON2bits 000FC5                         ___aodiv@sign 0012  
     __end_of_PIN_MANAGER_Initialize 1AB4                 LCD_Init_ST7032i@icon 000B  
            __size_of_register_write 0038                         ___aomod@sign 0012  
